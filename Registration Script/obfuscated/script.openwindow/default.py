import base64;exec base64.b64decode('#
#       Copyright (C) 2015
#       Json Edits and Various tweaks by OpenELEQ (OpenELEQ@gmail.com)
#       Based on original work by:
#       Lee Randall (info@totalrevolution.tv)
#
#  This software is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License
#  You can find a copy of the license in the add-on folder
if 64 - 64: i11iIiiIii
import urllib , urllib2 , re , xbmcplugin , xbmcgui , xbmc , xbmcaddon , os , sys , time , xbmcvfs , datetime , zipfile , shutil , binascii , hashlib
import downloader
import extract
import yt
import threading
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
try :
 import json as simplejson
except :
 import simplejson
 if 73 - 73: II111iiii
IiII1IiiIiI1 = 'script.openwindow'
iIiiiI1IiI1I1 = xbmcaddon . Addon ( IiII1IiiIiI1 )
o0OoOoOO00 = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' , '' ) )
I11i = xbmcaddon . Addon ( 'script.openwindow' ) . getAddonInfo ( "path" )
O0O = xbmc . translatePath ( os . path . join ( I11i , 'resources' , 'language' ) )
Oo = 7
I1ii11iIi11i = 10
I1IiI = 7
o0OOO = '/usr/share/kodi/addons/script.openwindow/default.py'
if not os . path . exists ( o0OOO ) :
 o0OOO = xbmc . translatePath ( os . path . join ( o0OoOoOO00 , IiII1IiiIiI1 , 'default.py' ) )
iIiiiI = xbmcgui . Dialog ( )
Iii1ii1II11i = xbmcgui . DialogProgress ( )
iI111iI = xbmc . getSkinDir ( )
IiII = 0.0
iI1Ii11111iIi = 0.0
i1i1II = '/storage/.restore/'
O0oo0OO0 = xbmc . translatePath ( os . path . join ( 'special://home/addons' , 'packages' ) )
I1i1iiI1 = xbmc . translatePath ( os . path . join ( 'special://home' , 'userdata' , 'Thumbnails' ) )
iiIIIII1i1iI = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' , 'packages' , '' ) )
o0oO0 = xbmc . translatePath ( 'special://home/' )
oo00 = os . path . join ( o0oO0 , 'userdata' , 'addon_data' , 'service.openelec.settings' , 'restoregui' )
o00 = os . path . join ( o0oO0 , 'userdata' , 'addon_data' , 'service.openelec.settings' , 'runwizard' )
Oo0oO0ooo = os . path . join ( o0oO0 , 'userdata' , 'addon_data' , 'service.openelec.settings' , 'dltime' )
o0oOoO00o = os . path . join ( o0oO0 , 'userdata' , 'addon_data' , 'service.openelec.settings' )
i1 = xbmc . translatePath ( 'special://xbmc/' )
oOOoo00O0O = xbmc . translatePath ( 'special://home/media/branding/branding_update.png' )
i1111 = xbmc . getIPAddress ( )
i11 = xbmc . translatePath ( 'special://logpath/' )
I11 = xbmc . translatePath ( os . path . join ( o0oO0 , 'debug.txt' ) )
Oo0o0000o0o0 = xbmc . translatePath ( 'special://home/addons/script.openwindow/' )
oOo0oooo00o = xbmc . getInfoLabel ( "System.BuildVersion" )
oO0o0o0ooO0oO = iIiiiI1IiI1I1 . getSetting ( 'testdebug' )
oo0o0O00 = ''
oO = ''
if 34 - 34: oOOoo * I1IiIiiIII
if not os . path . exists ( Oo0o0000o0o0 ) :
 Oo0o0000o0o0 = xbmc . translatePath ( 'special://xbmc/addons/script.openwindow/' )
 if 47 - 47: IiiIII111ii / iiIIi1IiIi11 . i1Ii
def I111I11 ( ) :
 oOo0oooo00o = xbmc . getInfoLabel ( "System.BuildVersion" )
 O0O00Ooo = float ( oOo0oooo00o [ : 4 ] )
 if O0O00Ooo < 14 :
  OOoooooO = os . path . join ( i11 , 'xbmc.log' )
 else :
  OOoooooO = os . path . join ( i11 , 'kodi.log' )
  if 14 - 14: oOOoO0 % O0OoO000O0OO
 try :
  iiI1IiI = open ( OOoooooO , mode = 'r' )
  II = iiI1IiI . read ( )
  iiI1IiI . close ( )
 except :
  try :
   iiI1IiI = open ( os . path . join ( o0oO0 , 'temp' , 'kodi.log' ) , mode = 'r' )
   II = iiI1IiI . read ( )
   iiI1IiI . close ( )
  except :
   try :
    iiI1IiI = open ( os . path . join ( o0oO0 , 'temp' , 'xbmc.log' ) , mode = 'r' )
    II = iiI1IiI . read ( )
    iiI1IiI . close ( )
   except :
    pass
    if 57 - 57: ooOoo0O
 if 'OpenELEC' in II :
  return True
  if 76 - 76: i1II1I11 / i1I / OO0o / oo % O0o0Oo
if I111I11 ( ) :
 Oo00OOOOO = '/storage'
 O0OO00o0OO = '/storage/downloads'
 if not os . path . exists ( i1i1II ) :
  os . makedirs ( i1i1II )
else :
 Oo00OOOOO = o0oO0
 O0OO00o0OO = o0oO0 [ : - 6 ]
 O0OO00o0OO = xbmc . translatePath ( os . path . join ( O0OO00o0OO , 'temp_download' ) )
 if oO0o0o0ooO0oO == 'true' :
  print "### venzpath: " + O0OO00o0OO
  if 44 - 44: O0o / O0OoO000O0OO + i11iIiiIii + OoooooooOO * i1IIi
if not os . path . exists ( O0OO00o0OO ) :
 os . makedirs ( O0OO00o0OO )
o0oo0o0O00OO = os . path . join ( O0OO00o0OO , 'target.zip' )
if 80 - 80: i1IIi
if not os . path . exists ( iiIIIII1i1iI ) :
 os . makedirs ( iiIIIII1i1iI )
 if 70 - 70: iiIIi1IiIi11 - i1Ii
 if 43 - 43: i1II1I11 / II111iiii / OoooooooOO . i1Ii . i1I
class i11Iiii ( xbmcgui . Window ) :
 def __init__ ( self , * args , ** kwargs ) :
  global oO
  self . header = kwargs [ 'header' ]
  self . background = kwargs [ 'background' ]
  self . icon = kwargs [ 'icon' ]
  self . maintext = kwargs [ 'maintext' ]
  if 23 - 23: i1Ii . II111iiii
  if not os . path . exists ( oOOoo00O0O ) :
   self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , Oo0o0000o0o0 + 'resources/images/whitebg.jpg' ) )
   if 98 - 98: iIii1I11I1II1 % iiIIi1IiIi11 * oOOoO0 * iiIIi1IiIi11
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , oOOoo00O0O ) )
  self . updateimage = xbmcgui . ControlImage ( 200 , 230 , 250 , 250 , Oo0o0000o0o0 + 'resources/images/' + self . icon )
  self . addControl ( self . updateimage )
  self . updateimage . setAnimations ( [ ( 'conditional' , 'effect=rotate start=0 end=360 center=auto time=3000 loop=true condition=true' , ) ] )
  if 45 - 45: O0o0Oo . iiIIi1IiIi11
  if 83 - 83: O0OoO000O0OO . iIii1I11I1II1 . oOOoO0
  if 31 - 31: i1I . i1I - i1Ii / IiiIII111ii + O0o * oOOoo
  if 63 - 63: O0o0Oo % i1IIi / OoooooooOO - OoooooooOO
  if 8 - 8: iiIIi1IiIi11
  if 60 - 60: i1II1I11 / i1II1I11
  if not os . path . exists ( oOOoo00O0O ) :
   self . strDescription = xbmcgui . ControlTextBox ( 570 , 250 , 600 , 300 , 'font14' , '0xFF000000' )
   self . addControl ( self . strDescription )
   self . strDescription . setText ( self . maintext )
   if 46 - 46: i1I * ooOoo0O - IiiIII111ii * O0OoO000O0OO - O0o0Oo
 def onAction ( self , action ) :
  if action == I1ii11iIi11i or action == Oo :
   print "ESC and HOME Disabled"
   if 83 - 83: OoooooooOO
   if 31 - 31: II111iiii - ooOoo0O . O0o0Oo % iiIIi1IiIi11 - O0
class iii11 ( xbmcgui . Window ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . header = kwargs [ 'header' ]
  self . background = kwargs [ 'background' ]
  if 58 - 58: ooOoo0O * i11iIiiIii / iiIIi1IiIi11 % O0o0Oo - oOOoO0 / O0OoO000O0OO
  if kwargs [ 'backbutton' ] != '' :
   self . backbutton = kwargs [ 'backbutton' ]
  else :
   self . backbutton = ''
  if kwargs [ 'nextbutton' ] != '' :
   self . nextbutton = kwargs [ 'nextbutton' ]
  else :
   self . nextbutton = ''
   if 50 - 50: oOOoo
  self . backbuttonfunction = kwargs [ 'backbuttonfunction' ]
  self . nextbuttonfunction = kwargs [ 'nextbuttonfunction' ]
  if 34 - 34: oOOoo * II111iiii % OO0o * iiIIi1IiIi11 - oOOoo
  if kwargs [ 'selectbutton' ] != '' :
   self . selectbutton = kwargs [ 'selectbutton' ]
  else :
   self . selectbutton = ''
  self . toggleup = kwargs [ 'toggleup' ]
  self . toggledown = kwargs [ 'toggledown' ]
  self . selectbuttonfunction = kwargs [ 'selectbuttonfunction' ]
  self . toggleupfunction = kwargs [ 'toggleupfunction' ]
  self . toggledownfunction = kwargs [ 'toggledownfunction' ]
  self . maintext = kwargs [ 'maintext' ]
  if 33 - 33: i1Ii + ooOoo0O * IiiIII111ii - I1IiIiiIII / O0OoO000O0OO % i1I
  if kwargs [ 'noconnectionbutton' ] != '' :
   self . noconnectionbutton = kwargs [ 'noconnectionbutton' ]
  else :
   self . noconnectionbutton = ''
   if 21 - 21: IiiIII111ii * iIii1I11I1II1 % O0OoO000O0OO * i1IIi
  self . noconnectionfunction = kwargs [ 'noconnectionfunction' ]
  if 16 - 16: O0 - O0o0Oo * iIii1I11I1II1 + OO0o
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , Oo0o0000o0o0 + 'resources/images/smoke_background.jpg' ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , Oo0o0000o0o0 + 'resources/images/' + self . background ) )
  self . addControl ( xbmcgui . ControlImage ( 0 , 0 , 1280 , 720 , 'special://home/media/branding/branding.png' ) )
  if 50 - 50: II111iiii - O0o * oOOoO0 / O0o0Oo + i1Ii
  if 88 - 88: i1I / O0o0Oo + OO0o - II111iiii / O0o - iiIIi1IiIi11
  self . button1 = xbmcgui . ControlButton ( 910 , 600 , 225 , 35 , self . nextbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
  self . addControl ( self . button1 )
  if 15 - 15: oOOoO0 + iiIIi1IiIi11 - OoooooooOO / ooOoo0O
  if 58 - 58: i11iIiiIii % i1II1I11
  if self . backbutton != '' :
   self . button2 = xbmcgui . ControlButton ( 400 , 600 , 225 , 35 , self . backbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button2 )
   if 71 - 71: ooOoo0O + O0o % i11iIiiIii + oOOoO0 - oo
   if 88 - 88: iiIIi1IiIi11 - IiiIII111ii % ooOoo0O
  if self . toggleup == '' :
   if self . noconnectionbutton == '' :
    self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . selectbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   else :
    if i1111 != '0' :
     self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . selectbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
    elif i1111 == '0' :
     self . button0 = xbmcgui . ControlButton ( 910 , 480 , 225 , 35 , self . noconnectionbutton , font = 'font13' , alignment = 2 , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . button0 )
   self . button0 . controlDown ( self . button1 )
   self . button0 . controlRight ( self . button1 )
   self . button0 . controlUp ( self . button1 )
   if self . backbutton != '' :
    self . button0 . controlLeft ( self . button2 )
  else :
   self . toggleupbutton = xbmcgui . ControlButton ( 1000 , 480 , 35 , 35 , '' , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   self . toggledownbutton = xbmcgui . ControlButton ( 1000 , 500 , 35 , 35 , '' , focusTexture = Oo0o0000o0o0 + 'resources/images/button-focus.png' , noFocusTexture = Oo0o0000o0o0 + 'resources/images/non-focus.jpg' )
   self . addControl ( self . toggleupbutton )
   self . addControl ( self . toggledownbutton )
   self . strToggleUp = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font13' , '0xFFFFFFFF' )
   self . strToggleDown = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font13' , '0xFFFFFFFF' )
   self . addControl ( self . strToggleUp )
   self . addControl ( self . strToggleDown )
   self . strToggleUp . setLabel ( self . toggleup )
   self . strToggleDown . setLabel ( self . toggledown )
   self . toggleupbutton . controlDown ( self . toggledownbutton )
   if self . backbutton != '' :
    self . toggleupbutton . controlLeft ( self . button2 )
    self . toggledownbutton . controlLeft ( self . button2 )
   self . toggledownbutton . controlUp ( self . toggleupbutton )
   self . toggledownbutton . controlDown ( self . button1 )
   if 16 - 16: oOOoo * O0OoO000O0OO % oo
  if self . toggleup == '' :
   self . setFocus ( self . button1 )
  else :
   self . setFocus ( self . toggleupbutton )
   if 86 - 86: oOOoo + i1I % i11iIiiIii * O0OoO000O0OO . O0o * i1II1I11
  if self . backbutton != '' :
   self . button1 . controlLeft ( self . button2 )
   self . button1 . controlRight ( self . button2 )
   self . button2 . controlRight ( self . button1 )
   self . button2 . controlLeft ( self . button1 )
  if self . toggleup == '' :
   self . button1 . controlUp ( self . button0 )
   if self . backbutton != '' :
    self . button2 . controlUp ( self . button0 )
  else :
   self . button1 . controlUp ( self . toggledownbutton )
   if self . backbutton != '' :
    self . button2 . controlUp ( self . toggledownbutton )
    if 44 - 44: O0OoO000O0OO
    if 88 - 88: O0o0Oo % i1I . II111iiii
    if 38 - 38: i1Ii
  self . strHeader = xbmcgui . ControlLabel ( 380 , 50 , 250 , 20 , '' , 'font14' , '0xFFFFFFFF' )
  self . addControl ( self . strHeader )
  self . strHeader . setLabel ( self . header )
  if 57 - 57: O0 / O0OoO000O0OO * O0o0Oo / iiIIi1IiIi11 . II111iiii
  if i1111 == '0' :
   self . strWarning = xbmcgui . ControlTextBox ( 830 , 300 , 300 , 200 , 'font13' , '0xFFFF0000' )
   self . addControl ( self . strWarning )
   self . strWarning . setText ( 'No internet connection.[CR]To be able to get the most out of this device and set options like this you must be connected to the web. Please insert your ethernet cable or setup your Wi-Fi.' )
   if 26 - 26: OO0o
  self . strDescription = xbmcgui . ControlTextBox ( 800 , 130 , 320 , 300 , 'font14' , '0xFF000000' )
  self . addControl ( self . strDescription )
  self . strDescription . setText ( self . maintext )
  if 91 - 91: IiiIII111ii . oOOoO0 + IiiIII111ii - OO0o / OoooooooOO
 def onAction ( self , action ) :
  if action == I1ii11iIi11i and self . selectbutton == 'Register' :
   self . close ( )
   iII1 ( )
   if 30 - 30: II111iiii - ooOoo0O - i11iIiiIii % iiIIi1IiIi11 - II111iiii * i1I
 def onControl ( self , control ) :
  if control == self . button0 :
   if i1111 != '0' or self . noconnectionbutton == '' :
    exec self . selectbuttonfunction
   else :
    exec self . noconnectionfunction
  if control == self . button1 :
   exec self . nextbuttonfunction
  if self . backbutton != '' :
   if control == self . button2 :
    exec self . backbuttonfunction
    if 61 - 61: O0OoO000O0OO - i1II1I11 % ooOoo0O
 def message ( self , message ) :
  iIiiiI = xbmcgui . Dialog ( )
  iIiiiI . ok ( " My message title" , message )
  if 84 - 84: O0OoO000O0OO * IiiIII111ii / i1II1I11 - O0
  if 30 - 30: iIii1I11I1II1 / O0o - O0o0Oo - II111iiii % OO0o
def IIi1i11111 ( mode ) :
 if mode == 'check' :
  if ooOO00O00oo ( ) :
   I1ii11iI = iIiiiI1IiI1I1 . getLocalizedString ( 30065 )
  else :
   I1ii11iI = iIiiiI1IiI1I1 . getLocalizedString ( 30066 )
 else :
  I1ii11iI = ''
  IIi1i = mode
 I1I1iIiII1 = iii11 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30062 ) ,
 background = 'register.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30067 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30002 ) ,
 backbuttonfunction = 'self.close();iII1()' ,
 nextbuttonfunction = 'self.close();ooOO00O00oo()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30068 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "self.close();ooOO00O00oo()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30069 ) + IIi1i + '[/COLOR]' + I1ii11iI ,
 noconnectionbutton = 'ADDON.getLocalizedString(30019)' ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 I1I1iIiII1 . doModal ( )
 del I1I1iIiII1
 if 4 - 4: O0o + O0 * ooOoo0O
 if 55 - 55: I1IiIiiIII + iIii1I11I1II1 / iiIIi1IiIi11 * O0OoO000O0OO - i11iIiiIii - i1I
def iII1 ( ) :
 I1I1iIiII1 = iii11 (
 header = iIiiiI1IiI1I1 . getLocalizedString ( 30067 ) ,
 background = 'donotregister.png' ,
 backbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30070 ) ,
 nextbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30071 ) ,
 backbuttonfunction = 'xbmc.executebuiltin("Skin.SetString(Branding,off)");self.close()' ,
 nextbuttonfunction = 'ooOO00O00oo()' ,
 selectbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30072 ) ,
 toggleup = '' ,
 toggledown = '' ,
 selectbuttonfunction = "III1iII1I1ii()" ,
 toggleupfunction = '' ,
 toggledownfunction = '' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30073 ) ,
 noconnectionbutton = iIiiiI1IiI1I1 . getLocalizedString ( 30019 ) ,
 noconnectionfunction = "xbmc.executebuiltin('ActivateWindow(home)');xbmc.executebuiltin('RunAddon(service.openelec.settings)');xbmc.executebuiltin('RunAddon(script.openwindow)')"
 )
 I1I1iIiII1 . doModal ( )
 del I1I1iIiII1
 if 25 - 25: oOOoO0
 if 7 - 7: i1IIi / oOOoo * O0o0Oo . oo . iIii1I11I1II1
def iIii ( ) :
 I1I1iIiII1 = i11Iiii (
 header = 'Update In Progress' ,
 background = 'register.png' ,
 icon = 'update_software.png' ,
 maintext = iIiiiI1IiI1I1 . getLocalizedString ( 30074 ) ,
 )
 I1I1iIiII1 . doModal ( )
 del I1I1iIiII1
 if 79 - 79: OoooooooOO / O0
 if 75 - 75: iiIIi1IiIi11 % i1Ii % i1Ii . O0o0Oo
def III1iII1I1ii ( ) :
 oOOo0 ( iIiiiI1IiI1I1 . getLocalizedString ( 30079 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30080 ) )
 if 54 - 54: O0 - oo % ooOoo0O
 if 77 - 77: iiIIi1IiIi11 / oOOoo / IiiIII111ii + IiiIII111ii . ooOoo0O
def ii1ii11IIIiiI ( url ) :
 try :
  urllib . urlretrieve ( url , o0oo0o0O00OO )
  print "###Download Started"
 except :
  iIiiiI . ok ( 'Error' , 'Unable to download updates from server. Please try opening a web browser on your PC to make sure your internet is working correctly. Click OK to try again.' )
  if os . path . exists ( o0oOoO00o ) :
   shutil . rmtree ( o0oOoO00o )
  xbmc . executebuiltin ( 'reboot' )
  if 67 - 67: i1II1I11 * O0OoO000O0OO * oOOoO0 + ooOoo0O / i1IIi
  if 11 - 11: i1I + OO0o - O0o * O0OoO000O0OO % i11iIiiIii - O0o0Oo
def o0oO ( url , video ) :
 global oO
 global endtime
 if not os . path . exists ( o00 ) :
  os . makedirs ( o00 )
 oO = threading . Thread ( target = ii1ii11IIIiiI , args = [ url ] )
 IIiIi1iI = threading . Thread ( target = iIii )
 oO . start ( )
 i1IiiiI1iI = datetime . datetime . now ( )
 try :
  yt . PlayVideo ( video )
 except :
  pass
 while xbmc . Player ( ) . isPlaying ( ) :
  xbmc . sleep ( 500 )
 IIiIi1iI . start ( )
 while oO . isAlive ( ) :
  xbmc . sleep ( 500 )
 endtime = datetime . datetime . fromtimestamp ( os . path . getmtime ( o0oo0o0O00OO ) )
 i1iIi = endtime - i1IiiiI1iI
 ooOOoooooo = os . path . getsize ( o0oo0o0O00OO ) / ( 128 * 1024.0 )
 i1iIi = str ( i1iIi ) . replace ( ':' , '' )
 II1I = ooOOoooooo / float ( i1iIi )
 O0i1II1Iiii1I11 = open ( Oo0oO0ooo , mode = 'w+' )
 O0i1II1Iiii1I11 . write ( str ( II1I ) )
 O0i1II1Iiii1I11 . close ( )
 if 9 - 9: oOOoO0 / I1IiIiiIII - oOOoo / OoooooooOO / iIii1I11I1II1 - i1Ii
 if os . path . exists ( o0oo0o0O00OO ) and zipfile . is_zipfile ( o0oo0o0O00OO ) :
  o00oooO0Oo = zipfile . ZipFile ( o0oo0o0O00OO , 'r' )
  o00oooO0Oo . extractall ( Oo00OOOOO )
  try :
   os . remove ( o0oo0o0O00OO )
  except :
   print "### Failed to remove temp file"
  o0O0OOO0Ooo ( )
  print "### Removed textures"
  iiIiI ( )
  if 6 - 6: oo . O0OoO000O0OO * iiIIi1IiIi11 - i1I - oo
  if 45 - 45: oOOoo - OoooooooOO + iIii1I11I1II1 . oOOoo * i1II1I11
def o0O0OOO0Ooo ( ) :
 oOOO = xbmc . translatePath ( 'special://home/userdata/Database/Textures13.db' )
 try :
  iIII1 = database . connect ( oOOO )
  o0o = iIII1 . cursor ( )
  o0o . execute ( "DROP TABLE IF EXISTS path" )
  o0o . execute ( "VACUUM" )
  iIII1 . commit ( )
  o0o . execute ( "DROP TABLE IF EXISTS sizes" )
  o0o . execute ( "VACUUM" )
  iIII1 . commit ( )
  o0o . execute ( "DROP TABLE IF EXISTS texture" )
  o0o . execute ( "VACUUM" )
  iIII1 . commit ( )
  o0o . execute ( """CREATE TABLE path (id integer, url text, type text, texture text, primary key(id))""" )
  iIII1 . commit ( )
  o0o . execute ( """CREATE TABLE sizes (idtexture integer,size integer, width integer, height integer, usecount integer, lastusetime text)""" )
  iIII1 . commit ( )
  o0o . execute ( """CREATE TABLE texture (id integer, url text, cachedurl text, imagehash text, lasthashcheck text, PRIMARY KEY(id))""" )
  iIII1 . commit ( )
 except :
  pass
 shutil . rmtree ( I1i1iiI1 )
 if 73 - 73: oo * oOOoO0 + oOOoo . O0o
 if 70 - 70: O0o0Oo - I1IiIiiIII / i1I
def ooOO00O00oo ( ) :
 if 82 - 82: i1II1I11 % i1Ii % IiiIII111ii - I1IiIiiIII + OoooooooOO
 Iiii1i1 = ''
 OO = ''
 oo000o = iiIi1IIi1I ( )
 if '~' in oo000o :
  Iiii1i1 , OO = oo000o . split ( '~' )
  Iiii1i1 = o0OoOO000ooO0 ( 'd' , Iiii1i1 )
  OO = o0OoOO000ooO0 ( 'd' , OO )
 else :
  try :
   Iiii1i1 = o0OoOO000ooO0 ( 'd' , oo000o )
  except :
   Iiii1i1 = "fail"
   if 56 - 56: OO0o
 print "### URL=" + Iiii1i1
 try :
  print "### Video=" + OO
 except :
  print "### No Video"
 if Iiii1i1 == o0OoOO000ooO0 ( 'd' , '595d515c110b0d1804' ) :
  oo0oO0oOOoo = 'quit'
  if 51 - 51: I1IiIiiIII * i11iIiiIii
  if 94 - 94: i1I - II111iiii . ooOoo0O % i1II1I11 . i11iIiiIii + O0
 if '~' in oo000o and not os . path . exists ( xbmc . translatePath ( os . path . join ( o0oO0 , 'media' , 'branding' ) ) ) and ( o0OoOO000ooO0 ( 'd' , '5b6767632d2222675f555521605804060d1006' ) in Iiii1i1 or 'venztech.com' in Iiii1i1 ) :
  if 'http' in OO :
   try :
    urllib . urlretrieve ( OO , o0oo0o0O00OO )
   except :
    print "### Unable to download branding"
   if os . path . exists ( o0oo0o0O00OO ) and zipfile . is_zipfile ( o0oo0o0O00OO ) :
    o00oooO0Oo = zipfile . ZipFile ( o0oo0o0O00OO , 'r' )
    o00oooO0Oo . extractall ( Oo00OOOOO )
    o00oooO0Oo . close ( )
    try :
     os . remove ( o0oo0o0O00OO )
    except :
     pass
  IIi1i11111 ( Iiii1i1 )
  if 26 - 26: i1II1I11 - iIii1I11I1II1 - oOOoo / IiiIII111ii . iiIIi1IiIi11 % iIii1I11I1II1
  if 91 - 91: i1Ii . iIii1I11I1II1 / O0OoO000O0OO + i1IIi
 elif o0OoOO000ooO0 ( 'd' , '5e6a6a663025250b1c0a0506' ) in Iiii1i1 :
  o0oO ( Iiii1i1 , OO )
  if 42 - 42: O0o . i1Ii . O0o - oOOoO0
  if 40 - 40: O0o - i11iIiiIii / i1I
 elif oo000o == 'back' :
  try :
   shutil . rmtree ( o0oOoO00o )
  except :
   pass
  xbmc . executebuiltin ( 'reboot' )
  if 35 - 35: i1I - oOOoo % i1Ii . OoooooooOO % i1I
  if 47 - 47: OO0o - i1I . II111iiii + OoooooooOO . i11iIiiIii
def iiIiI ( ) :
 if xbmc . getCondVisibility ( 'system.platform.windows' ) :
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im Kodi.exe /f' )
  except :
   pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill Kodi.exe' )
  except :
   pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'tskill XBMC.exe' )
  except :
   pass
  try :
   os . system ( '@ECHO off' )
   os . system ( 'TASKKILL /im XBMC.exe /f' )
  except :
   pass
 elif xbmc . getCondVisibility ( 'system.platform.osx' ) :
  try :
   os . system ( 'killall -9 XBMC' )
  except :
   pass
  try :
   os . system ( 'killall -9 Kodi' )
  except :
   pass
 else :
  if 94 - 94: i1Ii * i1I / I1IiIiiIII / i1I
  try :
   os . system ( 'killall XBMC' )
  except :
   pass
  try :
   os . system ( 'killall Kodi' )
  except :
   pass
  try :
   os . system ( 'killall -9 xbmc.bin' )
  except :
   pass
  try :
   os . system ( 'killall -9 kodi.bin' )
  except :
   pass
   if 87 - 87: I1IiIiiIII . oo
  try :
   os . system ( 'killall AppleTV' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop kodi' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop xbmc' )
  except :
   pass
   if 75 - 75: O0o + iiIIi1IiIi11 + i1Ii * i1II1I11 % O0OoO000O0OO . OO0o
  try :
   os . system ( 'adb shell am force-stop org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc,kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc.xbmc());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc());' )
  except :
   pass
  iIiiiI . ok ( 'Attempting to use advanced task killer apk' , 'If you have the advanced task killer apk installed please click the big button at the top which says "KILL selected apps". Click "OK" then "Kill selected apps. Please be patient while your system updates the necessary files and your skin will automatically switch once fully updated.' )
  try :
   xbmc . executebuiltin ( 'StartAndroidActivity(com.rechild.advancedtaskkiller)' )
  except :
   pass
   if 55 - 55: ooOoo0O . oOOoo
   if 61 - 61: I1IiIiiIII % oo . I1IiIiiIII
def o0oOO000oO0oo ( ) :
 O0O00Ooo = str ( oOo0oooo00o [ : 2 ] )
 if O0O00Ooo < 14 :
  oOO00O = os . path . join ( i11 , 'xbmc.log' )
  if 77 - 77: I1IiIiiIII - i1IIi - i1II1I11 . iiIIi1IiIi11
 else :
  oOO00O = os . path . join ( i11 , 'kodi.log' )
  if 39 - 39: II111iiii / O0o + O0o0Oo / iiIIi1IiIi11
 I1Ii11i = open ( oOO00O , 'r' )
 i1111I1I = I1Ii11i . read ( )
 I1Ii11i . close ( )
 if 13 - 13: i1I . i11iIiiIii
 oOOoo00O00o = re . compile ( 'Host CPU: (.+?) available' ) . findall ( i1111I1I )
 O0O00Oo = oOOoo00O00o [ 0 ] if ( len ( oOOoo00O00o ) > 0 ) else ''
 return O0O00Oo . replace ( ' ' , '%20' )
 if 97 - 97: O0 * OoooooooOO . OoooooooOO
 if 33 - 33: O0o0Oo + OO0o * O0OoO000O0OO / iIii1I11I1II1 - oOOoo
def O0oO ( ) :
 O0O00Ooo = str ( oOo0oooo00o [ : 2 ] )
 if O0O00Ooo < 14 :
  oOO00O = os . path . join ( i11 , 'xbmc.log' )
  if 73 - 73: oOOoO0 * i11iIiiIii % O0OoO000O0OO . oOOoO0
 else :
  oOO00O = os . path . join ( i11 , 'kodi.log' )
  if 66 - 66: O0OoO000O0OO + O0OoO000O0OO + O0o / OO0o + ooOoo0O
 I1Ii11i = open ( oOO00O , 'r' )
 i1111I1I = I1Ii11i . read ( )
 I1Ii11i . close ( )
 if 30 - 30: O0
 iIi1 = re . compile ( 'Running on (.+?)\n' ) . findall ( i1111I1I )
 OoOOoOooooOOo = iIi1 [ 0 ] if ( len ( iIi1 ) > 0 ) else ''
 return OoOOoOooooOOo . replace ( ' ' , '%20' )
 if 87 - 87: oOOoo
 if 58 - 58: iiIIi1IiIi11 % i1Ii
def i1OOoO ( protocol ) :
 if sys . platform == 'win32' :
  for OO0O000 in os . popen ( "ipconfig /all" ) :
   if OO0O000 . lstrip ( ) . startswith ( 'Physical Address' ) :
    iiIiI1i1 = OO0O000 . split ( ':' ) [ 1 ] . strip ( ) . replace ( '-' , ':' )
    break
    if 69 - 69: O0o
 if xbmc . getCondVisibility ( 'System.Platform.Android' ) :
  if protcol == 'wifi' :
   I11iII = open ( '/sys/class/net/wlan0/address' , mode = 'r' )
  else :
   I11iII = open ( '/sys/class/net/eth0/address' , mode = 'r' )
  iiIiI1i1 = I11iII . read ( )
  iiIiI1i1 = iiIiI1i1 [ : 17 ]
  I11iII . close ( )
  if 5 - 5: oOOoo
 else :
  if protocol == 'wifi' :
   for OO0O000 in os . popen ( "/sbin/ifconfig" ) :
    if OO0O000 . find ( 'wlan0' ) > - 1 :
     iiIiI1i1 = OO0O000 . split ( ) [ 4 ]
     break
  else :
   for OO0O000 in os . popen ( "/sbin/ifconfig" ) :
    if OO0O000 . find ( 'eth0' ) > - 1 :
     iiIiI1i1 = OO0O000 . split ( ) [ 4 ]
     break
 return str ( iiIiI1i1 )
 if 48 - 48: i1Ii - O0OoO000O0OO / OoooooooOO
def oOOo0 ( heading , anounce ) :
 class OO0O0 ( ) :
  WINDOW = 10147
  CONTROL_LABEL = 1
  CONTROL_TEXTBOX = 5
  def __init__ ( self , * args , ** kwargs ) :
   xbmc . executebuiltin ( "ActivateWindow(%d)" % ( self . WINDOW , ) )
   self . win = xbmcgui . Window ( self . WINDOW )
   xbmc . sleep ( 500 )
   self . setControls ( )
  def setControls ( self ) :
   self . win . getControl ( self . CONTROL_LABEL ) . setLabel ( heading )
   try :
    I11I11 = open ( anounce ) ; o000O0O = I11I11 . read ( )
   except :
    o000O0O = anounce
   self . win . getControl ( self . CONTROL_TEXTBOX ) . setText ( str ( o000O0O ) )
   return
 OO0O0 ( )
 while xbmc . getCondVisibility ( 'Window.IsVisible(10147)' ) :
  xbmc . sleep ( 500 )
  if 18 - 18: OO0o - ooOoo0O . O0o0Oo . iIii1I11I1II1
def iiIi1IIi1I ( ) :
 i1IO0ooooOOoo0O = ''
 II1IiiIi1i = 0
 iiI11ii1I1 = 0
 try :
  Ooo0OOoOoO0 = i1OOoO ( 'wifi' )
 except :
  Ooo0OOoOoO0 = 'Unknown'
 try :
  oOo0OOoO0 = i1OOoO ( 'eth0' )
 except :
  oOo0OOoO0 = 'Unknown'
 try :
  IIo0Oo0oO0oOO00 = o0oOO000oO0oo ( )
 except :
  IIo0Oo0oO0oOO00 = 'Unknown'
 try :
  oo00OO0000oO = O0oO ( )
 except :
  oo00OO0000oO = 'Unknown'
 I1II1 = Ooo0OOoOoO0 + '&' + IIo0Oo0oO0oOO00 + '&' + oo00OO0000oO + '&' + oOo0OOoO0 . replace ( ' ' , '%20' )
 if oO0o0o0ooO0oO == 'true' :
  print "### params: " + I1II1
 xbmc . executebuiltin ( "ActivateWindow(busydialog)" )
 while II1IiiIi1i < 3 and iiI11ii1I1 == 0 :
  if 86 - 86: iIii1I11I1II1 / iiIIi1IiIi11 . II111iiii
  II1IiiIi1i += 1
  try :
   i1IO0ooooOOoo0O = II1i111Ii1i ( 'http://tlbb.me/Add.php?' + o0OoOO000ooO0 ( 'e' , I1II1 ) )
  except :
   try :
    i1IO0ooooOOoo0O = II1i111Ii1i ( 'http://venztech.com/admin/Add.php?' + o0OoOO000ooO0 ( 'e' , I1II1 ) )
   except :
    try :
     i1IO0ooooOOoo0O = II1i111Ii1i ( 'http://thelittleblackbox.com/admin/Add.php?' + o0OoOO000ooO0 ( 'e' , I1II1 ) )
    except :
     pass
  if '~' in i1IO0ooooOOoo0O :
   iii1 , ooO0oooOO0 = i1IO0ooooOOoo0O . split ( '~' )
   print "### link: " + o0OoOO000ooO0 ( 'd' , iii1 )
  elif i1IO0ooooOOoo0O != '' :
   iii1 = i1IO0ooooOOoo0O
   print "### link: " + o0OoOO000ooO0 ( 'd' , iii1 )
  if not '<body' in i1IO0ooooOOoo0O and i1IO0ooooOOoo0O != '' :
   if 'http' in o0OoOO000ooO0 ( 'd' , iii1 ) :
    iiI11ii1I1 = 1
  else :
   print "### Failed to get response from servers, attempt number " + str ( II1IiiIi1i )
   if 71 - 71: O0o0Oo . II111iiii
   if 62 - 62: OoooooooOO . i1II1I11
 try :
  xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
 except :
  pass
 if iiI11ii1I1 == 1 :
  return i1IO0ooooOOoo0O
 else :
  oOOOoo00 = iIiiiI . yesno ( iIiiiI1IiI1I1 . getLocalizedString ( 30075 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30077 ) )
  if oOOOoo00 == 1 :
   iIiiiI . ok ( iIiiiI1IiI1I1 . getLocalizedString ( 30075 ) , iIiiiI1IiI1I1 . getLocalizedString ( 30078 ) )
   try :
    shutil . rmtree ( o0oOoO00o )
   except :
    xbmc . executebuiltin ( 'Skin.SetString(Branding,off)' )
   return '595d515c110b0d1804'
  else :
   return 'back'
   if 9 - 9: O0 % O0 - i1Ii
def II1i111Ii1i ( url ) :
 OoO = urllib2 . Request ( url )
 OoO . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 10.0; WOW64; Windows NT 5.1; en-GB; rv:1.9.0.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36 Gecko/2008092417 Firefox/3.0.3' )
 iiI1IIIi = urllib2 . urlopen ( OoO , timeout = 10 )
 i1IO0ooooOOoo0O = iiI1IIIi . read ( )
 iiI1IIIi . close ( )
 return i1IO0ooooOOoo0O . replace ( '\r' , '' ) . replace ( '\n' , '' ) . replace ( '\t' , '' )
 if 47 - 47: I1IiIiiIII % i1II1I11 % i11iIiiIii - O0 + O0o
def o0OoOO000ooO0 ( mode , message ) :
 if mode == 'e' :
  import random
  ooO000OO0O00O = 0
  OOOoOO0o = ''
  while ooO000OO0O00O < 4 :
   ooO000OO0O00O += 1
   i1II1 = random . randrange ( 1 , 31 )
   i11i1 = hex ( i1II1 ) [ 2 : ]
   if len ( i11i1 ) == 1 :
    i11i1 = '0' + i11i1
   OOOoOO0o = OOOoOO0o + i11i1
  IiiiiI1i1Iii = random . randrange ( 1 , 4 )
  if IiiiiI1i1Iii == 1 : OOOoOO0o = OOOoOO0o + '0A'
  if IiiiiI1i1Iii == 2 : OOOoOO0o = OOOoOO0o + '04'
  if IiiiiI1i1Iii == 3 : OOOoOO0o = OOOoOO0o + '06'
  if IiiiiI1i1Iii == 4 : OOOoOO0o = OOOoOO0o + '08'
  oo00oO0o = OOOoOO0o [ - 2 : ]
  iiii111II = int ( oo00oO0o , 16 )
  I11iIiI1I1i11 = OOOoOO0o [ - iiii111II : - ( iiii111II - 2 ) ]
  OOoooO00o0oo0 = - int ( I11iIiI1I1i11 , 16 )
  if 61 - 61: i1I / oOOoO0 % oo + O0o / O0o0Oo . O0o
  if 12 - 12: i1IIi + i1IIi - oOOoO0 * I1IiIiiIII % I1IiIiiIII - II111iiii
  o0O = ''
  OOOooo = ''
  for OooO0OO in message :
   o0OOo0o0O0O = ord ( OooO0OO )
   o0 = int ( o0OOo0o0O0O ) + OOoooO00o0oo0
   OO0o0oOOO0O = hex ( o0 ) [ 2 : ]
   if len ( OO0o0oOOO0O ) == 1 :
    OO0o0oOOO0O = '0' + OO0o0oOOO0O
   OOOooo = str ( OOOooo ) + str ( OO0o0oOOO0O )
  return OOOooo + OOOoOO0o
 else :
  oo00oO0o = message [ - 2 : ]
  iiii111II = int ( oo00oO0o , 16 )
  I11iIiI1I1i11 = message [ - iiii111II : - ( iiii111II - 2 ) ]
  OOoooO00o0oo0 = int ( I11iIiI1I1i11 , 16 )
  message = message [ : - 10 ]
  iI = [ message [ I1i11 : I1i11 + 2 ] for I1i11 in range ( 0 , len ( message ) , 2 ) ]
  Ooo = [ int ( IiIIII1i11I , 16 ) + OOoooO00o0oo0 for IiIIII1i11I in iI ]
  OOO = [ str ( unichr ( IiIIII1i11I ) ) for IiIIII1i11I in Ooo ]
  OOOoOO0o = '' . join ( OOO )
  return OOOoOO0o . encode ( 'utf-8' )
  if 6 - 6: OoooooooOO
  if 50 - 50: oOOoO0 % O0 * i1Ii
i1Iii11Ii1i1 = binascii . unhexlify ( '6164646f6e2e786d6c' )
OOooo0O0o0 = '/usr/share/kodi/addons/script.openwindow/addon.xml'
if not os . path . exists ( OOooo0O0o0 ) :
 OOooo0O0o0 = xbmc . translatePath ( os . path . join ( o0OoOoOO00 , IiII1IiiIiI1 , i1Iii11Ii1i1 ) )
II1iI1I11I = open ( OOooo0O0o0 , mode = 'r' )
II = file . read ( II1iI1I11I )
file . close ( II1iI1I11I )
o0OO0 = re . compile ( '<ref>(.+?)</ref>' ) . findall ( II )
IiI11ii1I = o0OO0 [ 0 ] if ( len ( o0OO0 ) > 0 ) else ''
ooo = hashlib . md5 ( open ( o0OOO , 'rb' ) . read ( ) ) . hexdigest ( )
if 36 - 36: OoooooooOO . IiiIII111ii
if 56 - 56: I1IiIiiIII . oOOoO0 . oOOoo
if 39 - 39: O0 + O0o0Oo
if 91 - 91: OoooooooOO - iIii1I11I1II1 + iiIIi1IiIi11 / IiiIII111ii . iiIIi1IiIi11 + O0
if 26 - 26: oOOoO0 - OoooooooOO
if 11 - 11: oOOoo * O0OoO000O0OO
oo0oO0oOOoo = None
if oo0oO0oOOoo == None :
 if os . path . exists ( o0oo0o0O00OO ) :
  os . remove ( o0oo0o0O00OO )
 ooOO00O00oo ( )
 if 81 - 81: OO0o + oo
elif oo0oO0oOOoo == 'quit' :
 xbmc . executebuiltin ( 'Skin.SetString(Branding,off)' )
 xbmc . executebuiltin ( 'StopScript(script.openwindow)' )
 xbmc . executebuiltin ( 'ActivateWindow(home)' ) # dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')